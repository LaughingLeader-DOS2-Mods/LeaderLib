Version 1
SubGoalCombiner SGC_AND
INITSECTION
//DB_Mods_Registered(_ModID, _Author, _Version)
//DB_Mods_ActiveGoal(_ModID, _Author, _GoalTitle)
//DB_LeaderUpdater_RegisteredDatabase(_ModID, _Author, _ReferenceName, _DatabaseName, _Arity)
//DB_LeaderUpdater_RegisteredGoal(_ModID, _Author, _GoalTitle)
//DB_LeaderUpdater_LastSavedSettings(_ModID, _Author, _SettingsID, _Version)
KBSECTION
//REGION REGISTERING
PROC
LeaderUpdater_Register_Mod((STRING)_ModID, (STRING)_Author, (STRING)_Version)
AND
NOT DB_Mods_Registered(_ModID, _Author, _Version)
THEN
LeaderUpdater_Clear_RegisteredModVersions(_ModID, _Author);
DB_Mods_Registered(_ModID, _Author, _Version);
LeaderLog_Log("DEBUG", "[LeaderUpdater:RegisterMod] Registered mod [",_ModID,"] by author [",_Author,"] with version [",_Version,"].");

PROC
LeaderUpdater_Register_Mod((STRING)_ModID, (STRING)_Author, (INTEGER)_Major, (INTEGER)_Minor, (INTEGER)_Revision, (INTEGER)_Build)
AND
DB_LeaderLib_StringExt_VersionToInt(_Version, _Major, _Minor, _Revision, _Build)
AND
NOT DB_Mods_Registered(_ModID, _Author, _Version)
THEN
LeaderUpdater_Clear_RegisteredModVersions(_ModID, _Author);
DB_Mods_Registered(_ModID, _Author, _Version);

//New register call for using the version integers directly
PROC
LeaderUpdater_Register_Mod((STRING)_ModID, (STRING)_Author, (INTEGER)_Major, (INTEGER)_Minor, (INTEGER)_Revision, (INTEGER)_Build)
AND
NOT DB_LeaderLib_StringExt_VersionToInt(_, _Major, _Minor, _Revision, _Build)
AND
LeaderLib_StringExt_Internal_QRY_VersionSupported(_Major, _Minor, _Revision, _Build) // >= 0, <= 256
AND
IntegertoString(_Major, _a)
AND
IntegertoString(_Minor, _b)
AND
IntegertoString(_Revision, _c)
AND
IntegertoString(_Build, _d)
AND
StringConcatenate(_a, ".", _Str1)
AND
StringConcatenate(_Str1, _b, _Str2)
AND
StringConcatenate(_Str2, ".", _Str3)
AND
StringConcatenate(_Str3, _c, _Str4)
AND
StringConcatenate(_Str4, ".", _Str5)
AND
StringConcatenate(_Str5, _d, _Version)
AND
NOT DB_Mods_Registered(_ModID, _Author, _Version)
THEN
LeaderUpdater_Clear_RegisteredModVersions(_ModID, _Author);
DB_Mods_Registered(_ModID, _Author, _Version);
LeaderLib_StringExt_SetVersionFromString(_Version, _Major, _Minor, _Revision, _Build);
LeaderLog_Log("DEBUG", "[LeaderUpdater:RegisterMod] Registered mod [",_ModID,"] by author [",_Author,"] with version [",_Version,"].");

PROC
LeaderUpdater_Register_ActiveGoal((STRING)_ModID, (STRING)_Author, (STRING)_GoalTitle)
AND
NOT DB_Mods_ActiveGoal(_ModID, _Author, _GoalTitle)
THEN
DB_Mods_ActiveGoal(_ModID, _Author, _GoalTitle);

PROC
LeaderUpdater_Register_Database((STRING)_ModID, (STRING)_Author, (STRING)_ReferenceName, (STRING)_DatabaseName, (INTEGER)_Arity)
AND
NOT DB_LeaderUpdater_RegisteredDatabase(_ModID, _Author, _, _DatabaseName, _Arity)
THEN
DB_LeaderUpdater_RegisteredDatabase(_ModID, _Author, _ReferenceName, _DatabaseName, _Arity);

PROC
LeaderUpdater_Register_Goal((STRING)_ModID, (STRING)_Author, (STRING)_GoalTitle)
THEN
DB_LeaderUpdater_RegisteredGoal(_ModID, _Author, _GoalTitle);

PROC
LeaderUpdater_Register_Dependency((STRING)_ModID, (STRING)_Author, (STRING)_DependencyModID, (STRING)_DependencyModAuthor, (INTEGER)_NotifyWhenMissing)
THEN
DB_LeaderUpdater_Dependency(_ModID, _Author, _DependencyModID, _DependencyModAuthor, _NotifyWhenMissing);

PROC
LeaderUpdater_Register_UUID((STRING)_ModID, (STRING)_Author, (GUIDSTRING)_UUID)
AND
DB_LeaderUpdater_RegisteredUUID(_ModID, _Author, _Old)
AND
_Old != _UUID
THEN
NOT DB_LeaderUpdater_RegisteredUUID(_ModID, _Author, _Old);

PROC
LeaderUpdater_Register_UUID((STRING)_ModID, (STRING)_Author, (GUIDSTRING)_UUID)
THEN
DB_LeaderUpdater_RegisteredUUID(_ModID, _Author, _UUID);
//END_REGION

//REGION MOD_NOT_ACTIVE_EVENTS
PROC
LeaderUpdater_CheckForMissingMods()
AND
DB_LeaderUpdater_RegisteredGoal(_ModID, _Author, _GoalTitle)
AND
NOT SysIsActive(_GoalTitle)
THEN
LeaderUpdater_OnModNotActive(_ModID, _Author, _GoalTitle);

PROC
LeaderUpdater_OnModNotActive((STRING)_ModID, (STRING)_Author, (STRING)_GoalTitle)
THEN
DB_NOOP(1);
//END_REGION

//REGION DEPENDENCY_CHECKING
IF
StoryEvent(_, "LeaderLib_Initialized")
THEN
TimerCancel("LeaderUpdater_Timers_CheckDependencies");
TimerLaunch("LeaderUpdater_Timers_CheckDependencies", 250);

IF
TimerFinished("LeaderUpdater_Timers_CheckDependencies")
THEN
GlobalClearFlag("LeaderLib_ModDependenciesMissing");
LeaderUpdater_CheckForMissingMods();
LeaderUpdater_CheckForMissingDependencies();

PROC
LeaderUpdater_CheckForMissingDependencies()
AND
DB_LeaderUpdater_Dependency(_ModID, _Author, _DependencyModID, _DependencyModAuthor, 1)
AND
LeaderUpdater_QRY_ModIsActive(_ModID, _Author)
AND
NOT LeaderUpdater_QRY_ModIsActive(_DependencyModID, _DependencyModAuthor)
THEN
LeaderUpdater_Internal_AddToDictionary(_ModID, _Author, _DependencyModID, _DependencyModAuthor);

PROC
LeaderUpdater_Internal_AddToDictionary((STRING)_ModID, (STRING)_Author, (STRING)_DependencyModID, (STRING)_DependencyModAuthor)
AND
NOT DB_LeaderUpdater_Temp_MissingMods(_, _ModID, _Author)
AND
StringConcatenate("LeaderUpdater_MissingMods_", _ModID, _ArrayID)
THEN
DB_LeaderUpdater_Temp_MissingMods(_ArrayID, _ModID, _Author);

PROC
LeaderUpdater_Internal_AddToDictionary((STRING)_ModID, (STRING)_Author, (STRING)_DependencyModID, (STRING)_DependencyModAuthor)
AND
DB_LeaderUpdater_Temp_MissingMods(_ArrayID, _ModID, _Author)
THEN
LeaderLib_Array_AddToDictionary(_ArrayID, _DependencyModID, _DependencyModAuthor);

PROC
LeaderUpdater_CheckForMissingDependencies()
AND
SysCount("DB_LeaderUpdater_Temp_MissingMods", 3, _Count)
AND
_Count > 0
THEN
GlobalSetFlag("LeaderLib_ModDependenciesMissing");
SysClear("DB_LeaderUpdater_Temp_MissingModMessage", 2);
DB_LeaderUpdater_Temp_MissingModMessage("", 0);

PROC
LeaderUpdater_CheckForMissingDependencies()
AND
DB_LeaderUpdater_Temp_MissingMods(_ArrayID, _ModID, _Author)
AND
LeaderLib_Array_QRY_DictionaryDataExists(_ArrayID)
THEN
LeaderUpdater_Internal_BuildMissingModString(_ArrayID);

PROC
LeaderUpdater_Internal_BuildMissingModString((STRING)_ArrayID)
AND
DB_LeaderLib_Dictionary_Data(_ArrayID, _Index, _ModID, _AuthorID)
AND
DB_LeaderUpdater_Temp_MissingModMessage(_Str, _IsFinal)
AND
LeaderUpdater_QRY_Internal_BuildRequiredByString(_ModID, _AuthorID)
AND
DB_LeaderUpdater_Temp_RequiredByString(_ModID, _AuthorID, _RequiredByString)
AND
StringConcatenate("<font color='#FF00FF'>", _ModID, _Str1)
AND
StringConcatenate(_Str1, "</font>", _ColoredModName)
AND
StringConcatenate(_Str, "<br>", _Msg1)
AND
StringConcatenate(_Msg1, _ColoredModName, _Msg2)
AND
StringConcatenate(_Msg2, " by ", _Msg3)
AND
StringConcatenate(_Msg3, _AuthorID, _Msg4)
AND
StringConcatenate(_Msg4, _RequiredByString, _CombinedStr)
THEN
NOT DB_LeaderUpdater_Temp_RequiredByString(_ModID, _AuthorID, _RequiredByString);
NOT DB_LeaderUpdater_Temp_MissingModMessage(_Str, _IsFinal);
DB_LeaderUpdater_Temp_MissingModMessage(_CombinedStr, _IsFinal);
DB_LeaderUpdater_Temp_CombatLog_Messages(_ModID);

QRY
LeaderUpdater_QRY_Internal_BuildRequiredByString((STRING)_DependencyModID, (STRING)_DependencyModAuthor)
THEN
LeaderUpdater_Internal_BuildRequiredByString(_DependencyModID, _DependencyModAuthor);

PROC
LeaderUpdater_Internal_BuildRequiredByString((STRING)_DependencyModID, (STRING)_DependencyModAuthor)
AND
DB_LeaderUpdater_Dependency(_ModID, _Author, _DependencyModID, _DependencyModAuthor, _Notify)
THEN
DB_LeaderUpdater_Temp_RequiredBy(_DependencyModID, _DependencyModAuthor, _ModID);

PROC
LeaderUpdater_Internal_BuildRequiredByString((STRING)_DependencyModID, (STRING)_DependencyModAuthor)
THEN
DB_LeaderUpdater_Temp_RequiredByString(_DependencyModID, _DependencyModAuthor, " (Required by ");

PROC
LeaderUpdater_Internal_BuildRequiredByString((STRING)_DependencyModID, (STRING)_DependencyModAuthor)
AND
DB_LeaderUpdater_Temp_RequiredBy(_DependencyModID, _DependencyModAuthor, _ModID)
AND
DB_LeaderUpdater_Temp_RequiredByString(_DependencyModID, _DependencyModAuthor, _Str)
AND
StringConcatenate("<font color='#fcd203'>", _ModID, _Str1)
AND
StringConcatenate(_Str1, "</font>", _Str2)
AND
StringConcatenate(_Str, _Str2, _NextString)
THEN
NOT DB_LeaderUpdater_Temp_RequiredBy(_DependencyModID, _DependencyModAuthor, _ModID);
NOT DB_LeaderUpdater_Temp_RequiredByString(_DependencyModID, _DependencyModAuthor, _Str);
DB_LeaderUpdater_Temp_RequiredByString(_DependencyModID, _DependencyModAuthor, _NextString);
LeaderUpdater_Internal_RequiredByString_AddCommas(_DependencyModID, _DependencyModAuthor);

PROC
LeaderUpdater_Internal_BuildRequiredByString((STRING)_DependencyModID, (STRING)_DependencyModAuthor)
AND
DB_LeaderUpdater_Temp_RequiredByString(_DependencyModID, _DependencyModAuthor, _Str)
AND
StringConcatenate(_Str, ")", _NextStr)
THEN
NOT DB_LeaderUpdater_Temp_RequiredByString(_DependencyModID, _DependencyModAuthor, _Str);
DB_LeaderUpdater_Temp_RequiredByString(_DependencyModID, _DependencyModAuthor, _NextStr);

PROC
LeaderUpdater_Internal_RequiredByString_AddCommas((STRING)_DependencyModID, (STRING)_DependencyModAuthor)
AND
LeaderUpdater_QRY_Internal_RequiredByString_HasOtherMods(_DependencyModID, _DependencyModAuthor)
AND
DB_LeaderUpdater_Temp_RequiredByString(_DependencyModID, _DependencyModAuthor, _Str)
AND
StringConcatenate(_Str, ", ", _NextStr)
THEN
NOT DB_LeaderUpdater_Temp_RequiredByString(_DependencyModID, _DependencyModAuthor, _Str);
DB_LeaderUpdater_Temp_RequiredByString(_DependencyModID, _DependencyModAuthor, _NextStr);

QRY
LeaderUpdater_QRY_Internal_RequiredByString_HasOtherMods((STRING)_DependencyModID, (STRING)_DependencyModAuthor)
AND
DB_LeaderUpdater_Temp_RequiredBy(_DependencyModID, _DependencyModAuthor, _ModID)
THEN
DB_NOOP(1);

PROC
LeaderUpdater_CheckForMissingDependencies()
AND
DB_LeaderUpdater_Temp_MissingModMessage(_Str, 0)
THEN
NOT DB_LeaderUpdater_Temp_MissingModMessage(_Str, 0);
DB_LeaderUpdater_Temp_MissingModMessage(_Str, 1);

PROC
LeaderUpdater_CheckForMissingDependencies()
AND
DB_LeaderUpdater_Temp_MissingModMessage(_Str, 1)
AND
DB_GlobalFlag("LeaderLib_IsEditorMode")
THEN
TimerCancel("LeaderUpdater_Timers_NotifyMissingMods");
TimerLaunch("LeaderUpdater_Timers_NotifyMissingMods", 1000);

PROC
LeaderUpdater_CheckForMissingDependencies()
AND
DB_LeaderUpdater_Temp_MissingModMessage(_Str, 1)
AND
NOT DB_GlobalFlag("LeaderLib_IsEditorMode")
THEN
TimerCancel("LeaderUpdater_Timers_NotifyMissingMods");
TimerLaunch("LeaderUpdater_Timers_NotifyMissingMods", 10000);

IF
TimerFinished("LeaderUpdater_Timers_NotifyMissingMods")
AND
DB_LeaderUpdater_Temp_MissingModMessage(_Str, _IsFinal)
AND
CharacterGetHostCharacter(_Host)
AND
QRY_SpeakerIsAvailable(_Host)
AND
NOT DB_CharacterMoveToAndTalk_CharacerIsMoving(_, _Host, _, _) // No incoming dialogs
THEN
NOT DB_LeaderUpdater_Temp_MissingModMessage(_Str, _IsFinal);
//ShowNotification(_Host, _Str);
//OpenMessageBoxChoice(_Host, _Str, "OK", "Stop Notifications");
//OpenMessageBox(_Host, _Str); // For translated string keys - Strings > 255 characters cause a crash from the event.
OpenMessageBoxChoice(_Host, "LeaderLib_MessageBox_MissingModDependendencies", "LeaderLib_MessageBox_CheckMissingMods", "LeaderLib_MessageBox_SkipCheck");
DialogSetVariableString("LeaderLib_MissingModDependencyList", "LeaderLib_MissingModDependencyText_24356ba8-a1c7-4ad9-86fe-de1c834ec789", _Str);
//LeaderLog_SetOneshotTarget(_Host);
DB_LeaderUpdater_Temp_CombatLog_WritingToLog(1);
LeaderLog_LogTarget("COMBAT", _Host, "<font color='#00FF00'>[LeaderLib]</font> <font color='#FF0000'>Missing required mods:</font>");
LeaderUpdater_Internal_ClearMissingModData();

IF
StoryEvent((CHARACTERGUID)_Host, "LeaderLib_Events_OnCombatLog")
AND
DB_LeaderUpdater_Temp_CombatLog_WritingToLog(1)
THEN
NOT DB_LeaderUpdater_Temp_CombatLog_WritingToLog(1);
LeaderUpdater_Internal_DisplayMissingModsInCombatLog(_Host);

PROC
LeaderUpdater_Internal_DisplayMissingModsInCombatLog((CHARACTERGUID)_Host)
AND
DB_LeaderUpdater_Temp_CombatLog_Messages(_Str)
AND
NOT DB_LeaderUpdater_Temp_CombatLog_WritingToLog(_)
THEN
NOT DB_LeaderUpdater_Temp_CombatLog_Messages(_Str);
DB_LeaderUpdater_Temp_CombatLog_WritingToLog(1);
LeaderLog_LogTarget("COMBAT", _Host, "<font color='#FF00FF'>", _Str, "</font>");

PROC
LeaderUpdater_Internal_DisplayMissingModsInCombatLog()
AND
NOT DB_LeaderUpdater_Temp_CombatLog_Messages(_)
THEN
NOT DB_LeaderUpdater_Temp_CombatLog_WritingToLog(1);

IF
MessageBoxChoiceClosed(_Player, "LeaderLib_MessageBox_MissingModDependendencies", "LeaderLib_MessageBox_CheckMissingMods")
THEN
Proc_StartDialog(0, "LeaderLib_MissingModDependencyList", _Player, _Player);

IF
MessageBoxChoiceClosed(_Player, "LeaderLib_MessageBox_MissingModDependendencies", "LeaderLib_MessageBox_SkipCheck")
THEN
DB_NOOP(1);

//Message wasn't sent for some reason.
IF
TimerFinished("LeaderUpdater_Timers_NotifyMissingMods")
AND
DB_LeaderUpdater_Temp_MissingModMessage(_Str, _IsFinal)
THEN
TimerLaunch("LeaderUpdater_Timers_NotifyMissingMods", 1000);

PROC
LeaderUpdater_Internal_ClearMissingModData()
AND
DB_LeaderUpdater_Temp_MissingModMessage(_Str, _IsFinal)
THEN
NOT DB_LeaderUpdater_Temp_MissingModMessage(_Str, _IsFinal);
LeaderLib_SendEvent("LeaderLib_MissingModsMessageFinished");

PROC
LeaderUpdater_Internal_ClearMissingModData()
AND
DB_LeaderUpdater_Temp_MissingMods(_ArrayID, _ModID, _Author)
THEN
NOT DB_LeaderUpdater_Temp_MissingMods(_ArrayID, _ModID, _Author);
LeaderLib_Array_ClearDictionary(_ArrayID);
//END_REGION

//REGION CLEAR_REGISTERED
PROC
LeaderUpdater_Clear_RegisteredDatabase((STRING)_ModID, (STRING)_Author, (STRING)_DatabaseName)
AND
DB_LeaderUpdater_RegisteredDatabase(_ModID, _Author, _ReferenceName, _DatabaseName, _Arity)
THEN
NOT DB_LeaderUpdater_RegisteredDatabase(_ModID, _Author, _ReferenceName, _DatabaseName, _Arity);

PROC
LeaderUpdater_Clear_RegisteredGoal((STRING)_ModID, (STRING)_Author, (STRING)_GoalTitle)
AND
DB_LeaderUpdater_RegisteredGoal(_ModID, _Author, _GoalTitle)
THEN
NOT DB_LeaderUpdater_RegisteredGoal(_ModID, _Author, _GoalTitle);
//END_REGION

//REGION QUERIES
QRY
LeaderUpdater_QRY_ModIsRegistered((STRING)_ModID, (STRING)_Author)
AND
DB_Mods_Registered(_ModID, _Author, _Version)
THEN
DB_NOOP(1);

QRY
LeaderUpdater_QRY_ModUpdateNeeded((STRING)_ModID, (STRING)_Author, (STRING)_Version)
AND
NOT DB_Mods_Registered(_ModID, _Author, _Version)
THEN
DB_NOOP(1);

QRY
LeaderUpdater_QRY_ModUpdateNeeded((STRING)_ModID, (STRING)_Author, (INTEGER)_Major, (INTEGER)_Minor, (INTEGER)_Revision, (INTEGER)_Build)
AND
DB_LeaderLib_StringExt_VersionToInt(_Version, _Major, _Minor, _Revision, _Build)
AND
NOT DB_Mods_Registered(_ModID, _Author, _Version)
THEN
DB_NOOP(1);

QRY
LeaderUpdater_QRY_ModUpdateNeeded((STRING)_ModID, (STRING)_Author, (INTEGER)_Major, (INTEGER)_Minor, (INTEGER)_Revision, (INTEGER)_Build)
AND
NOT DB_LeaderLib_StringExt_VersionToInt(_, _Major, _Minor, _Revision, _Build)
AND
LeaderLib_StringExt_Internal_QRY_VersionSupported(_Major, _Minor, _Revision, _Build) // >= 0, <= 256
AND
IntegertoString(_Major, _a)
AND
IntegertoString(_Minor, _b)
AND
IntegertoString(_Revision, _c)
AND
IntegertoString(_Build, _d)
AND
StringConcatenate(_a, ".", _Msg1)
AND
StringConcatenate(_Msg1, _b, _Msg2)
AND
StringConcatenate(_Msg2, ".", _Msg3)
AND
StringConcatenate(_Msg3, _c, _Msg4)
AND
StringConcatenate(_Msg4, ".", _Msg5)
AND
StringConcatenate(_Msg5, _d, _Version)
AND
NOT DB_Mods_Registered(_ModID, _Author, _Version)
THEN
DB_LeaderLib_StringExt_VersionToInt(_Version, _Major, _Minor, _Revision, _Build);

QRY
LeaderUpdater_QRY_ModIsActive((STRING)_ModID)
AND
DB_Mods_ActiveGoal(_ModID, _Author, _GoalTitle)
AND
SysIsActive(_GoalTitle)
THEN
DB_NOOP(1);

QRY
LeaderUpdater_QRY_ModIsActive((STRING)_ModID, (STRING)_Author)
AND
DB_Mods_ActiveGoal(_ModID, _Author, _GoalTitle)
AND
SysIsActive(_GoalTitle)
THEN
DB_NOOP(1);

QRY
LeaderUpdater_QRY_ModIsActive((STRING)_ModID, (STRING)_Author)
AND
DB_LeaderUpdater_RegisteredUUID(_ModID, _Author, _UUID)
AND
LeaderUpdater_QRY_ModIsActive_Ext(_UUID)
THEN
DB_NOOP(1);

QRY
LeaderUpdater_QRY_ModIsActive((STRING)_ModID, (STRING)_Author, (STRING)_GoalTitle)
AND
SysIsActive(_GoalTitle)
THEN
DB_NOOP(1);

QRY
LeaderUpdater_QRY_ModIsActive((STRING)_ModID, (STRING)_Author, (STRING)_GoalTitle)
AND
DB_LeaderUpdater_RegisteredUUID(_ModID, _Author, _UUID)
AND
LeaderUpdater_QRY_ModIsActive_Ext(_UUID)
THEN
DB_NOOP(1);

// [BEGIN_NO_OSITOOLS]
QRY
LeaderUpdater_QRY_ModIsActive_Ext((GUIDSTRING)_UUID)
AND
1 == 0
THEN
DB_NOOP(1);
// [END_NO_OSITOOLS]

/* [OSITOOLS_ONLY]
QRY
LeaderUpdater_QRY_ModIsActive_Ext((GUIDSTRING)_UUID)
AND
NRD_IsModLoaded(_UUID, 1)
THEN
DB_NOOP(1);
*/

/* [OSITOOLS_ONLY]
QRY
LeaderUpdater_QRY_ModIsActive_ByUUID((GUIDSTRING)_UUID)
AND
NRD_IsModLoaded(_UUID, 1)
THEN
DB_NOOP(1);
*/

// [BEGIN_NO_OSITOOLS]
QRY
LeaderUpdater_QRY_ModIsActive_ByUUID((GUIDSTRING)_UUID)
AND
DB_LeaderUpdater_RegisteredUUID(_ModID, _Author, _UUID)
AND
DB_Mods_ActiveGoal(_ModID, _Author, _GoalTitle)
AND
SysIsActive(_GoalTitle)
THEN
DB_NOOP(1);
// [END_NO_OSITOOLS]

QRY
LeaderUpdater_QRY_ModRegisteredActiveGoal((STRING)_ModID, (STRING)_Author)
AND
DB_Mods_ActiveGoal(_ModID, _Author, _GoalTitle)
THEN
DB_NOOP(1);

QRY
LeaderUpdater_QRY_ModVersionIsInWrongColumn((STRING)_ModID, (STRING)_Author)
AND
DB_Mods_Registered(_ModID, _Author, _Version)
AND
NOT LeaderLib_StringExt_QRY_IsVersionString(_Version)
THEN
DB_NOOP(1);

PROC
LeaderUpdater_CheckIfModIsActive((STRING)_ModID, (STRING)_Author, (STRING)_ActiveEvent, (STRING)_NotActiveEvent)
AND
LeaderUpdater_QRY_ModIsActive(_ModID, _Author)
THEN
LeaderLib_SendEvent(_ActiveEvent);

PROC
LeaderUpdater_CheckIfModIsActive((STRING)_ModID, (STRING)_Author, (STRING)_ActiveEvent, (STRING)_NotActiveEvent)
AND
NOT LeaderUpdater_QRY_ModIsActive(_ModID, _Author)
THEN
LeaderLib_SendEvent(_NotActiveEvent);

QRY
LeaderUpdater_QRY_RegisteredVersionIsLessThan((STRING)_ModID, (STRING)_Author, (INTEGER)_OtherMajor, (INTEGER)_OtherMinor, (INTEGER)_OtherRevision, (INTEGER)_OtherBuild)
AND
DB_Mods_Registered(_ModID, _Author, _Version)
AND
LeaderLib_StringExt_QRY_VersionIsLessThan(_Version, _OtherMajor, _OtherMinor, _OtherRevision, _OtherBuild)
THEN
DB_NOOP(1);
//END_REGION

//REGION RESET
PROC
LeaderUpdater_Clear_RegisteredModVersions((STRING)_ModID, (STRING)_Author)
AND
LeaderUpdater_QRY_ModIsRegistered(_ModID, _Author)
THEN
LeaderLog_Log("DEBUG", "[LeaderUpdater:RegisterMod] Removing registered versions of mod [",_ModID,"] by author [",_Author,"].");

PROC
LeaderUpdater_Clear_RegisteredModVersions((STRING)_ModID, (STRING)_Author)
AND
DB_Mods_Registered(_ModID, _Author, _Version)
THEN
NOT DB_Mods_Registered(_ModID, _Author, _Version);
DB_LeaderUpdater_Temp_PastRegistered(_ModID, _Author, _Version);

PROC
LeaderUpdater_Clear_ActiveGoals((STRING)_ModID, (STRING)_Author)
AND
DB_Mods_ActiveGoal(_ModID, _Author, _GoalTitle)
THEN
NOT DB_Mods_ActiveGoal(_ModID, _Author, _GoalTitle);

PROC
LeaderUpdater_SysClear_AllDatabases((STRING)_ModID, (STRING)_Author)
AND
DB_LeaderUpdater_RegisteredDatabase(_ModID, _Author, _GoalTitle, _DatabaseName, _Arity)
THEN
SysClear(_DatabaseName, _Arity);

PROC
LeaderUpdater_Clear_AllRegisteredDatabasesFromModAndAuthor((STRING)_ModID, (STRING)_Author)
AND
DB_LeaderUpdater_RegisteredDatabase(_ModID, _Author, _ReferenceName, _DatabaseName, _Arity)
THEN
NOT DB_LeaderUpdater_RegisteredDatabase(_ModID, _Author, _ReferenceName, _DatabaseName, _Arity);

PROC
LeaderUpdater_Clear_AllRegisteredDatabasesWithReferenceName((STRING)_ModID, (STRING)_Author, (STRING)_ReferenceName)
AND
DB_LeaderUpdater_RegisteredDatabase(_ModID, _Author, _ReferenceName, _DatabaseName, _Arity)
THEN
NOT DB_LeaderUpdater_RegisteredDatabase(_ModID, _Author, _ReferenceName, _DatabaseName, _Arity);

PROC
LeaderUpdater_Reset_AllGoals((STRING)_ModID, (STRING)_Author)
AND
DB_LeaderUpdater_RegisteredGoal(_ModID, _Author, _GoalTitle)
AND
SysIsCompleted(_GoalTitle)
THEN
LeaderLog_Log("DEBUG", "[LeaderUpdater:Reset:AllGoals] Set goal [",_GoalTitle,"] to sleeping for mod [",_ModID,"] by author [",_Author,"].");
SysSetGoalSleeping(_GoalTitle);

PROC
LeaderUpdater_Clear_AllRegisteredData((STRING)_ModID, (STRING)_Author)
THEN
LeaderUpdater_SysClear_AllDatabases(_ModID, _Author);
LeaderUpdater_Clear_AllRegisteredDatabasesFromModAndAuthor(_ModID, _Author);
LeaderUpdater_Clear_ActiveGoals(_ModID, _Author);
LeaderUpdater_Clear_RegisteredModVersions(_ModID, _Author);

PROC
LeaderUpdater_Clear_AllRegisteredData((STRING)_ModID, (STRING)_Author)
AND
DB_LeaderUpdater_RegisteredGoal(_ModID, _Author, _GoalTitle)
THEN
NOT DB_LeaderUpdater_RegisteredGoal(_ModID, _Author, _GoalTitle);
//END_REGION

//REGION UPDATER
QRY
LeaderUpdater_QRY_ModVersionsChanged()
AND
DB_LeaderUpdater_Temp_PastRegistered(_ModID, _Author, _Version)
THEN
DB_NOOP(1);

IF
StoryEvent(_, "LeaderLib_Initialized")
AND
DB_LeaderUpdater_Temp_PastRegistered(_ModID, _Author, _OldVersion)
AND
DB_Mods_Registered(_ModID, _Author, _CurrentVersion)
THEN
NOT DB_LeaderUpdater_Temp_PastRegistered(_ModID, _Author, _OldVersion);
LeaderUpdater_ModUpdated(_ModID, _Author, _OldVersion, _CurrentVersion);

//Fail-safe
IF
StoryEvent(_, "LeaderLib_Initialized")
AND
DB_LeaderUpdater_Temp_PastRegistered(_ModID, _Author, _OldVersion)
AND
NOT DB_Mods_Registered(_ModID, _Author, _)
THEN
NOT DB_LeaderUpdater_Temp_PastRegistered(_ModID, _Author, _OldVersion);
LeaderUpdater_ModUpdated(_ModID, _Author, _OldVersion, "");

PROC
LeaderUpdater_ModUpdated((STRING)_ModID, (STRING)_Author, (STRING)_PastVersion, (STRING)_NewVersion)
THEN
DB_NOOP(1);

/* [OSITOOLS_ONLY]
PROC
LeaderUpdater_ModUpdated((STRING)_ModID, (STRING)_Author, (STRING)_PastVersion, (STRING)_NewVersion)
AND
DB_LeaderUpdater_RegisteredUUID(_ModID, _Author, _UUID)
AND
String(_UUID, _UUIDStr)
THEN
NRD_LuaCall("LeaderUpdater_Ext_ModUpdated", _ModID, _Author, _PastVersion, _NewVersion, _UUIDStr);
*/
//END_REGION

//REGION ACTIVE_FLAG
IF
StoryEvent(_, "LeaderLib_Initialized")
AND
DB_Mods_ActiveGoal(_ModID, _Author, _GoalTitle)
AND
StringConcatenate(_ModID, "_IsActive", _Flag)
THEN
LeaderUpdater_SetModActiveFlag(_ModID, _Author, _GoalTitle, _Flag);

PROC
LeaderUpdater_SetModActiveFlag((STRING)_ModID, (STRING)_Author, (STRING)_GoalTitle, (STRING)_Flag)
AND
LeaderUpdater_QRY_ModIsActive(_ModID, _Author, _GoalTitle)
AND
GlobalGetFlag(_Flag, 0)
THEN
LeaderLog_Log("DEBUG", "[LeaderUpdater:SetModActiveFlag] Mod [",_ModID,"] by [",_Author,"] is active [",_GoalTitle,"]. Setting global flag [",_Flag,"].");
GlobalSetFlag(_Flag);

PROC
LeaderUpdater_SetModActiveFlag((STRING)_ModID, (STRING)_Author, (STRING)_GoalTitle, (STRING)_Flag)
AND
NOT LeaderUpdater_QRY_ModIsActive(_ModID, _Author, _GoalTitle)
AND
GlobalGetFlag(_Flag, 1)
THEN
LeaderLog_Log("DEBUG", "[LeaderUpdater:SetModActiveFlag] Mod [",_ModID,"] by [",_Author,"] is no longer active [",_GoalTitle,"]. Clearing global flag [",_Flag,"].");
GlobalClearFlag(_Flag);

//Support for mods without scripts, thanks to OsiTools
/* [OSITOOLS_ONLY]
IF
StoryEvent(_, "LeaderLib_Initialized")
AND
DB_LeaderUpdater_RegisteredUUID(_ModID, _Author, _UUID)
AND
NOT DB_Mods_ActiveGoal(_ModID, _Author, _)
AND
NRD_IsModLoaded(_UUID, _IsLoaded)
AND
StringConcatenate(_ModID, "_IsActive", _Flag)
THEN
LeaderUpdater_Internal_SetModActiveFlagByUUID(_ModID, _Author, _Flag, _IsLoaded);
*/

PROC
LeaderUpdater_Internal_SetModActiveFlagByUUID((STRING)_ModID, (STRING)_Author, (STRING)_Flag, 0)
AND
GlobalGetFlag(_Flag, 1)
THEN
LeaderLog_Log("DEBUG", "[LeaderUpdater:SetModActiveFlag] Mod [",_ModID,"] by [",_Author,"] is active. Setting global flag [",_Flag,"].");
GlobalClearFlag(_Flag);

PROC
LeaderUpdater_Internal_SetModActiveFlagByUUID((STRING)_ModID, (STRING)_Author, (STRING)_Flag, 1)
AND
GlobalGetFlag(_Flag, 0)
THEN
LeaderLog_Log("DEBUG", "[LeaderUpdater:SetModActiveFlag] Mod [",_ModID,"] by [",_Author,"] is active. Setting global flag [",_Flag,"].");
GlobalSetFlag(_Flag);
//END_REGION

//REGION LUA_MOD_REGISTRATION
/* Mods can register to LeaderLib, through Lua, like so:

if _G["LeaderLib_Ext_RegisterMod"] ~= nil then
	local func = _G["LeaderLib_Ext_RegisterMod"]
	func("ModName", "AuthorName", 1,0,0,0, "UUID")
end

Including the Mod UUID here means LeaderLib can use the extender to see if the mod is active.
*/

/* [OSITOOLS_ONLY]
PROC
LeaderLib_StoryStarted()
THEN
NRD_LuaCall("LeaderLib_Ext_RegisterModsFromLua");

IF
SavegameLoaded(_,_,_,_)
THEN
NRD_LuaCall("LeaderLib_Ext_RegisterModsFromLua");
*/
//END_REGION

//REGION UNINSTALLING
PROC
LeaderUpdater_UnregisterMod((STRING)_ModID, (STRING)_Author)
AND
DB_Mods_Registered(_ModID, _Author, _Version)
THEN
NOT DB_Mods_Registered(_ModID, _Author, _Version);

PROC
LeaderUpdater_UninstallMod((STRING)_ModID, (STRING)_Author)
THEN
//Currently unimplemented
DB_NOOP(1);
//END_REGION
EXITSECTION

ENDEXITSECTION
ParentTargetEdge "LaughingLeader__LeaderLib"
