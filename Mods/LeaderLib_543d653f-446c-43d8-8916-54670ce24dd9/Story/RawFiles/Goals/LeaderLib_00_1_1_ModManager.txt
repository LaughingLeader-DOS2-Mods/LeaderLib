Version 1
SubGoalCombiner SGC_AND
INITSECTION
KBSECTION
//REGION REGISTERING
PROC
LeaderLib_Mods_Internal_Clear_LastModInfo((GUIDSTRING)_UUID)
AND
DB_LeaderLib_Mods_Registered(_UUID, _ModID, _DisplayName, _Author, _Version, _Major, _Minor, _Revision, _Build)
THEN
NOT DB_LeaderLib_Mods_Registered(_UUID, _ModID, _DisplayName, _Author, _Version, _Major, _Minor, _Revision, _Build);

PROC
LeaderLib_Mods_Register_Mod((GUIDSTRING)_UUID, (STRING)_ModID, (STRING)_DisplayName, (STRING)_Author, (INTEGER)_Version, (INTEGER)_Major, (INTEGER)_Minor, (INTEGER)_Revision, (INTEGER)_Build)
THEN
LeaderLib_Mods_Internal_Clear_LastModInfo(_UUID);
DB_LeaderLib_Mods_Registered(_UUID, _ModID, _DisplayName, _Author, _Version, _Major, _Minor, _Revision, _Build);

PROC
LeaderLib_Mods_Internal_Register((GUIDSTRING)_UUID, (STRING)_ModID, (STRING)_DisplayName, (STRING)_Author, (INTEGER)_Version, (INTEGER)_Major, (INTEGER)_Minor, (INTEGER)_Revision, (INTEGER)_Build)
AND
DB_LeaderLib_Mods_Registered(_UUID, _ModID, _DisplayName, _LastAuthor, _LastVersion, _LastMajor, _LastMinor, _LastRevision, _LastBuild)
THEN
NOT DB_LeaderLib_Mods_Registered(_UUID, _ModID, _DisplayName, _LastAuthor, _LastVersion, _LastMajor, _LastMinor, _LastRevision, _LastBuild);
DB_LeaderLib_Mods_Registered(_UUID, _ModID, _DisplayName, _Author, _Version, _Major, _Minor, _Revision, _Build);
LeaderLib_Mods_OnVersionChanged(_UUID, _LastVersion, _Version);
LeaderLib_Mods_OnVersionChanged(_UUID, _LastMajor, _LastMinor, _LastRevision, _LastBuild, _Major, _Minor, _Revision, _Build);
LeaderLib_Mods_Internal_FireOldProc(_ModID, _Author, _LastVersion, _Version);

PROC
LeaderLib_Mods_Internal_Register((GUIDSTRING)_UUID, (STRING)_ModID, (STRING)_DisplayName, (STRING)_Author, (INTEGER)_Version, (INTEGER)_Major, (INTEGER)_Minor, (INTEGER)_Revision, (INTEGER)_Build)
AND
NOT DB_LeaderLib_Mods_Registered(_UUID, _, _, _, _, _, _, _, _)
THEN
DB_LeaderLib_Mods_Registered(_UUID, _ModID, _DisplayName, _Author, _Version, _Major, _Minor, _Revision, _Build);
DB_LeaderUpdater_RegisteredUUID(_ModID, _Author, _UUID);
LeaderLib_Mods_OnModRegistered(_UUID, _Version, _Major, _Minor, _Revision, _Build);
LeaderLib_Mods_OnVersionChanged(_UUID, -1, _Version);
LeaderLib_Mods_OnVersionChanged(_UUID, -1, -1, -1, -1, _Major, _Minor, _Revision, _Build);
LeaderLib_Mods_Internal_FireOldProc(_ModID, _Author, -1, _Version);

// [BEGIN_NO_OSITOOLS]
PROC
LeaderLib_Mods_Internal_FireOldProc((STRING)_ModID, (STRING)_Author, (INTEGER)_PastVersion, (INTEGER)_NextVersion)
THEN
DB_NOOP(1);
// [END_NO_OSITOOLS]

/* [OSITOOLS_ONLY]
PROC
LeaderLib_Mods_Internal_FireOldProc((STRING)_ModID, (STRING)_Author, (INTEGER)_PastVersion, (INTEGER)_NextVersion)
AND
NOT DB_LeaderUpdater_Temp_PastRegistered(_ModID, _, _)
AND
LeaderLib_Ext_QRY_VersionIntegerToString(_PastVersion, _PastVersionString)
AND
LeaderLib_Ext_QRY_VersionIntegerToString(_NextVersion, _NextVersionString)
THEN
LeaderUpdater_ModUpdated(_ModID, _Author, _PastVersionString, _NextVersionString);
*/

/*
PROC
LeaderLib_Mods_Internal_Register((GUIDSTRING)_UUID, (STRING)_ModID, (STRING)_DisplayName, (STRING)_Author, (INTEGER)_Version, (INTEGER)_Major, (INTEGER)_Minor, (INTEGER)_Revision, (INTEGER)_Build)
AND
GlobalGetFlag("LeaderLib_IsEditorMode", 1)
THEN
NRD_ModCall("LeaderLib", "PrintModDB");
*/
//END_REGION

//REGION RENAME_ID
PROC
LeaderLib_Mods_RenameOldModID((STRING)_ModID, (STRING)_NewID)
AND
DB_Mods_Registered(_ModID, _Author, _Version)
THEN
NOT DB_Mods_Registered(_ModID, _Author, _Version);
DB_Mods_Registered(_NewID, _Author, _Version);

PROC
LeaderLib_Mods_RenameOldModID((STRING)_ModID, (STRING)_NewID)
AND
DB_Mods_ActiveGoal(_ModID, _Author, _Goal)
THEN
NOT DB_Mods_ActiveGoal(_ModID, _Author, _Goal);
DB_Mods_ActiveGoal(_NewID, _Author, _Goal);

PROC
LeaderLib_Mods_RenameOldModID((STRING)_ModID, (STRING)_NewID)
AND
DB_LeaderUpdater_RegisteredUUID(_ModID, _Author, _UUID)
THEN
NOT DB_LeaderUpdater_RegisteredUUID(_ModID, _Author, _UUID);
DB_LeaderUpdater_RegisteredUUID(_NewID, _Author, _UUID);

PROC
LeaderLib_Mods_RenameOldModID((STRING)_ModID, (STRING)_NewID)
AND
DB_LeaderLib_GlobalSettings_Flags(_Flag, _ModID, _Author, _LastVal)
THEN
NOT DB_LeaderLib_GlobalSettings_Flags(_Flag, _ModID, _Author, _LastVal);
DB_LeaderLib_GlobalSettings_Flags(_Flag, _NewID, _Author, _LastVal);

PROC
LeaderLib_Mods_RenameOldModID((STRING)_ModID, (STRING)_NewID)
AND
DB_LeaderLib_GlobalSettings_Integers(_ModID, _Author, _Name, _LastDefaultValue)
THEN
NOT DB_LeaderLib_GlobalSettings_Integers(_ModID, _Author, _Name, _LastDefaultValue);
DB_LeaderLib_GlobalSettings_Integers(_NewID, _Author, _Name, _LastDefaultValue);

PROC
LeaderLib_Mods_RenameOldModID((STRING)_ModID, (STRING)_NewID)
AND
DB_LeaderLib_ModMenu_RegisteredMenuData(_ID, _DisplayName, _Dialog, _ModID, _Author)
THEN
NOT DB_LeaderLib_ModMenu_RegisteredMenuData(_ID, _DisplayName, _Dialog, _ModID, _Author);
DB_LeaderLib_ModMenu_RegisteredMenuData(_ID, _DisplayName, _Dialog, _NewID, _Author);

PROC
LeaderLib_Mods_RenameOldModID((STRING)_ModID, (STRING)_NewID)
AND
StringConcatenate(_ModID, "_IsActive", _EnabledGlobalFlag)
AND
DB_LeaderLib_PresetMenu_RegisteredPreset(_Group, _Preset, _EnabledGlobalFlag)
AND
StringConcatenate(_NewID, "_IsActive", _NewEnabledGlobalFlag)
THEN
NOT DB_LeaderLib_PresetMenu_RegisteredPreset(_Group, _Preset, _EnabledGlobalFlag);
DB_LeaderLib_PresetMenu_RegisteredPreset(_Group, _Preset, _NewEnabledGlobalFlag);

/*
PROC
LeaderLib_Mods_RenameOldModID((STRING)_ModID, (STRING)_NewID)
AND
DB_LeaderLib_Mods_Registered(_UUID, _ModID, _DisplayName, _Author, _Version, _Major, _Minor, _Revision, _Build)
THEN
NOT DB_LeaderLib_Mods_Registered(_UUID, _ModID, _DisplayName, _Author, _Version, _Major, _Minor, _Revision, _Build);
DB_LeaderLib_Mods_Registered(_UUID, _NewID, _DisplayName, _Author, _Version, _Major, _Minor, _Revision, _Build);
*/
//END_REGION

//REGION MOD_PROC_EVENTS
/* Called when a mod is registered for the first time. */
PROC
LeaderLib_Mods_OnModRegistered((GUIDSTRING)_UUID, (INTEGER)_Version, (INTEGER)_Major, (INTEGER)_Minor, (INTEGER)_Revision, (INTEGER)_Build)
THEN
DB_NOOP(1);

/* Called when a mod's registered version changes, including the first registration. Uses the version integer in meta.lsx */
PROC
LeaderLib_Mods_OnVersionChanged((GUIDSTRING)_UUID, (INTEGER)_LastVersion, (INTEGER)_NextVersion)
THEN
DB_NOOP(1);

/* Called when a mod's registered version changes, using the individual version numbers. */
PROC
LeaderLib_Mods_OnVersionChanged((GUIDSTRING)_UUID, (INTEGER)_LastMajor, (INTEGER)_LastMinor, (INTEGER)_LastRevision, (INTEGER)_LastBuild, (INTEGER)_NextMajor, (INTEGER)_NextMinor, (INTEGER)_NextRevision, (INTEGER)_NextBuild)
THEN
DB_NOOP(1);

PROC
LeaderLib_Mods_Internal_CheckForIDRename((GUIDSTRING)_UUID)
AND
DB_LeaderUpdater_RegisteredUUID(_OldModID, _OldAuthor, _UUID)
AND
DB_LeaderLib_Mods_Registered(_UUID, _ModID, _DisplayName, _Author, _Version, _Major, _Minor, _Revision, _Build)
AND
_OldModID != _ModID
THEN
LeaderLib_Mods_RenameOldModID(_OldModID, _ModID);
//END_REGION

//REGION MOD_PROC_EVENTS_LUA
/* [OSITOOLS_ONLY]
// For mods using Lua
PROC
LeaderLib_Mods_OnModRegistered((GUIDSTRING)_UUID, (INTEGER)_Version, (INTEGER)_Major, (INTEGER)_Minor, (INTEGER)_Revision, (INTEGER)_Build)
THEN
NRD_LuaCall("LeaderUpdater_Ext_OnModRegistered", (STRING)_UUID, (STRING)_Version);

// For mods updating purely through Lua
PROC
LeaderLib_Mods_OnVersionChanged((GUIDSTRING)_UUID, (INTEGER)_LastVersion, (INTEGER)_NextVersion)
THEN
NRD_LuaCall("LeaderUpdater_Ext_OnModVersionChanged", (STRING)_UUID, (STRING)_LastVersion, (STRING)_NextVersion);
*/
//END_REGION

//REGION MOD_INFO_LOADING
/* [OSITOOLS_ONLY]
IF
GameModeStarted(_,_)
THEN
NRD_ModCall("LeaderLib", "LoadMods");

IF
SaveGameLoaded(_,_,_,_)
THEN
NRD_ModCall("LeaderLib", "LoadMods");
*/

// Called via LeaderLib_Ext_LoadMods 
PROC
LeaderLib_Mods_OnModLoaded((GUIDSTRING)_UUID, (STRING)_ModID, (STRING)_DisplayName, (STRING)_Author, (INTEGER)_Version, (INTEGER)_Major, (INTEGER)_Minor, (INTEGER)_Revision, (INTEGER)_Build)
AND
LeaderLib_Mods_QRY_ModUpdateNeeded(_UUID, _Version)
THEN
//LeaderLog_Log("DEBUG", "[LeaderLib_00_1_1_ModManager:OnModLoaded] Registering mod (",_DisplayName,") by (",_Author,").");
LeaderLib_Mods_Internal_Register(_UUID, _ModID, _DisplayName, _Author, _Version, _Major, _Minor, _Revision, _Build);
//END_REGION

/* New OsiTools automatic mod registration! */
//REGION QUERIES
QRY
LeaderLib_Mods_QRY_ModUpdateNeeded((GUIDSTRING)_UUID, (INTEGER)_Version)
AND
NOT DB_LeaderLib_Mods_Registered(_UUID, _, _, _, _Version, _, _, _, _)
THEN
DB_NOOP(1);

QRY
LeaderLib_Mods_QRY_ModUpdateNeeded((GUIDSTRING)_UUID, (INTEGER)_Version)
AND
DB_LeaderLib_Mods_Registered(_UUID, _ModID, _DisplayName, _LastAuthor, _LastVersion, _LastMajor, _LastMinor, _LastRevision, _LastBuild)
AND
_Version > _LastVersion
THEN
DB_NOOP(1);

QRY
LeaderLib_Mods_QRY_ModIsRegistered((STRING)_ModID, (STRING)_Author)
AND
DB_LeaderLib_Mods_Registered(_UUID, _ModID, _DisplayName, _Author, _Version, _Major, _Minor, _Revision, _Build)
AND
String(_UUID, _ModID)
THEN
DB_NOOP(1);

QRY
LeaderLib_Mods_QRY_ModIsRegistered((STRING)_ModID, (STRING)_Author)
AND
DB_LeaderUpdater_RegisteredUUID(_ModID, _Author, _UUID)
AND
DB_LeaderLib_Mods_Registered(_UUID, _AutoModID, _DisplayName, _, _Version, _Major, _Minor, _Revision, _Build)
AND
_ModID == _AutoModID
THEN
DB_NOOP(1);

/* [OSITOOLS_ONLY]
QRY
LeaderLib_Mods_QRY_ModIsRegisteredAndActive((GUIDSTRING)_UUID)
AND
DB_LeaderLib_Mods_Registered(_UUID, _ModID, _DisplayName, _Author, _Version, _Major, _Minor, _Revision, _Build)
AND
NRD_IsModLoaded(_UUID, 1)
THEN
DB_NOOP(1);
*/

// [BEGIN_NO_OSITOOLS]
QRY
LeaderLib_Mods_QRY_ModIsRegisteredAndActive((GUIDSTRING)_UUID)
AND
DB_LeaderLib_Mods_Registered(_UUID, _ModID, _DisplayName, _SavedAuthor, _Version, _Major, _Minor, _Revision, _Build)
AND
String(_UUID, _ModID)
AND
DB_Mods_ActiveGoal(_ModID, _Author, _GoalTitle)
AND
SysStatus(_GoalTitle, _Status)
THEN
DB_NOOP(1);
// [END_NO_OSITOOLS]
//END_REGION

//REGION MODISACTIVE
QRY
LeaderUpdater_QRY_ModIsActive((STRING)_ModID)
AND
DB_LeaderLib_Mods_Temp_ModIsActiveResolved(_ModID)
THEN
DB_NOOP(1);

QRY
LeaderUpdater_QRY_ModIsActive((STRING)_ModID, (STRING)_Author)
AND
DB_LeaderLib_Mods_Temp_ModIsActiveResolved(_ModID)
THEN
DB_NOOP(1);

QRY
LeaderUpdater_QRY_ModIsActive((STRING)_ModID, (STRING)_Author, (STRING)_GoalTitle)
AND
DB_LeaderLib_Mods_Temp_ModIsActiveResolved(_ModID)
THEN
DB_NOOP(1);

QRY
LeaderUpdater_QRY_ModIsActive((STRING)_ModID)
AND
NOT DB_LeaderLib_Mods_Temp_ModIsActiveResolved(_ModID)
AND
DB_Mods_ActiveGoal(_ModID, _Author, _GoalTitle)
AND
SysStatus(_GoalTitle, _Status)
THEN
DB_LeaderLib_Mods_Temp_ModIsActiveResolved(_ModID);

/* [OSITOOLS_ONLY]
QRY
LeaderUpdater_QRY_ModIsActive((STRING)_ModID)
AND
NOT DB_LeaderLib_Mods_Temp_ModIsActiveResolved(_ModID)
AND
DB_LeaderUpdater_RegisteredUUID(_ModID, _Author, _UUID)
AND
NRD_IsModLoaded(_UUID, 1)
THEN
DB_LeaderLib_Mods_Temp_ModIsActiveResolved(_ModID);

QRY
LeaderUpdater_QRY_ModIsActive((STRING)_ModID)
AND
NOT DB_LeaderLib_Mods_Temp_ModIsActiveResolved(_ModID)
AND
DB_LeaderLib_Mods_Registered(_UUID, _ModID, _DisplayName, _Author, _Version, _Major, _Minor, _Revision, _Build)
AND
NRD_IsModLoaded(_UUID, 1)
THEN
DB_LeaderLib_Mods_Temp_ModIsActiveResolved(_ModID);

// _UUID from _ModID
QRY
LeaderUpdater_QRY_ModIsActive((STRING)_ModID)
AND
NOT DB_LeaderLib_Mods_Temp_ModIsActiveResolved(_ModID)
AND
DB_LeaderLib_Mods_Registered(_UUID, _ModID, _DisplayName, _Author, _Version, _Major, _Minor, _Revision, _Build)
AND
NRD_IsModLoaded(_UUID, 1)
THEN
DB_LeaderLib_Mods_Temp_ModIsActiveResolved(_ModID);

// _ModID to _UUID
QRY
LeaderUpdater_QRY_ModIsActive((STRING)_ModID)
AND
NOT DB_LeaderLib_Mods_Temp_ModIsActiveResolved(_ModID)
AND
NRD_GuidString(_ModID, _UUID)
AND
DB_LeaderLib_Mods_Registered(_UUID, _ModID, _DisplayName, _Author, _Version, _Major, _Minor, _Revision, _Build)
AND
NRD_IsModLoaded(_UUID, 1)
THEN
DB_LeaderLib_Mods_Temp_ModIsActiveResolved(_ModID);

QRY
LeaderUpdater_QRY_ModIsActive((STRING)_ModID, (STRING)_Author)
AND
NOT DB_LeaderLib_Mods_Temp_ModIsActiveResolved(_ModID)
AND
DB_LeaderUpdater_RegisteredUUID(_ModID, _Author, _UUID)
AND
NRD_IsModLoaded(_UUID, 1)
THEN
DB_LeaderLib_Mods_Temp_ModIsActiveResolved(_ModID);

QRY
LeaderUpdater_QRY_ModIsActive((STRING)_ModID, (STRING)_Author)
AND
NOT DB_LeaderLib_Mods_Temp_ModIsActiveResolved(_ModID)
AND
DB_LeaderLib_Mods_Registered(_UUID, _ModID, _DisplayName, _Author, _Version, _Major, _Minor, _Revision, _Build)
AND
NRD_IsModLoaded(_UUID, 1)
THEN
DB_LeaderLib_Mods_Temp_ModIsActiveResolved(_ModID);
*/

QRY
LeaderUpdater_QRY_ModIsActive((STRING)_ModID, (STRING)_Author)
AND
NOT DB_LeaderLib_Mods_Temp_ModIsActiveResolved(_ModID)
AND
DB_Mods_ActiveGoal(_ModID, _Author, _GoalTitle)
AND
SysStatus(_GoalTitle, _Status)
THEN
DB_LeaderLib_Mods_Temp_ModIsActiveResolved(_ModID);

QRY
LeaderUpdater_QRY_ModIsActive((STRING)_ModID, (STRING)_Author)
AND
NOT DB_LeaderLib_Mods_Temp_ModIsActiveResolved(_ModID)
AND
LeaderUpdater_QRY_ModIsActive(_ModID)
THEN
DB_NOOP(1);

QRY
LeaderUpdater_QRY_ModIsActive((STRING)_ModID, (STRING)_Author, (STRING)_GoalTitle)
AND
NOT DB_LeaderLib_Mods_Temp_ModIsActiveResolved(_ModID)
AND
SysStatus(_GoalTitle, _)
THEN
DB_LeaderLib_Mods_Temp_ModIsActiveResolved(_ModID);

QRY
LeaderUpdater_QRY_ModIsActive((STRING)_ModID, (STRING)_Author, (STRING)_GoalTitle)
AND
NOT DB_LeaderLib_Mods_Temp_ModIsActiveResolved(_ModID)
AND
LeaderUpdater_QRY_ModIsActive(_ModID)
THEN
DB_NOOP(1);
//END_REGION

//REGION MODISACTIVE_BY_UUID
QRY
LeaderUpdater_QRY_ModIsActive_ByUUID((GUIDSTRING)_UUID)
AND
DB_LeaderLib_Mods_Temp_ModIsActiveUUIDResolved(_UUID)
THEN
DB_NOOP(1);

/* [OSITOOLS_ONLY]
QRY
LeaderUpdater_QRY_ModIsActive_ByUUID((GUIDSTRING)_UUID)
AND
NOT DB_LeaderLib_Mods_Temp_ModIsActiveUUIDResolved(_UUID)
AND
DB_LeaderLib_Mods_Registered(_UUID, _ModID, _DisplayName, _Author, _Version, _Major, _Minor, _Revision, _Build)
AND
NRD_IsModLoaded(_UUID, 1)
THEN
DB_LeaderLib_Mods_Temp_ModIsActiveUUIDResolved(_UUID);

QRY
LeaderUpdater_QRY_ModIsActive_ByUUID((GUIDSTRING)_UUID)
AND
NOT DB_LeaderLib_Mods_Temp_ModIsActiveUUIDResolved(_UUID)
AND
DB_LeaderUpdater_RegisteredUUID(_ModID, _Author, _UUID)
AND
NRD_IsModLoaded(_UUID, 1)
THEN
DB_LeaderLib_Mods_Temp_ModIsActiveUUIDResolved(_UUID);
*/

// [BEGIN_NO_OSITOOLS]
QRY
LeaderUpdater_QRY_ModIsActive_ByUUID((GUIDSTRING)_UUID)
AND
NOT DB_LeaderLib_Mods_Temp_ModIsActiveUUIDResolved(_UUID)
AND
DB_LeaderUpdater_RegisteredUUID(_ModID, _Author, _UUID)
AND
LeaderUpdater_QRY_ModIsActive(_ModID, _Author)
THEN
DB_LeaderLib_Mods_Temp_ModIsActiveUUIDResolved(_UUID);
// [END_NO_OSITOOLS]
//END_REGION

//REGION ACTIVE_FLAG
/* [OSITOOLS_ONLY]
IF
TimerFinished("Timers_LeaderLib_CheckActiveMods")
AND
DB_LeaderLib_Mods_Registered(_UUID, _ModID, _DisplayName, _Author, _Version, _Major, _Minor, _Revision, _Build)
THEN
NRD_ModCall("LeaderLib", "SetModIsActiveFlag", (STRING)_UUID, _ModID);
*/

PROC
LeaderUpdater_SetModActiveFlag((STRING)_ModID, (STRING)_Author, (STRING)_Flag, 0)
AND
LeaderUpdater_QRY_ModIsActive(_ModID)
THEN
LeaderLog_Log("DEBUG", "[LeaderUpdater:SetModActiveFlag] Mod [",_ModID,"] by [",_Author,"] is active. Setting global flag [",_Flag,"].");
GlobalSetFlag(_Flag);

PROC
LeaderUpdater_SetModActiveFlag((STRING)_ModID, (STRING)_Author, (STRING)_Flag, 1)
AND
NOT LeaderUpdater_QRY_ModIsActive(_ModID)
THEN
LeaderLog_Log("DEBUG", "[LeaderUpdater:SetModActiveFlag] Mod [",_ModID,"] by [",_Author,"] is no longer active. Clearing global flag [",_Flag,"].");
GlobalClearFlag(_Flag);
//END_REGION

//REGION ACTIVE_FLAG_OLD_DATABASES
IF
TimerFinished("Timers_LeaderLib_CheckActiveMods")
AND
DB_Mods_Registered(_ModID, _Author, _Version)
AND
NOT LeaderLib_Mods_QRY_ModIsRegistered(_ModID, _Author)
AND
StringConcatenate(_ModID, "_IsActive", _Flag)
AND
GlobalGetFlag(_Flag, _FlagEnabled)
THEN
LeaderUpdater_SetModActiveFlag(_ModID, _Author, _Flag, _FlagEnabled);

IF
TimerFinished("Timers_LeaderLib_CheckActiveMods")
AND
DB_Mods_ActiveGoal(_ModID, _Author, _GoalTitle)
AND
NOT DB_Mods_Registered(_ModID, _Author, _)
AND
NOT LeaderLib_Mods_QRY_ModIsRegistered(_ModID, _Author)
AND
StringConcatenate(_ModID, "_IsActive", _Flag)
AND
GlobalGetFlag(_Flag, _FlagEnabled)
THEN
LeaderUpdater_SetModActiveFlag(_ModID, _Author, _Flag, _FlagEnabled);

IF
TimerFinished("Timers_LeaderLib_CheckActiveMods")
AND
DB_LeaderUpdater_RegisteredUUID(_ModID, _Author, _UUID)
AND
NOT DB_Mods_ActiveGoal(_ModID, _Author, _)
AND
NOT DB_Mods_Registered(_ModID, _Author, _)
AND
NOT LeaderLib_Mods_QRY_ModIsRegistered(_ModID, _Author)
AND
StringConcatenate(_ModID, "_IsActive", _Flag)
AND
GlobalGetFlag(_Flag, _FlagEnabled)
THEN
LeaderUpdater_SetModActiveFlag(_ModID, _Author, _Flag, _FlagEnabled);
//END_REGION

//REGION SAVE_LOADING_RESETVARS
IF
SavegameLoaded(_,_,_,_)
THEN
SysClear("DB_LeaderLib_Mods_Temp_ModIsActiveResolved", 1);
SysClear("DB_LeaderLib_Mods_Temp_ModIsActiveUUIDResolved", 1);
//END_REGION

//REGION UPDATES

//END_REGION
EXITSECTION
ENDEXITSECTION
ParentTargetEdge "LaughingLeader__LeaderLib"