Version 1
SubGoalCombiner SGC_AND
INITSECTION
//DB_LeaderLib_Codex(_Index, _Char)
//DB_LeaderLib_Codex_Iterator(_Index, _IndexStr)
/*STRING_COMPARISON*/
//DB_LeaderLib_StringLength(_Str, _Length)
//DB_LeaderLib_StringCompare_Results(_Str1, _Str2, _Val)
/*STRING_COMPARISON_INTERNAL*/
//DB_LeaderLib_StringExt_Temp_CompareIterator(_SessionID, _Str1, _Str2, _Index)
//DB_LeaderLib_StringExt_Temp_StringCompare_Results(_SessionID, _Str1, _Str2, _ComparisonVal)
//DB_LeaderLib_StringExt_Temp_StringCompare_StopIteration(_SessionID, _Str1, _Str2)
/*ITERATOR*/
//DB_LeaderLib_StringExt_Temp_IteratorBuilder(_Str1, _CurrentIndex)
//DB_LeaderLib_StringExt_StringIterator(_Str, _Index)
/*VERSION STRINGS*/
//Comparison "Cache"
//DB_LeaderLib_StringExt_VersionIsLessThan(_Version, _OtherMajor, _OtherMinor, _OtherRevision, _OtherBuild)
//DB_LeaderLib_StringExt_Temp_Version_String(_Str, _Major, _Minor, _Revision, _Build)
//DB_LeaderLib_StringExt_Temp_Version_Index(_Str, _MajorIndex, _MinorIndex, _RevisionIndex, _BuildIndex)
//DB_LeaderLib_StringExt_Temp_Version_FoundPeriod(_Str, _TotalFound)
//DB_LeaderLib_StringExt_Temp_Version_Complete(_Str)
KBSECTION
//REGION STRING_COMPARE_HELPERS
QRY
LeaderLib_StringExt_Internal_CompareStrings_QRY_EndReached((STRING)_SessionID, (STRING)_Str1, (STRING)_Str2, (INTEGER)_Index)
AND
DB_LeaderLib_StringLength(_Str1, _Str1Length)
AND
_Index >= _Str1Length
THEN
DB_NOOP(1);

QRY
LeaderLib_StringExt_Internal_CompareStrings_QRY_EndReached((STRING)_SessionID, (STRING)_Str1, (STRING)_Str2, (INTEGER)_Index)
AND
DB_LeaderLib_StringLength(_Str2, _Str2Length)
AND
_Index >= _Str2Length
THEN
DB_NOOP(1);

PROC
LeaderLib_StringExt_Internal_CompareStrings_SetCompareValue((STRING)_SessionID, (STRING)_Str1, (STRING)_Str2, (INTEGER)_Val)
AND
_Val > 0
THEN
DB_LeaderLib_StringExt_Temp_StringCompare_Results(_SessionID, _Str1, _Str2, 1);

PROC
LeaderLib_StringExt_Internal_CompareStrings_SetCompareValue((STRING)_SessionID, (STRING)_Str1, (STRING)_Str2, (INTEGER)_Val)
AND
_Val < 0
THEN
DB_LeaderLib_StringExt_Temp_StringCompare_Results(_SessionID, _Str1, _Str2, -1);

PROC
LeaderLib_StringExt_Internal_CompareStrings_SetCompareValue((STRING)_SessionID, (STRING)_Str1, (STRING)_Str2, (INTEGER)_Val)
AND
_Val == 0
THEN
DB_LeaderLib_StringExt_Temp_StringCompare_Results(_SessionID, _Str1, _Str2, 0);

QRY
LeaderLib_StringExt_CompareStrings_QRY_HasResult((STRING)_Str1, (STRING)_Str2)
AND
DB_LeaderLib_StringCompare_Results(_Str1, _Str2, _Val)
THEN
DB_NOOP(1);

QRY
LeaderLib_StringExt_CompareStrings_QRY_HasResult((STRING)_Str1, (STRING)_Str2)
AND
DB_LeaderLib_StringCompare_Results(_Str2, _Str1, _Val)
THEN
DB_NOOP(1);
//END_REGION

//REGION STRING_COMPARE
QRY
LeaderLib_StringExt_QRY_CompareStrings((STRING)_SessionID, (STRING)_Str1, (STRING)_Str2)
THEN
LeaderLib_StringExt_CompareStrings(_SessionID, _Str1, _Str2);

// All these rules reduced to essentially 2 lines. ;)
/* [OSITOOLS_ONLY]
PROC
LeaderLib_StringExt_CompareStrings((STRING)_SessionID, (STRING)_Str1, (STRING)_Str2)
AND
NRD_StringCompare(_Str1, _Str2, _Result)
THEN
DB_LeaderLib_StringCompare_Results(_Str1, _Str2, _Result);
*/

PROC
LeaderLib_StringExt_CompareStrings((STRING)_SessionID, (STRING)_Str1, (STRING)_Str2)
AND
NOT LeaderLib_QRY_ExtenderIsActive()
AND
LeaderLib_StringExt_CompareStrings_Internal_QRY_SkipCompareIfEqual(_Str1, _Str2)
AND
NOT LeaderLib_StringExt_CompareStrings_QRY_HasResult(_Str1, _Str2)
THEN
LeaderLib_StringExt_Internal_StartCompareStrings(_SessionID, _Str1, _Str2);

QRY
LeaderLib_StringExt_CompareStrings_Internal_QRY_SkipCompareIfEqual((STRING)_Str1, (STRING)_Str2)
AND
NOT LeaderLib_StringExt_CompareStrings_QRY_HasResult(_Str1, _Str2)
AND
_Str1 == _Str2
THEN
DB_LeaderLib_StringCompare_Results(_Str1, _Str2, 0);

QRY
LeaderLib_StringExt_CompareStrings_Internal_QRY_SkipCompareIfEqual((STRING)_Str1, (STRING)_Str2)
THEN
DB_NOOP(1);

PROC
LeaderLib_StringExt_Internal_StartCompareStrings((STRING)_SessionID, (STRING)_Str1, (STRING)_Str2)
AND
NOT DB_LeaderLib_StringLength(_Str1, _)
THEN
LeaderLib_StringExt_DetermineStringLength(_Str1);

PROC
LeaderLib_StringExt_Internal_StartCompareStrings((STRING)_SessionID, (STRING)_Str1, (STRING)_Str2)
AND
NOT DB_LeaderLib_StringLength(_Str2, _)
THEN
LeaderLib_StringExt_DetermineStringLength(_Str2);

PROC
LeaderLib_StringExt_Internal_StartCompareStrings((STRING)_SessionID, (STRING)_Str1, (STRING)_Str2)
AND
DB_LeaderLib_StringExt_Temp_StringCompare_StopIteration(_SessionID, _Str1, _Str2)
THEN
NOT DB_LeaderLib_StringExt_Temp_StringCompare_StopIteration(_SessionID, _Str1, _Str2);

PROC
LeaderLib_StringExt_Internal_StartCompareStrings((STRING)_SessionID, (STRING)_Str1, (STRING)_Str2)
THEN
DB_LeaderLib_StringExt_Temp_StringCompare_Results(_SessionID, _Str1, _Str2, 0);
DB_LeaderLib_StringExt_Temp_CompareIterator(_SessionID, _Str1, _Str2, 0);
LeaderLib_StringExt_Internal_CompareStrings(_SessionID, _Str1, _Str2);

PROC
LeaderLib_StringExt_Internal_CompareStrings((STRING)_SessionID, (STRING)_Str1, (STRING)_Str2)
AND
NOT DB_LeaderLib_StringExt_Temp_StringCompare_StopIteration(_SessionID, _Str1, _Str2)
AND
DB_LeaderLib_StringExt_Temp_CompareIterator(_SessionID, _Str1, _Str2, _Index)
AND
StringSub(_Str1, _Index, 1, _Char1)
AND
StringSub(_Str2, _Index, 1, _Char2)
AND
DB_LeaderLib_Codex(_C1, _Char1)
AND
DB_LeaderLib_Codex(_C2, _Char2)
AND
IntegerSubtract(_C1, _C2, _Comparison)
AND
_Comparison != 0
AND
DB_LeaderLib_StringExt_Temp_StringCompare_Results(_SessionID, _Str1, _Str2, _PastVal)
THEN
NOT DB_LeaderLib_StringExt_Temp_StringCompare_Results(_SessionID, _Str1, _Str2, _PastVal);
LeaderLib_StringExt_Internal_CompareStrings_SetCompareValue(_SessionID, _Str1, _Str2, _Comparison);
LeaderLib_StringExt_Internal_CompareStrings_ReturnCompareValue(_SessionID, _Str1, _Str2);
DB_LeaderLib_StringExt_Temp_StringCompare_StopIteration(_SessionID, _Str1, _Str2);

PROC
LeaderLib_StringExt_Internal_CompareStrings((STRING)_SessionID, (STRING)_Str1, (STRING)_Str2)
AND
NOT DB_LeaderLib_StringExt_Temp_StringCompare_StopIteration(_SessionID, _Str1, _Str2)
AND
DB_LeaderLib_StringExt_Temp_CompareIterator(_SessionID, _Str1, _Str2, _Index)
AND
NOT LeaderLib_StringExt_Internal_CompareStrings_QRY_EndReached(_SessionID, _Str1, _Str2, _Index)
AND
IntegerSum(_Index, 1, _NextIndex)
THEN
NOT DB_LeaderLib_StringExt_Temp_CompareIterator(_SessionID, _Str1, _Str2, _Index);
DB_LeaderLib_StringExt_Temp_CompareIterator(_SessionID, _Str1, _Str2, _NextIndex);
LeaderLib_StringExt_Internal_CompareStrings(_SessionID, _Str1, _Str2);

PROC
LeaderLib_StringExt_Internal_CompareStrings((STRING)_SessionID, (STRING)_Str1, (STRING)_Str2)
AND
NOT DB_LeaderLib_StringExt_Temp_StringCompare_StopIteration(_SessionID, _Str1, _Str2)
AND
DB_LeaderLib_StringExt_Temp_CompareIterator(_SessionID, _Str1, _Str2, _Index)
AND
LeaderLib_StringExt_Internal_CompareStrings_QRY_EndReached(_SessionID, _Str1, _Str2, _Index)
THEN
LeaderLib_StringExt_Internal_CompareStrings_ReturnFinalValue(_SessionID, _Str1, _Str2);

PROC
LeaderLib_StringExt_Internal_CompareStrings_ReturnFinalValue((STRING)_SessionID, (STRING)_Str1, (STRING)_Str2)
AND
NOT LeaderLib_StringExt_CompareStrings_QRY_HasResult(_Str1, _Str2)
AND
DB_LeaderLib_StringLength(_Str1, _Str1Length)
AND
DB_LeaderLib_StringLength(_Str2, _Str2Length)
AND
_Str1Length > _Str2Length
AND
DB_LeaderLib_StringExt_Temp_StringCompare_Results(_SessionID, _Str1, _Str2, _PastVal)
THEN
NOT DB_LeaderLib_StringExt_Temp_StringCompare_Results(_SessionID, _Str1, _Str2, _PastVal);
DB_LeaderLib_StringCompare_Results(_Str1, _Str2, 1);

PROC
LeaderLib_StringExt_Internal_CompareStrings_ReturnFinalValue((STRING)_SessionID, (STRING)_Str1, (STRING)_Str2)
AND
NOT LeaderLib_StringExt_CompareStrings_QRY_HasResult(_Str1, _Str2)
AND
DB_LeaderLib_StringLength(_Str1, _Str1Length)
AND
DB_LeaderLib_StringLength(_Str2, _Str2Length)
AND
_Str1Length < _Str2Length
AND
DB_LeaderLib_StringExt_Temp_StringCompare_Results(_SessionID, _Str1, _Str2, _PastVal)
THEN
NOT DB_LeaderLib_StringExt_Temp_StringCompare_Results(_SessionID, _Str1, _Str2, _PastVal);
DB_LeaderLib_StringCompare_Results(_Str1, _Str2, -1);

PROC
LeaderLib_StringExt_Internal_CompareStrings_ReturnFinalValue((STRING)_SessionID, (STRING)_Str1, (STRING)_Str2)
AND
NOT LeaderLib_StringExt_CompareStrings_QRY_HasResult(_Str1, _Str2)
AND
DB_LeaderLib_StringExt_Temp_StringCompare_Results(_SessionID, _Str1, _Str2, _PastVal)
THEN
NOT DB_LeaderLib_StringExt_Temp_StringCompare_Results(_SessionID, _Str1, _Str2, _PastVal);
DB_LeaderLib_StringCompare_Results(_Str1, _Str2, 0);

PROC
LeaderLib_StringExt_Internal_CompareStrings_ReturnCompareValue((STRING)_SessionID, (STRING)_Str1, (STRING)_Str2)
AND
NOT LeaderLib_StringExt_CompareStrings_QRY_HasResult(_Str1, _Str2)
AND
DB_LeaderLib_StringExt_Temp_StringCompare_Results(_SessionID, _Str1, _Str2, _Val)
THEN
NOT DB_LeaderLib_StringExt_Temp_StringCompare_Results(_SessionID, _Str1, _Str2, _Val);
DB_LeaderLib_StringCompare_Results(_Str1, _Str2, _Val);

IF
DB_LeaderLib_StringCompare_Results(_Str1, _Str2, _Val)
THEN
LeaderLib_StringExt_Internal_AddReverseResult(_Str1, _Str2, _Val);

PROC
LeaderLib_StringExt_Internal_AddReverseResult((STRING)_Str1, (STRING)_Str2, (INTEGER)_Val)
AND
NOT DB_LeaderLib_StringCompare_Results(_Str2, _Str1, _)
AND
IntegerProduct(_Val, -1, _OtherVal)
THEN
DB_LeaderLib_StringCompare_Results(_Str2, _Str1, _OtherVal);
//END_REGION

//REGION STRING_LENGTH
QRY
LeaderLib_StringExt_QRY_GetStringLength((STRING)_Str)
THEN
LeaderLib_StringExt_DetermineStringLength(_Str);

PROC
LeaderLib_StringExt_DetermineStringLength((STRING)_Str)
AND
NOT DB_LeaderLib_StringLength(_Str, _)
THEN
DB_LeaderLib_StringLength(_Str, 0);
LeaderLib_StringExt_Internal_DetermineStringLength(_Str);

PROC
LeaderLib_StringExt_Internal_DetermineStringLength((STRING)_Str)
AND
DB_LeaderLib_Codex_Iterator(_Index, _)
AND
StringSub(_Str, _Index, 1, _Char)
AND
DB_LeaderLib_Codex(_, _Char)
AND
DB_LeaderLib_StringLength(_Str, _Length)
AND
IntegerSum(_Length, 1, _NextLength)
THEN
NOT DB_LeaderLib_StringLength(_Str, _Length);
DB_LeaderLib_StringLength(_Str, _NextLength);

/*
PROC
LeaderLib_StringExt_DetermineStringLength((STRING)_Str)
AND
DB_LeaderLib_StringLength(_Str, _Length)
AND
IntegertoString(_Length, _LengthStr)
THEN
LeaderLog_Log("DEBUG", "[LeaderLib:Sorter:DetermineStringLength] Length of '",_Str,"' is [",_LengthStr,"].");
*/
//END_REGION

//REGION STRING_ITERATOR
QRY
LeaderLib_StringExt_QRY_BuildIteratorByLength((STRING)_Str)
THEN
LeaderLib_StringExt_BuildIteratorByLength(_Str);

PROC
LeaderLib_StringExt_BuildIteratorByLength((STRING)_Str)
AND
NOT DB_LeaderLib_StringExt_StringIterator(_Str, _)
AND
NOT DB_LeaderLib_StringLength(_Str, _)
THEN
LeaderLib_StringExt_DetermineStringLength(_Str);

PROC
LeaderLib_StringExt_BuildIteratorByLength((STRING)_Str)
AND
NOT DB_LeaderLib_StringExt_StringIterator(_Str, _)
AND
DB_LeaderLib_StringLength(_Str, _Length)
THEN
DB_LeaderLib_StringExt_Temp_IteratorBuilder(_Str, 0);
LeaderLib_StringExt_Internal_BuildIterator(_Str);

PROC
LeaderLib_StringExt_Internal_BuildIterator((STRING)_Str)
AND
DB_LeaderLib_StringExt_Temp_IteratorBuilder(_Str, _CurrentIndex)
AND
DB_LeaderLib_StringLength(_Str, _Length)
AND
_CurrentIndex <= _Length
AND
IntegerSum(_CurrentIndex, 1, _NextIndex)
THEN
DB_LeaderLib_StringExt_StringIterator(_Str, _CurrentIndex);
NOT DB_LeaderLib_StringExt_Temp_IteratorBuilder(_Str, _CurrentIndex);
DB_LeaderLib_StringExt_Temp_IteratorBuilder(_Str, _NextIndex);
LeaderLib_StringExt_Internal_BuildIterator(_Str);
//END_REGION

//REGION VERSION_STRING_PARSING
QRY
LeaderLib_StringExt_QRY_IsVersionString((STRING)_Str)
AND
StringContains(_Str, ".", 1)
AND
LeaderLib_StringExt_QRY_ProcessVersionString(_Str)
AND
LeaderLib_StringExt_QRY_IsValidVersionString(_Str)
THEN
LeaderLog_Log("DEBUG", "[LeaderLib:StringExt:IsVersionString] [",_Str,"] is a valid version string.");

PROC
LeaderLib_StringExt_Debug_PrintVersionString((STRING)_Str)
AND
DB_LeaderLib_StringExt_Temp_Version_String(_Str, _Major, _Minor, _Revision, _Build)
THEN
LeaderLog_Log("DEBUG", "[LeaderLib:StringExt:Debug_PrintVersionString] [",_Str,"] = Major[",_Major,"] Minor[",_Minor,"] Revision[",_Revision,"] Build[",_Build,"]");

PROC
LeaderLib_StringExt_Debug_PrintVersionString((STRING)_Str)
AND
NOT DB_LeaderLib_StringExt_Temp_Version_String(_Str, _, _, _, _)
THEN
LeaderLog_Log("DEBUG", "[LeaderLib:StringExt:Debug_PrintVersionString] [",_Str,"] is not a valid version string.");

QRY
LeaderLib_StringExt_QRY_IsValidVersionString((STRING)_Str)
AND
DB_LeaderLib_StringExt_Temp_Version_String(_Str, _Major, _Minor, _Revision, _Build)
AND
_Major != ""
AND
_Minor != ""
AND
_Revision != ""
AND
_Build != ""
THEN
DB_NOOP(1);

QRY
LeaderLib_StringExt_QRY_ProcessVersionString((STRING)_Str)
THEN
LeaderLib_StringExt_ProcessVersionString(_Str);

PROC
LeaderLib_StringExt_ProcessVersionString((STRING)_Str)
AND
NOT DB_LeaderLib_StringExt_Temp_Version_String(_Str, _, _, _, _)
AND
NOT LeaderLib_QRY_ExtenderIsActive()
THEN
LeaderLib_StringExt_BuildIteratorByLength(_Str);
LeaderLib_StringExt_ClearPreviousVersionData(_Str);
DB_LeaderLib_StringExt_Temp_Version_FoundPeriod(_Str, 0);
LeaderLib_StringExt_Internal_ProcessVersionString(_Str);

/* [OSITOOLS_ONLY]
PROC
LeaderLib_StringExt_ProcessVersionString((STRING)_Str)
AND
NOT DB_LeaderLib_StringExt_Temp_Version_String(_Str, _, _, _, _)
AND
LeaderLib_QRY_ExtenderIsActive()
AND
NRD_StringLength(_Str, _Length)
THEN
DB_LeaderLib_StringLength(_Str, _Length);
LeaderLib_StringExt_BuildIteratorByLength(_Str);
LeaderLib_StringExt_ClearPreviousVersionData(_Str);
DB_LeaderLib_StringExt_Temp_Version_FoundPeriod(_Str, 0);
LeaderLib_StringExt_Internal_ProcessVersionString(_Str);
*/

PROC
LeaderLib_StringExt_Internal_ProcessVersionString((STRING)_Str)
AND
DB_LeaderLib_StringExt_StringIterator(_Str, _Index)
AND
NOT DB_LeaderLib_StringExt_Temp_Version_Complete(_Str)
THEN
LeaderLib_StringExt_Internal_Version_OnIteratingVersionString(_Str, _Index);

PROC
LeaderLib_StringExt_Internal_Version_OnIteratingVersionString((STRING)_Str, (INTEGER)_Index)
AND
_Index > 0
AND
StringSub(_Str, _Index, 1, ".")
THEN
LeaderLib_StringExt_Internal_Version_FoundPeriod(_Str, _Index);

PROC
LeaderLib_StringExt_Internal_Version_FoundPeriod((STRING)_Str, (INTEGER)_Index)
AND
DB_LeaderLib_StringExt_Temp_Version_FoundPeriod(_Str, _TotalFound)
AND
_TotalFound < 3
AND
IntegerSum(_TotalFound, 1, _NextAmount)
THEN
NOT DB_LeaderLib_StringExt_Temp_Version_FoundPeriod(_Str, _TotalFound);
DB_LeaderLib_StringExt_Temp_Version_FoundPeriod(_Str, _NextAmount);

PROC
LeaderLib_StringExt_Internal_Version_FoundPeriod((STRING)_Str, (INTEGER)_Index)
AND
DB_LeaderLib_StringExt_Temp_Version_FoundPeriod(_Str, _TotalFound)
AND
_TotalFound == 1
AND
StringSub(_Str, 0, _Index, _Major)
AND
IntegertoString(_Index, _IndexStr)
THEN
LeaderLog_Log("TRACE", "[LeaderLib:StringExt:Version_FoundPeriod] Setting _MajorIndex to [",_IndexStr,"].");
DB_LeaderLib_StringExt_Temp_Version_String(_Str, _Major, "", "", "");
DB_LeaderLib_StringExt_Temp_Version_Index(_Str, _Index, -1, -1, -1);

PROC
LeaderLib_StringExt_Internal_Version_FoundPeriod((STRING)_Str, (INTEGER)_Index)
AND
DB_LeaderLib_StringExt_Temp_Version_FoundPeriod(_Str, _TotalFound)
AND
_TotalFound == 2
AND
DB_LeaderLib_StringExt_Temp_Version_String(_Str, _Major, _PastMinor, _Revision, _Build)
AND
DB_LeaderLib_StringExt_Temp_Version_Index(_Str, _MajorIndex, _MinorIndex, _RevisionIndex, _BuildIndex)
AND
IntegerSum(_MajorIndex, 1, _MinorStartIndex)
AND
IntegerSubtract(_Index, 1, _LastCharIndex)
AND
IntegerSubtract(_LastCharIndex, _MajorIndex, _Count)
AND
StringSub(_Str, _MinorStartIndex, _Count, _Minor)
AND
IntegertoString(_Index, _IndexStr)
THEN
LeaderLog_Log("TRACE", "[LeaderLib:StringExt:Version_FoundPeriod] Setting _MinorIndex to [",_IndexStr,"].");
NOT DB_LeaderLib_StringExt_Temp_Version_String(_Str, _Major, _PastMinor, _Revision, _Build);
NOT DB_LeaderLib_StringExt_Temp_Version_Index(_Str, _MajorIndex, _MinorIndex, _RevisionIndex, _BuildIndex);
DB_LeaderLib_StringExt_Temp_Version_String(_Str, _Major, _Minor, _Revision, _Build);
DB_LeaderLib_StringExt_Temp_Version_Index(_Str, _MajorIndex, _Index, _RevisionIndex, _BuildIndex);

PROC
LeaderLib_StringExt_Internal_Version_FoundPeriod((STRING)_Str, (INTEGER)_Index)
AND
DB_LeaderLib_StringExt_Temp_Version_FoundPeriod(_Str, _TotalFound)
AND
_TotalFound == 3
AND
DB_LeaderLib_StringExt_Temp_Version_String(_Str, _Major, _Minor, _PastRevision, _Build)
AND
DB_LeaderLib_StringExt_Temp_Version_Index(_Str, _MajorIndex, _MinorIndex, _RevisionIndex, _BuildIndex)
AND
IntegerSum(_MinorIndex, 1, _RevStartIndex)
AND
IntegerSubtract(_Index, 1, _LastCharIndex)
AND
IntegerSubtract(_LastCharIndex, _MinorIndex, _Count)
AND
StringSub(_Str, _RevStartIndex, _Count, _Revision)
AND
IntegertoString(_Index, _IndexStr)
THEN
LeaderLog_Log("TRACE", "[LeaderLib:StringExt:Version_FoundPeriod] Setting _RevisionIndex to [",_IndexStr,"].");
NOT DB_LeaderLib_StringExt_Temp_Version_String(_Str, _Major, _Minor, _PastRevision, _Build);
NOT DB_LeaderLib_StringExt_Temp_Version_Index(_Str, _MajorIndex, _MinorIndex, _RevisionIndex, _BuildIndex);
DB_LeaderLib_StringExt_Temp_Version_String(_Str, _Major, _Minor, _Revision, _Build);
DB_LeaderLib_StringExt_Temp_Version_Index(_Str, _MajorIndex, _MinorIndex, _Index, _BuildIndex);

PROC
LeaderLib_StringExt_Internal_Version_FoundPeriod((STRING)_Str, (INTEGER)_Index)
AND
DB_LeaderLib_StringExt_Temp_Version_FoundPeriod(_Str, _TotalFound)
AND
_TotalFound >= 3
THEN
LeaderLib_StringExt_Internal_Version_GetBuild(_Str, _Index);

PROC
LeaderLib_StringExt_Internal_Version_GetBuild((STRING)_Str, (INTEGER)_Index)
AND
DB_LeaderLib_StringLength(_Str, _Length)
AND
DB_LeaderLib_StringExt_Temp_Version_String(_Str, _Major, _Minor, _Revision, _PastBuild)
AND
DB_LeaderLib_StringExt_Temp_Version_Index(_Str, _MajorIndex, _MinorIndex, _RevisionIndex, _BuildIndex)
AND
IntegerSum(_RevisionIndex, 1, _BuildStartIndex)
AND
IntegerSubtract(_Length, _BuildStartIndex, _Count)
AND
StringSub(_Str, _BuildStartIndex, _Count, _Build)
AND
IntegertoString(_BuildStartIndex, _IndexStr)
AND
IntegertoString(_Count, _CountStr)
THEN
LeaderLog_Log("TRACE", "[LeaderLib:StringExt:Version_GetBuild] Setting _BuildIndex to [",_IndexStr,"] with a count of [",_CountStr,"].");
NOT DB_LeaderLib_StringExt_Temp_Version_String(_Str, _Major, _Minor, _Revision, _PastBuild);
NOT DB_LeaderLib_StringExt_Temp_Version_Index(_Str, _MajorIndex, _MinorIndex, _RevisionIndex, _BuildIndex);
DB_LeaderLib_StringExt_Temp_Version_String(_Str, _Major, _Minor, _Revision, _Build);
DB_LeaderLib_StringExt_Temp_Version_Index(_Str, _MajorIndex, _MinorIndex, _RevisionIndex, _Length);
DB_LeaderLib_StringExt_Temp_Version_Complete(_Str);

/*
Keep this so we don't have to repeat the same process
PROC
LeaderLib_StringExt_ClearPreviousVersionData((STRING)_Str)
AND
DB_LeaderLib_StringExt_Temp_Version_String(_Str, _Major, _Minor, _Revision, _Build)
THEN
NOT DB_LeaderLib_StringExt_Temp_Version_String(_Str, _Major, _Minor, _Revision, _Build);
*/

PROC
LeaderLib_StringExt_ClearPreviousVersionData((STRING)_Str)
AND
DB_LeaderLib_StringExt_Temp_Version_Index(_Str, _MajorIndex, _MinorIndex, _RevisionIndex, _BuildIndex)
THEN
NOT DB_LeaderLib_StringExt_Temp_Version_Index(_Str, _MajorIndex, _MinorIndex, _RevisionIndex, _BuildIndex);

PROC
LeaderLib_StringExt_ClearPreviousVersionData((STRING)_Str)
AND
DB_LeaderLib_StringExt_Temp_Version_FoundPeriod(_Str, _TotalFound)
THEN
NOT DB_LeaderLib_StringExt_Temp_Version_FoundPeriod(_Str, _TotalFound);

PROC
LeaderLib_StringExt_ClearPreviousVersionData((STRING)_Str)
AND
DB_LeaderLib_StringExt_Temp_Version_Complete(_Str)
THEN
NOT DB_LeaderLib_StringExt_Temp_Version_Complete(_Str);
//END_REGION

//REGION VERSION_COMPARISON
PROC
LeaderUpdater_ModUpdated("LeaderLib", "LaughingLeader", (STRING)_PastVersion, (STRING)_NewVersion)
AND
LeaderLib_StringExt_QRY_VersionIsLessThan(_PastVersion, 1,4,1,0)
THEN
LeaderLib_StringExt_Internal_ClearCache_Lazy(0);

PROC
LeaderLib_StringExt_Internal_ClearCache_Lazy((INTEGER)_MaxCount)
THEN
LeaderLib_StringExt_Internal_ClearCache_Lazy(_MaxCount, 0);

PROC
LeaderLib_StringExt_Internal_ClearCache_Lazy((INTEGER)_MaxCount, 0)
AND
SysCount("DB_LeaderLib_StringExt_VersionIsLessThan", 5, _Count)
AND
_Count > _MaxCount
THEN
SysClear("DB_LeaderLib_StringExt_VersionIsLessThan", 5);
LeaderLog_LogInt("DEBUG", "[LeaderLib:StringExt:ClearCache_Lazy] Cleared [DB_LeaderLib_StringExt_VersionIsLessThan]. Entry Count: [",_Count,"]/[",_MaxCount,"].");

PROC
LeaderLib_StringExt_Internal_ClearCache_Lazy((INTEGER)_MaxCount, 1)
AND
SysCount("DB_LeaderLib_StringExt_VersionToInt", 5, _Count)
AND
_Count > _MaxCount
THEN
SysClear("DB_LeaderLib_StringExt_VersionToInt", 5);
LeaderLog_LogInt("DEBUG", "[LeaderLib:StringExt:ClearCache_Lazy] Cleared [DB_LeaderLib_StringExt_VersionToInt]. Entry Count: [",_Count,"]/[",_MaxCount,"].");

QRY
LeaderLib_StringExt_Internal_QRY_VersionSupported((INTEGER)_Major, (INTEGER)_Minor, (INTEGER)_Revision, (INTEGER)_Build)
AND
_Major >= 0
AND
_Major <= 256
AND
_Minor >= 0
AND
_Minor <= 256
AND
_Revision >= 0
AND
_Revision <= 256
AND
_Build >= 0
AND
_Build <= 256
THEN
DB_NOOP(1);

//DB_LeaderLib_StringExt_VersionIsLessThan should hopefully be "cached" by not clearing the DB.
QRY
LeaderLib_StringExt_QRY_VersionIsLessThan((STRING)_Version, (INTEGER)_OtherMajor, (INTEGER)_OtherMinor, (INTEGER)_OtherRevision, (INTEGER)_OtherBuild)
AND
DB_LeaderLib_StringExt_VersionIsLessThan(_Version, _OtherMajor, _OtherMinor, _OtherRevision, _OtherBuild)
THEN
DB_NOOP(1);

// No numbers over 256!
QRY
LeaderLib_StringExt_QRY_VersionIsLessThan((STRING)_Version, (INTEGER)_OtherMajor, (INTEGER)_OtherMinor, (INTEGER)_OtherRevision, (INTEGER)_OtherBuild)
AND
NOT DB_LeaderLib_StringExt_VersionIsLessThan(_Version, _OtherMajor, _OtherMinor, _OtherRevision, _OtherBuild)
AND
DB_LeaderLib_StringExt_VersionToInt(_Version, _Major, _Minor, _Revision, _Build)
AND
LeaderLib_StringExt_Internal_QRY_VersionIsLessThan(_Major, _Minor, _Revision, _Build, _OtherMajor, _OtherMinor, _OtherRevision, _OtherBuild)
THEN
DB_LeaderLib_StringExt_VersionIsLessThan(_Version, _OtherMajor, _OtherMinor, _OtherRevision, _OtherBuild);

QRY
LeaderLib_StringExt_QRY_VersionIsLessThan((STRING)_Version, (INTEGER)_OtherMajor, (INTEGER)_OtherMinor, (INTEGER)_OtherRevision, (INTEGER)_OtherBuild)
AND
NOT LeaderLib_QRY_ExtenderIsActive()
AND
NOT DB_LeaderLib_StringExt_VersionIsLessThan(_Version, _OtherMajor, _OtherMinor, _OtherRevision, _OtherBuild)
AND
NOT DB_LeaderLib_StringExt_VersionToInt(_Version, _, _, _, _)
AND
LeaderLib_StringExt_Internal_QRY_VersionSupported(_OtherMajor, _OtherMinor, _OtherRevision, _OtherBuild)
AND
LeaderLib_StringExt_QRY_ProcessVersionString(_Version)
AND
DB_LeaderLib_StringExt_Temp_Version_String(_Version, _MajorStr, _MinorStr, _RevisionStr, _BuildStr)
AND
DB_LeaderLib_Codex_Iterator(_Major, _MajorStr)
AND
DB_LeaderLib_Codex_Iterator(_Minor, _MinorStr)
AND
DB_LeaderLib_Codex_Iterator(_Revision, _RevisionStr)
AND
DB_LeaderLib_Codex_Iterator(_Build, _BuildStr)
AND
LeaderLib_StringExt_Internal_QRY_VersionIsLessThan(_Major, _Minor, _Revision, _Build, _OtherMajor, _OtherMinor, _OtherRevision, _OtherBuild)
THEN
DB_LeaderLib_StringExt_VersionIsLessThan(_Version, _OtherMajor, _OtherMinor, _OtherRevision, _OtherBuild);
LeaderLib_StringExt_SetVersionFromString(_Version, _Major, _Minor, _Revision, _Build);

IF
StoryEvent(_Obj, "LeaderLib_StringToVersion_Success")
AND
GetVarInteger(_Obj, "LeaderLib_StringToVersion_Major", _Major)
AND
GetVarInteger(_Obj, "LeaderLib_StringToVersion_Minor", _Minor)
AND
GetVarInteger(_Obj, "LeaderLib_StringToVersion_Revision", _Revision)
AND
GetVarInteger(_Obj, "LeaderLib_StringToVersion_Build", _Build)
THEN
LeaderLog_Log("DEBUG", "[LeaderLib_00_2_StringExtensions:LeaderLib_StringToVersion_Success] Lua (LeaderLib_Ext_StringToVersion) successfully ran.");
LeaderLog_LogInt("DEBUG", "[LeaderLib_00_2_StringExtensions:LeaderLib_StringToVersion_Success] -- Major (",_Major,")");
LeaderLog_LogInt("DEBUG", "[LeaderLib_00_2_StringExtensions:LeaderLib_StringToVersion_Success] -- Minor (",_Minor,")");
LeaderLog_LogInt("DEBUG", "[LeaderLib_00_2_StringExtensions:LeaderLib_StringToVersion_Success] -- Revision (",_Revision,")");
LeaderLog_LogInt("DEBUG", "[LeaderLib_00_2_StringExtensions:LeaderLib_StringToVersion_Success] -- Build (",_Build,")");

PROC
LeaderLib_StringExt_SetVersionFromString((STRING)_Version, (INTEGER)_Major, (INTEGER)_Minor, (INTEGER)_Revision, (INTEGER)_Build)
THEN
DB_LeaderLib_StringExt_VersionToInt(_Version, _Major, _Minor, _Revision, _Build);

/* [OSITOOLS_ONLY]
QRY
LeaderLib_StringExt_QRY_Ext_Internal_SplitVersionString((STRING)_Version)
THEN
NRD_LuaCall("LeaderLib_Ext_StringToVersion", _Version);

QRY
LeaderLib_StringExt_QRY_VersionIsLessThan((STRING)_Version, (INTEGER)_OtherMajor, (INTEGER)_OtherMinor, (INTEGER)_OtherRevision, (INTEGER)_OtherBuild)
AND
NOT DB_LeaderLib_StringExt_VersionIsLessThan(_Version, _OtherMajor, _OtherMinor, _OtherRevision, _OtherBuild)
AND
NOT DB_LeaderLib_StringExt_VersionToInt(_Version, _, _, _, _)
AND
LeaderLib_QRY_ExtenderIsActive()
AND
LeaderLib_StringExt_QRY_Ext_Internal_SplitVersionString(_Version)
AND
DB_LeaderLib_StringExt_VersionToInt(_Version, _Major, _Minor, _Revision, _Build)
AND
LeaderLib_StringExt_Internal_QRY_VersionIsLessThan(_Major, _Minor, _Revision, _Build, _OtherMajor, _OtherMinor, _OtherRevision, _OtherBuild)
THEN
DB_LeaderLib_StringExt_VersionIsLessThan(_Version, _OtherMajor, _OtherMinor, _OtherRevision, _OtherBuild);
LeaderLog_Log("DEBUG", "[LeaderLib_00_2_StringExtensions:QRY:VersionIsLessThan] Lua extender function was successful for version string (",_Version,").");
*/

QRY
LeaderLib_StringExt_Internal_QRY_VersionIsLessThan((INTEGER)_Major, (INTEGER)_Minor, (INTEGER)_Revision, (INTEGER)_Build, (INTEGER)_OtherMajor, (INTEGER)_OtherMinor, (INTEGER)_OtherRevision, (INTEGER)_OtherBuild)
AND
_Major < _OtherMajor
THEN
DB_NOOP(1);

QRY
LeaderLib_StringExt_Internal_QRY_VersionIsLessThan((INTEGER)_Major, (INTEGER)_Minor, (INTEGER)_Revision, (INTEGER)_Build, (INTEGER)_OtherMajor, (INTEGER)_OtherMinor, (INTEGER)_OtherRevision, (INTEGER)_OtherBuild)
AND
_Major <= _OtherMajor
AND
_Minor < _OtherMinor
THEN
DB_NOOP(1);

QRY
LeaderLib_StringExt_Internal_QRY_VersionIsLessThan((INTEGER)_Major, (INTEGER)_Minor, (INTEGER)_Revision, (INTEGER)_Build, (INTEGER)_OtherMajor, (INTEGER)_OtherMinor, (INTEGER)_OtherRevision, (INTEGER)_OtherBuild)
AND
_Major <= _OtherMajor
AND
_Minor <= _OtherMinor
AND
_Revision < _OtherRevision
THEN
DB_NOOP(1);

QRY
LeaderLib_StringExt_Internal_QRY_VersionIsLessThan((INTEGER)_Major, (INTEGER)_Minor, (INTEGER)_Revision, (INTEGER)_Build, (INTEGER)_OtherMajor, (INTEGER)_OtherMinor, (INTEGER)_OtherRevision, (INTEGER)_OtherBuild)
AND
_Major <= _OtherMajor
AND
_Minor <= _OtherMinor
AND
_Revision < _OtherRevision
AND
_Build <= _OtherBuild
THEN
DB_NOOP(1);
//END_REGION
EXITSECTION

ENDEXITSECTION
ParentTargetEdge "LaughingLeader__LeaderLib"
