Version 1
SubGoalCombiner SGC_AND
INITSECTION
//DB_LeaderLib_Math_Power(_Num, _Power, _Result)
//DB_LeaderLib_Math_Sine(_Angle, _Result)
//DB_LeaderLib_Math_Cosine(_Angle, _Result)
//DB_LeaderLib_Math_Factorial(_Factor, _Result)
//DB_LeaderLib_Math_AbsoluteValue(_Num, _Result)
//DB_LeaderLib_Math_AbsoluteValueInt(_Num, _Result)

//DB_LeaderLib_Math_Temp_FactorialOperation(_Factor, _MultiplyBy, _Result)


KBSECTION
//REGION INIT_CACHED_VALUES
PROC
LeaderLib_Settings_InitMathValues()
THEN
DB_LeaderLib_Math_Factorial(0, 1);
DB_LeaderLib_Math_Factorial(1, 1);
DB_LeaderLib_Math_Factorial(2, 2);
DB_LeaderLib_Math_Factorial(3, 6);
DB_LeaderLib_Math_Factorial(4, 24);
DB_LeaderLib_Math_Factorial(5, 120);
DB_LeaderLib_Math_Factorial(6, 720);
DB_LeaderLib_Math_Factorial(7, 5040);
DB_LeaderLib_Math_Factorial(8, 40320);
DB_LeaderLib_Math_Factorial(9, 362880);
DB_LeaderLib_Math_Factorial(10, 3628800);
//END_REGION

//REGION NORMALIZE

//R = tMin + (X - oMin) * (tMax - tMin) / (oMax - oMin)
/*
tMin = _TargetRangeMin
tMax = _TargetRangeMax
oMin = _OriginalRangeMin
oMax = _OriginalRangeMax
X = _Input
R = Result
-----------
Example:
R = 0 + (596 - 0) * (2 - 0) / (999 - 0)
R = 1184 / 999
R = 1.185
*/
QRY
LeaderLib_Math_QRY_NormalizeReal((REAL)_Input, (REAL)_TargetRangeMin, (REAL)_TargetRangeMax, (REAL)_OriginalRangeMin, (REAL)_OriginalRangeMax)
THEN
LeaderLib_Math_NormalizeReal(_Input, _TargetRangeMin, _TargetRangeMax, _OriginalRangeMin, _OriginalRangeMax);

PROC
LeaderLib_Math_NormalizeReal((REAL)_Input, (REAL)_TargetRangeMin, (REAL)_TargetRangeMax, (REAL)_OriginalRangeMin, (REAL)_OriginalRangeMax)
AND
RealSubtract(_Input, _OriginalRangeMin, _FirstGroup) // (X - oMin)
AND
RealSubtract(_TargetRangeMax, _TargetRangeMin, _SecondGroup) // (tMax - tMin)
AND
RealSubtract(_OriginalRangeMax, _OriginalRangeMin, _ThirdGroup) // (oMax - oMin)
AND
RealProduct(_FirstGroup, _SecondGroup, _LeftSide)
AND
RealDivide(_LeftSide, _ThirdGroup, _RightSide) 
AND
RealSum(_TargetRangeMin, _RightSide, _Result)
THEN
DB_LeaderLib_Math_NormalizeReal(_Input, _Result);

QRY
LeaderLib_Math_QRY_NormalizeInt((INTEGER)_Input, (INTEGER)_TargetRangeMin, (INTEGER)_TargetRangeMax, (INTEGER)_OriginalRangeMin, (INTEGER)_OriginalRangeMax)
THEN
LeaderLib_Math_NormalizeInt(_Input, _TargetRangeMin, _TargetRangeMax, _OriginalRangeMin, _OriginalRangeMax);

PROC
LeaderLib_Math_NormalizeInt((INTEGER)_Input, (INTEGER)_TargetRangeMin, (INTEGER)_TargetRangeMax, (INTEGER)_OriginalRangeMin, (INTEGER)_OriginalRangeMax)
AND
Real(_TargetRangeMin, _TargetRangeMinR)
AND
Real(_TargetRangeMax, _TargetRangeMaxR)
AND
Real(_OriginalRangeMin, _OriginalRangeMinR)
AND
Real(_OriginalRangeMax, _OriginalRangeMaxR)
AND
Real(_Input, _InputR)
AND
LeaderLib_Math_QRY_NormalizeReal(_InputR, _TargetRangeMinR, _TargetRangeMaxR, _OriginalRangeMinR, _OriginalRangeMaxR)
AND
DB_LeaderLib_Math_NormalizeReal(_InputR, _ResultR)
AND
Integer(_ResultR, _ResultInt)
THEN
NOT DB_LeaderLib_Math_NormalizeReal(_InputR, _ResultR);
LeaderLib_Math_Normalize_Internal_Ceiling(_Input, _ResultR, _ResultInt);

PROC
LeaderLib_Math_Normalize_Internal_Ceiling((INTEGER)_Input, (REAL)_ResultR, (INTEGER)_ResultInt)
AND
Real(_ResultInt, _ResultIntR)
AND
_ResultIntR == _ResultR
THEN
DB_LeaderLib_Math_NormalizeInt(_Input, _ResultInt);

PROC
LeaderLib_Math_Normalize_Internal_Ceiling((INTEGER)_Input, (REAL)_ResultR, (INTEGER)_ResultInt)
AND
NOT DB_LeaderLib_Math_NormalizeInt(_Input, _)
AND
IntegerSum(_ResultInt, 1, _Result)
THEN
DB_LeaderLib_Math_NormalizeInt(_Input, _Result);

PROC
LeaderLib_Math_Normalize_ClearData()
AND
DB_LeaderLib_Math_NormalizeReal(_Input, _Result)
THEN
NOT DB_LeaderLib_Math_NormalizeReal(_Input, _Result);

PROC
LeaderLib_Math_Normalize_ClearData()
AND
DB_LeaderLib_Math_NormalizeInt(_Input, _Result)
THEN
NOT DB_LeaderLib_Math_NormalizeInt(_Input, _Result);
//END_REGION

//REGION POWER
/* [OSITOOLS_ONLY]
QRY
LeaderLib_Math_QRY_Power((REAL)_Num, (INTEGER)_Power)
AND
NRD_Pow(_Num, _Power, _Result)
THEN
DB_LeaderLib_Math_Power(_Num, _Power, _Result);
*/

QRY
LeaderLib_Math_QRY_Power((REAL)_Num, (INTEGER)_Power)
AND
NOT LeaderLib_QRY_ExtenderIsActive()
THEN
LeaderLib_Math_Internal_CalculatePower(_Num, _Power);

PROC
LeaderLib_Math_Power((REAL)_Num, (INTEGER)_Power)
AND
NOT DB_LeaderLib_Math_Power(_Num, _Power, _)
THEN
LeaderLib_Math_Internal_CalculatePower(_Num, _Power);

PROC
LeaderLib_Math_Internal_CalculatePower((REAL)_Num, 0)
THEN
DB_LeaderLib_Math_Power(_Num, 0, 1.0);

PROC
LeaderLib_Math_Internal_CalculatePower((REAL)_Num, 1)
THEN
DB_LeaderLib_Math_Power(_Num, 1, _Num);

PROC
LeaderLib_Math_Internal_CalculatePower((REAL)_Num, 2)
AND
RealProduct(_Num, _Num, _x)
THEN
DB_LeaderLib_Math_Power(_Num, 2, _x);

PROC
LeaderLib_Math_Internal_CalculatePower((REAL)_Num, 3)
AND
RealProduct(_Num, _Num, _x1)
AND
RealProduct(_x1, _Num, _x2)
THEN
DB_LeaderLib_Math_Power(_Num, 3, _x2);

PROC
LeaderLib_Math_Internal_CalculatePower((REAL)_Num, 4)
AND
RealProduct(_Num, _Num, _x1)
AND
RealProduct(_x1, _Num, _x2)
AND
RealProduct(_x2, _Num, _x3)
THEN
DB_LeaderLib_Math_Power(_Num, 4, _x3);

PROC
LeaderLib_Math_Internal_CalculatePower((REAL)_Num, 5)
AND
RealProduct(_Num, _Num, _x1)
AND
RealProduct(_x1, _Num, _x2)
AND
RealProduct(_x2, _Num, _x3)
AND
RealProduct(_x3, _Num, _x4)
THEN
DB_LeaderLib_Math_Power(_Num, 5, _x4);

PROC
LeaderLib_Math_Internal_CalculatePower((REAL)_Num, 6)
AND
RealProduct(_Num, _Num, _x1)
AND
RealProduct(_x1, _Num, _x2)
AND
RealProduct(_x2, _Num, _x3)
AND
RealProduct(_x3, _Num, _x4)
AND
RealProduct(_x4, _Num, _x5)
THEN
DB_LeaderLib_Math_Power(_Num, 6, _x5);

PROC
LeaderLib_Math_Internal_CalculatePower((REAL)_Num, 7)
AND
RealProduct(_Num, _Num, _x1)
AND
RealProduct(_x1, _Num, _x2)
AND
RealProduct(_x2, _Num, _x3)
AND
RealProduct(_x3, _Num, _x4)
AND
RealProduct(_x4, _Num, _x5)
AND
RealProduct(_x5, _Num, _x6)
THEN
DB_LeaderLib_Math_Power(_Num, 7, _x6);

PROC
LeaderLib_Math_Internal_CalculatePower((REAL)_Num, 8)
AND
RealProduct(_Num, _Num, _x1)
AND
RealProduct(_x1, _Num, _x2)
AND
RealProduct(_x2, _Num, _x3)
AND
RealProduct(_x3, _Num, _x4)
AND
RealProduct(_x4, _Num, _x5)
AND
RealProduct(_x5, _Num, _x6)
AND
RealProduct(_x6, _Num, _x7)
THEN
DB_LeaderLib_Math_Power(_Num, 8, _x7);

PROC
LeaderLib_Math_Internal_CalculatePower((REAL)_Num, 9)
AND
RealProduct(_Num, _Num, _x1)
AND
RealProduct(_x1, _Num, _x2)
AND
RealProduct(_x2, _Num, _x3)
AND
RealProduct(_x3, _Num, _x4)
AND
RealProduct(_x4, _Num, _x5)
AND
RealProduct(_x5, _Num, _x6)
AND
RealProduct(_x6, _Num, _x7)
AND
RealProduct(_x7, _Num, _x8)
THEN
DB_LeaderLib_Math_Power(_Num, 9, _x8);

PROC
LeaderLib_Math_Internal_CalculatePower((REAL)_Num, (INTEGER)_Power)
AND
_Power >= 10
THEN
LeaderLog_Log("DEBUG", "[LeaderLib:Math:Power] [ERROR] Powers above 10 are not implemented yet!");
//END_REGION

//REGION FACTORIAL
/* [OSITOOLS_ONLY]
QRY
LeaderLib_Math_QRY_Factorial((INTEGER)_Factor)
AND
NRD_Factorial(_Factor, _Result)
THEN
DB_LeaderLib_Math_Factorial(_Factor, _Result);
*/

QRY
LeaderLib_Math_QRY_Factorial((INTEGER)_Factor)
AND
NOT LeaderLib_QRY_ExtenderIsActive()
THEN
LeaderLib_Math_Factorial(_Factor);

PROC
LeaderLib_Math_Factorial((INTEGER)_Factor)
AND
NOT DB_LeaderLib_Math_Factorial(_Factor, _)
THEN
LeaderLib_Math_Internal_CalculateFactorial(_Factor, _Factor, _Factor);

PROC
LeaderLib_Math_Internal_CalculateFactorial((INTEGER)_Factor, (INTEGER)_CurrentFactor, (INTEGER)_CurrentResult)
AND
_CurrentFactor <= 1
THEN
LeaderLib_Math_Internal_ProcessFactorialResult(_Factor);

PROC
LeaderLib_Math_Internal_CalculateFactorial((INTEGER)_Factor, (INTEGER)_CurrentFactor, (INTEGER)_CurrentResult)
AND
IntegerSubtract(_CurrentFactor, 1, _MultiplyBy)
AND
_MultiplyBy > 0
AND
IntegerProduct(_CurrentResult, _MultiplyBy, _Result)
THEN
NOT DB_LeaderLib_Math_Temp_FactorialOperation(_Factor, _CurrentFactor, _CurrentResult);
DB_LeaderLib_Math_Temp_FactorialOperation(_Factor, _MultiplyBy, _Result);
LeaderLib_Math_Internal_CheckNextFactorial(_Factor, _MultiplyBy, _Result);

PROC
LeaderLib_Math_Internal_CheckNextFactorial((INTEGER)_Factor, (INTEGER)_CurrentFactor, (INTEGER)_CurrentResult)
AND
_CurrentFactor <= 1
THEN
LeaderLib_Math_Internal_ProcessFactorialResult(_Factor);

PROC
LeaderLib_Math_Internal_CheckNextFactorial((INTEGER)_Factor, (INTEGER)_CurrentFactor, (INTEGER)_CurrentResult)
AND
_CurrentFactor > 1
THEN
LeaderLib_Math_Internal_CalculateFactorial(_Factor, _CurrentFactor, _CurrentResult);

PROC
LeaderLib_Math_Internal_ProcessFactorialResult((INTEGER)_Factor)
AND
NOT DB_LeaderLib_Math_Factorial(_Factor, _)
AND
DB_LeaderLib_Math_Temp_FactorialOperation(_Factor, _MultiplyBy, _Result)
THEN
NOT DB_LeaderLib_Math_Temp_FactorialOperation(_Factor, _MultiplyBy, _Result);
DB_LeaderLib_Math_Factorial(_Factor, _Result);
//END_REGION

//REGION SQUARE_ROOT
/* [OSITOOLS_ONLY]
QRY
LeaderLib_Math_QRY_SquareRoot((REAL)_Number)
AND
NRD_Sqrt(_Number, _Result)
THEN
DB_LeaderLib_Math_SquareRoot(_Number, _Result);
*/

QRY
LeaderLib_Math_QRY_SquareRoot((REAL)_Number)
AND
NOT LeaderLib_QRY_ExtenderIsActive()
THEN
LeaderLib_Math_SquareRoot(_Number);

PROC
LeaderLib_Math_SquareRoot((REAL)_Number)
AND
NOT DB_LeaderLib_Math_SquareRoot(_Number, _)
AND
RealDivide(_Number, 2.0, _Sqrt)
THEN
LeaderLib_Math_Internal_SquareRootLoop(_Number, _Sqrt, 0.0);

PROC
LeaderLib_Math_Internal_SquareRootLoop((REAL)_Number, (REAL)_Sqrt, (REAL)_Temp)
AND
_Sqrt != _Temp
AND
RealDivide(_Number, _Sqrt, _a)
AND
RealSum(_a, _Sqrt, _b)
AND
RealDivide(_b, 2.0, _Sqrt2)
THEN
LeaderLib_Math_Internal_SquareRootLoop(_Number, _Sqrt2, _Sqrt);

PROC
LeaderLib_Math_Internal_SquareRootLoop((REAL)_Number, (REAL)_Sqrt, (REAL)_Temp)
AND
_Sqrt == _Temp
THEN
DB_LeaderLib_Math_SquareRoot(_Number, _Sqrt);

IF
TextEventSet("leaderlib_squareroot")
AND
GetTextEventParamReal(1, _Number)
AND
LeaderLib_Math_QRY_SquareRoot(_Number)
AND
DB_LeaderLib_Math_SquareRoot(_Number, _Sqrt)
//AND
//Integer(_Sqrt, _SqrtInt)
//AND
//IntegertoString(_SqrtInt, _SqrtStr)
THEN
NOT DB_LeaderLib_Math_SquareRoot(_Number, _Sqrt);
//LeaderLog_Log("DEBUG", "[LeaderLib_00_4_MathExtensions:leaderlib_squareroot] Square root is [",_SqrtStr,"]");
LeaderLog_RealToString(_Sqrt, "[LeaderLib:leaderlib_squareroot] Square root [","]");
//END_REGION

//REGION SINE
/* [OSITOOLS_ONLY]
QRY
LeaderLib_Math_QRY_Sine((REAL)_Angle)
AND
NRD_Sin(_Angle, _Result)
THEN
DB_LeaderLib_Math_Sine(_Angle, _Result);
*/

QRY
LeaderLib_Math_QRY_Sine((REAL)_Angle)
AND
NOT LeaderLib_QRY_ExtenderIsActive()
THEN
LeaderLib_Math_Sine(_Angle);

PROC
LeaderLib_Math_Sine((REAL)_Angle)
AND
NOT DB_LeaderLib_Math_Sine(_Angle, _)
AND
RealProduct(_Angle, 3.14159265358979323846, _rads1)
AND
RealDivide(_rads1, 180.0, _x)
AND
//x - x^3/2!
LeaderLib_Math_QRY_Power(_x, 3)
AND
DB_LeaderLib_Math_Power(_x, 3, _p1)
AND
LeaderLib_Math_QRY_Factorial(3)
AND
DB_LeaderLib_Math_Factorial(3, _f3)
AND
Real(_f3, _fr3)
AND
RealDivide(_p1, _fr3, _xp1)
AND
RealSubtract(_x, _xp1, _xblock1)
AND
//+ x^5/5!
LeaderLib_Math_QRY_Power(_x, 5)
AND
DB_LeaderLib_Math_Power(_x, 5, _p2)
AND
LeaderLib_Math_QRY_Factorial(5)
AND
DB_LeaderLib_Math_Factorial(5, _f5)
AND
Real(_f5, _fr5)
AND
RealDivide(_p2, _fr5, _xp2)
AND
RealSum(_xblock1, _xp2, _xblock2)
AND
//- x^7/7!
LeaderLib_Math_QRY_Power(_x, 7)
AND
DB_LeaderLib_Math_Power(_x, 7, _p3)
AND
LeaderLib_Math_QRY_Factorial(7)
AND
DB_LeaderLib_Math_Factorial(7, _f7)
AND
Real(_f7, _fr7)
AND
RealDivide(_p3, _fr7, _xp3)
AND
RealSubtract(_xblock2, _xp3, _xblock3)
AND
//- x^9/9!
LeaderLib_Math_QRY_Power(_x, 9)
AND
DB_LeaderLib_Math_Power(_x, 9, _p4)
AND
LeaderLib_Math_QRY_Factorial(9)
AND
DB_LeaderLib_Math_Factorial(9, _f9)
AND
Real(_f9, _fr9)
AND
RealDivide(_p4, _fr9, _xp4)
AND
RealSum(_xblock3, _xp4, _xblock4)
THEN
DB_LeaderLib_Math_Sine(_Angle, _xblock4);
//END_REGION

//REGION COSINE
/* [OSITOOLS_ONLY]
QRY
LeaderLib_Math_QRY_Cosine((REAL)_Angle)
AND
NRD_Cos(_Angle, _Result)
THEN
DB_LeaderLib_Math_Cosine(_Angle, _Result);
*/

QRY
LeaderLib_Math_QRY_Cosine((REAL)_Angle)
AND
NOT LeaderLib_QRY_ExtenderIsActive()
THEN
LeaderLib_Math_Cosine(_Angle);

PROC
LeaderLib_Math_Cosine((REAL)_Angle)
AND
NOT DB_LeaderLib_Math_Cosine(_Angle, _)
AND
RealProduct(_Angle, 3.14159265358979323846, _rads1)
AND
RealDivide(_rads1, 180.0, _x)
AND
//1 - x^2/2!
LeaderLib_Math_QRY_Power(_x, 2)
AND
DB_LeaderLib_Math_Power(_x, 2, _p1)
AND
LeaderLib_Math_QRY_Factorial(2)
AND
DB_LeaderLib_Math_Factorial(2, _f1)
AND
Real(_f1, _fr1)
AND
RealDivide(_p1, _fr1, _xp1)
AND
RealSubtract(1.0, _xp1, _xblock1)
AND
//+ x^4/4!
LeaderLib_Math_QRY_Power(_x, 4)
AND
DB_LeaderLib_Math_Power(_x, 4, _p2)
AND
LeaderLib_Math_QRY_Factorial(4)
AND
DB_LeaderLib_Math_Factorial(4, _f2)
AND
Real(_f2, _fr2)
AND
RealDivide(_p2, _fr2, _xp2)
AND
RealSum(_xblock1, _xp2, _xblock2)
AND
//- x^6/6!
LeaderLib_Math_QRY_Power(_x, 6)
AND
DB_LeaderLib_Math_Power(_x, 6, _p3)
AND
LeaderLib_Math_QRY_Factorial(6)
AND
DB_LeaderLib_Math_Factorial(6, _f3)
AND
Real(_f3, _fr3)
AND
RealDivide(_p3, _fr3, _xp3)
AND
RealSubtract(_xblock2, _xp3, _xblock3)
AND
//- x^8/8!
LeaderLib_Math_QRY_Power(_x, 8)
AND
DB_LeaderLib_Math_Power(_x, 8, _p4)
AND
LeaderLib_Math_QRY_Factorial(8)
AND
DB_LeaderLib_Math_Factorial(8, _f4)
AND
Real(_f4, _fr4)
AND
RealDivide(_p4, _fr4, _xp4)
AND
RealSum(_xblock3, _xp4, _xblock4)
THEN
DB_LeaderLib_Math_Cosine(_Angle, _xblock4);
//END_REGION

//REGION EXPONENTIAL
/* [OSITOOLS_ONLY]
QRY
LeaderLib_Math_QRY_Exponential((REAL)_x, (INTEGER)_Approximation)
AND
NRD_Exp(_x, _Result)
THEN
DB_LeaderLib_Math_Exponential(_x, _Approximation, _Result);
*/

/*
Source:
def exp_custom(x, n):
    e_approx = 0
    for i in range(n):
        e_approx += math.pow(x, i)/math.factorial(i)
    return e_approx
*/
QRY
LeaderLib_Math_QRY_Exponential((REAL)_x, (INTEGER)_Approximation)
AND
NOT LeaderLib_QRY_ExtenderIsActive()
THEN
LeaderLib_Math_Exponential(_x, _Approximation);

PROC
LeaderLib_Math_Exponential((REAL)_x, (INTEGER)_Approximation)
AND
NOT DB_LeaderLib_Math_Exponential(_x, _Approximation, _)
THEN
DB_LeaderLib_Math_Exponential(_x, _Approximation, 0.0);
LeaderLib_Math_Internal_ExponentialLoop(_x, 0, _Approximation);

PROC
LeaderLib_Math_Internal_ExponentialLoop((REAL)_x, (INTEGER)_i, (INTEGER)_Approximation)
AND
_i < _Approximation
AND
IntegerSum(_i, 1, _NextIndex)
AND
LeaderLib_Math_QRY_Power(_x, _i)
AND
DB_LeaderLib_Math_Power(_x, _i, _p1)
AND
LeaderLib_Math_QRY_Factorial(_i)
AND
DB_LeaderLib_Math_Factorial(_i, _f1)
AND
Real(_f1, _fr1)
AND
RealDivide(_p1, _fr1, _exp)
AND
DB_LeaderLib_Math_Exponential(_x, _Approximation, _Val)
AND
RealSum(_Val, _exp, _NextVal)
THEN
NOT DB_LeaderLib_Math_Exponential(_x, _Approximation, _Val);
DB_LeaderLib_Math_Exponential(_x, _Approximation, _NextVal);
LeaderLib_Math_Internal_ExponentialLoop(_x, _NextIndex, _Approximation);

IF
TextEventSet("leaderlib_exp")
AND
GetTextEventParamReal(1, _x)
AND
GetTextEventParamInteger(2, _n)
AND
LeaderLib_Math_QRY_Exponential(_x, _n)
AND
DB_LeaderLib_Math_Exponential(_x, _n, _Val)
THEN
NOT DB_LeaderLib_Math_Exponential(_x, _n, _Val);
LeaderLog_RealToString(_Val, "[LeaderLib:leaderlib_exp] Exponential [","]");
//END_REGION

//REGION ABSOLUTE
/* [OSITOOLS_ONLY]
QRY
LeaderLib_Math_QRY_AbsoluteValue((REAL)_Num)
AND
NRD_Abs(_Num, _Result)
THEN
DB_LeaderLib_Math_AbsoluteValue(_Num, _Result);
*/

QRY
LeaderLib_Math_QRY_ClearAbsoluteValues()
THEN
LeaderLib_Math_ClearAbsoluteValues();

PROC
LeaderLib_Math_ClearAbsoluteValues()
AND
DB_LeaderLib_Math_AbsoluteValue(_Num, _AbsNum)
THEN
NOT DB_LeaderLib_Math_AbsoluteValue(_Num, _AbsNum);

QRY
LeaderLib_Math_QRY_AbsoluteValue((REAL)_Num)
AND
NOT LeaderLib_QRY_ExtenderIsActive()
THEN
LeaderLib_Math_Internal_AbsoluteValue(_Num);

PROC
LeaderLib_Math_Internal_AbsoluteValue((REAL)_Num)
AND
NOT DB_LeaderLib_Math_AbsoluteValue(_Num, _)
AND
_Num < 0
AND
RealProduct(_Num, -1.0, _AbsNum)
THEN
DB_LeaderLib_Math_AbsoluteValue(_Num, _AbsNum);

PROC
LeaderLib_Math_Internal_AbsoluteValue((REAL)_Num)
AND
NOT DB_LeaderLib_Math_AbsoluteValue(_Num, _)
AND
_Num >= 0
THEN
DB_LeaderLib_Math_AbsoluteValue(_Num, _Num);

QRY
LeaderLib_Math_QRY_AbsoluteValue((REAL)_Num)
THEN
LeaderLib_Math_Internal_AbsoluteValue(_Num);

PROC
LeaderLib_Math_Internal_AbsoluteValueInt((INTEGER)_Num)
AND
NOT DB_LeaderLib_Math_AbsoluteValueInt(_Num, _)
AND
_Num < 0
AND
IntegerProduct(_Num, -1, _AbsNum)
THEN
DB_LeaderLib_Math_AbsoluteValueInt(_Num, _AbsNum);

PROC
LeaderLib_Math_Internal_AbsoluteValueInt((INTEGER)_Num)
AND
NOT DB_LeaderLib_Math_AbsoluteValueInt(_Num, _)
AND
_Num >= 0
THEN
DB_LeaderLib_Math_AbsoluteValueInt(_Num, _Num);
//END_REGION

//REGION 2D_ROTATION
PROC
LeaderLib_Math_ConvertAngle((REAL)_Angle)
AND
_Angle < 0.0
AND
RealProduct(_Angle, -1.0, _a1)
AND
RealSum(_a1, 270.0, _a2)
THEN
DB_LeaderLib_Math_Angle(_Angle, _a2);

PROC
LeaderLib_Math_ConvertAngle((REAL)_Angle)
AND
_Angle >= 0.0
THEN
DB_LeaderLib_Math_Angle(_Angle, _Angle);

QRY
LeaderLib_Math_QRY_ConvertAngle((REAL)_Angle)
THEN
LeaderLib_Math_ConvertAngle(_Angle);

QRY
LeaderLib_Math_QRY_RotatePoint((REAL)_x1, (REAL)_z1, (REAL)_Angle, (INTEGER)_BoolConvertAngleTo360Degrees)
THEN
LeaderLib_Math_RotatePoint(_x1, _z1, _Angle, _BoolConvertAngleTo360Degrees);

PROC
LeaderLib_Math_RotatePoint((REAL)_x1, (REAL)_z1, (REAL)_Angle, 1)
AND
NOT DB_LeaderLib_Math_RotatedPoint(_x1, _z1, _Angle, _, _)
AND
LeaderLib_Math_QRY_ConvertAngle(_Angle)
AND
DB_LeaderLib_Math_Angle(_Angle, _a2)
THEN
NOT DB_LeaderLib_Math_Angle(_Angle, _a2);
LeaderLib_Math_Internal_RotatePoint(_x1, _z1, _Angle, _a2);

PROC
LeaderLib_Math_RotatePoint((REAL)_x1, (REAL)_z1, (REAL)_Angle, 0)
AND
NOT DB_LeaderLib_Math_RotatedPoint(_x1, _z1, _Angle, _, _)
THEN
LeaderLib_Math_Internal_RotatePoint(_x1, _z1, _Angle, _Angle);

PROC
LeaderLib_Math_Internal_RotatePoint((REAL)_x1, (REAL)_z1, (REAL)_OriginalAngle, (REAL)_Angle)
AND
LeaderLib_Math_QRY_Sine(_Angle)
AND
LeaderLib_Math_QRY_Cosine(_Angle)
AND
DB_LeaderLib_Math_Sine(_Angle, _sine)
AND
DB_LeaderLib_Math_Cosine(_Angle, _cos)
AND
RealProduct(_x1, _cos, _tx1)
AND
RealProduct(_z1, _sine, _tx2)
AND
RealSubtract(_tx1, _tx2, _x2)
AND
RealProduct(_x1, _sine, _tz1)
AND
RealProduct(_z1, _cos, _tz2)
AND
RealSum(_tz1, _tz2, _z2)
THEN
NOT DB_LeaderLib_Math_Sine(_Angle, _sine);
NOT DB_LeaderLib_Math_Sine(_Angle, _cos);
DB_LeaderLib_Math_RotatedPoint(_x1, _z1, _OriginalAngle, _x2, _z2);
//END_REGION

//REGION MATCH_QUERIES
QRY
LeaderLib_Math_QRY_IsEqualToAny((INTEGER)_Num, (INTEGER)_Match1, (INTEGER)_Match2)
AND
_Num == _Match1
THEN
DB_NOOP(1);

QRY
LeaderLib_Math_QRY_IsEqualToAny((INTEGER)_Num, (INTEGER)_Match1, (INTEGER)_Match2)
AND
_Num == _Match2
THEN
DB_NOOP(1);

QRY
LeaderLib_Math_QRY_IsEqualToAny((INTEGER)_Num, (INTEGER)_Match1, (INTEGER)_Match2, (INTEGER)_Match3)
AND
_Num == _Match1
THEN
DB_NOOP(1);

QRY
LeaderLib_Math_QRY_IsEqualToAny((INTEGER)_Num, (INTEGER)_Match1, (INTEGER)_Match2, (INTEGER)_Match3)
AND
_Num == _Match2
THEN
DB_NOOP(1);

QRY
LeaderLib_Math_QRY_IsEqualToAny((INTEGER)_Num, (INTEGER)_Match1, (INTEGER)_Match2, (INTEGER)_Match3)
AND
_Num == _Match3
THEN
DB_NOOP(1);

QRY
LeaderLib_Math_QRY_IsEqualToAny((INTEGER)_Num, (INTEGER)_Match1, (INTEGER)_Match2, (INTEGER)_Match3, (INTEGER)_Match4)
AND
_Num == _Match1
THEN
DB_NOOP(1);

QRY
LeaderLib_Math_QRY_IsEqualToAny((INTEGER)_Num, (INTEGER)_Match1, (INTEGER)_Match2, (INTEGER)_Match3, (INTEGER)_Match4)
AND
_Num == _Match2
THEN
DB_NOOP(1);

QRY
LeaderLib_Math_QRY_IsEqualToAny((INTEGER)_Num, (INTEGER)_Match1, (INTEGER)_Match2, (INTEGER)_Match3, (INTEGER)_Match4)
AND
_Num == _Match3
THEN
DB_NOOP(1);

QRY
LeaderLib_Math_QRY_IsEqualToAny((INTEGER)_Num, (INTEGER)_Match1, (INTEGER)_Match2, (INTEGER)_Match3, (INTEGER)_Match4)
AND
_Num == _Match4
THEN
DB_NOOP(1);
//END_REGION

//REGION CLAMP
PROC
LeaderLib_Math_ClampInt((STRING)_ID, (INTEGER)_Value, (INTEGER)_Min, (INTEGER)_Max)
AND
DB_LeaderLib_Math_ClampInt(_ID, _Last)
THEN
NOT DB_LeaderLib_Math_ClampInt(_ID, _Last);

PROC
LeaderLib_Math_ClampInt((STRING)_ID, (INTEGER)_Value, (INTEGER)_Min, (INTEGER)_Max)
AND
_Value > _Max
THEN
DB_LeaderLib_Math_ClampInt(_ID, _Max);

PROC
LeaderLib_Math_ClampInt((STRING)_ID, (INTEGER)_Value, (INTEGER)_Min, (INTEGER)_Max)
AND
_Value < _Max
AND
_Value > _Min
THEN
DB_LeaderLib_Math_ClampInt(_ID, _Value);

PROC
LeaderLib_Math_ClampInt((STRING)_ID, (INTEGER)_Value, (INTEGER)_Min, (INTEGER)_Max)
AND
_Value <= _Min
THEN
DB_LeaderLib_Math_ClampInt(_ID, _Min);

QRY
LeaderLib_Math_QRY_ClampInt((STRING)_ID, (INTEGER)_Value, (INTEGER)_Min, (INTEGER)_Max)
THEN
LeaderLib_Math_ClampInt(_ID, _Value, _Min, _Max);
//END_REGION

//REGION RANDOM_POSITION_CIRCLE
QRY
LeaderLib_Math_QRY_GetRandomPositionInCircle((STRING)_ID, (REAL)_x, (REAL)_y, (REAL)_z, (REAL)_MaxDistance)
THEN
LeaderLib_Math_SetRandomPositionInCircle(_ID, _x, _y, _z, _MaxDistance);

PROC
LeaderLib_Math_SetRandomPositionInCircle((STRING)_ID, (REAL)_x, (REAL)_y, (REAL)_z, (REAL)_MaxDistance)
AND
DB_LeaderLib_Math_RandomCirclePosition(_ID, _tx, _ty, _tz)
THEN
NOT DB_LeaderLib_Math_RandomCirclePosition(_ID, _tx, _ty, _tz);

PROC
LeaderLib_Math_SetRandomPositionInCircle((STRING)_ID, (REAL)_x, (REAL)_y, (REAL)_z, (REAL)_MaxDistance)
AND
RealDivide(_MaxDistance, 2.0, _Radius)
AND
Random(1000, _ThetaRanInt) // [0,1], we need to Ran out of 1000 since Random is an integer
AND
Real(_ThetaRanInt, _ThetaRanReal)
AND
RealDivide(_ThetaRanReal, 1000.0, _ThetaRan) // Ran Float [0,1]
AND
RealProduct(_ThetaRan, 2.0, _AngleLeftSide)  // [0,1] * 2
AND
RealProduct(_AngleLeftSide, 3.14159, _Angle)  // ([0,1] * 2) * Pi
AND
Random(1000, _DistScalarInt) // Area = Sqrt x [0,1] / Pi
AND
Real(_DistScalarInt, _DistScalarReal)
AND
RealDivide(_DistScalarReal, 1000.0, _DistScalar)
AND
LeaderLib_Math_QRY_SquareRoot(_DistScalar) // distance = sqrt(random(0.0, 1.0)) * radius
AND
DB_LeaderLib_Math_SquareRoot(_DistScalar, _Sqrt)
AND
RealProduct(_Sqrt, _Radius, _Distance)
THEN
NOT DB_LeaderLib_Math_SquareRoot(_DistScalarReal, _Sqrt);
LeaderLib_Math_SetRandomPositionInCircleFromAngleDist(_ID, _x, _y, _z, _Angle, _Distance);

PROC
LeaderLib_Math_SetRandomPositionInCircleFromAngleDist((STRING)_ID, (REAL)_x, (REAL)_y, (REAL)_z, (REAL)_Angle, (REAL)_Distance)
AND
LeaderLib_Math_QRY_Cosine(_Angle)
AND
DB_LeaderLib_Math_Cosine(_Angle, _Cos)
AND
RealProduct(_Distance, _Cos, _a)
AND
RealSum(_x, _a, _tx)
AND
LeaderLib_Math_QRY_Sine(_Angle)
AND
DB_LeaderLib_Math_Sine(_Angle, _Sin)
AND
RealProduct(_Distance, _Sin, _b)
AND
RealSum(_z, _b, _tz)
THEN
NOT DB_LeaderLib_Math_Cosine(_Angle, _Cos);
NOT DB_LeaderLib_Math_Sine(_Angle, _Sin);
DB_LeaderLib_Math_RandomCirclePosition(_ID, _tx, _y, _tz);

//END_REGION

//REGION IS_DIVISIBLE
QRY
LeaderLib_Math_IsDivisible((INTEGER)_Numerator, (INTEGER)_Denominator)
AND
IntegerDivide(_Numerator, _Denominator, _Quotient)
AND
IntegerProduct(_Denominator, _Quotient, _Numerator)
THEN
DB_NOOP(1);

//END_REGION

//REGION SCALE_TO_RANGE
QRY
LeaderLib_Math_QRY_ScaleToRange((REAL)_Val, (REAL)_MinValRange, (REAL)_MaxValRange, (REAL)_MinScaleRange, (REAL)_MaxScaleRange)
THEN
LeaderLib_Math_ScaleToRange(_Val, _MinValRange, _MaxValRange, _MinScaleRange, _MaxScaleRange);

PROC
LeaderLib_Math_ScaleToRange((REAL)_Val, (REAL)_MinValRange, (REAL)_MaxValRange, (REAL)_MinScaleRange, (REAL)_MaxScaleRange)
AND
RealSubtract(_Val, _MinValRange, _a)
AND
RealSubtract(_MaxValRange, _MinValRange, _b)
AND
RealDivide(_a, _b, _c)
AND
RealSubtract(_MaxScaleRange, _MinScaleRange, _d)
AND
RealProduct(_c, _d, _e)
AND
RealSum(_e, _MinScaleRange, _Result)
THEN
DB_LeaderLib_Math_ScaleToRange(_Val, _Result, _MinValRange, _MaxValRange, _MinScaleRange, _MaxScaleRange);
EXITSECTION

ENDEXITSECTION
ParentTargetEdge "LaughingLeader__LeaderLib"
