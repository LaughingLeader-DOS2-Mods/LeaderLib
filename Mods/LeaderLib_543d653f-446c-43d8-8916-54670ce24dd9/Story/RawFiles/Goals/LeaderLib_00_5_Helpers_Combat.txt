Version 1
SubGoalCombiner SGC_AND
INITSECTION
//DB_LeaderLib_Combat_ActiveCombat(_CombatID)
//DB_LeaderLib_Combat_Rounds(_CombatID, _CurrentRound, _TotalRounds)
//DB_LeaderLib_Combat_ActiveObject(_CombatID, _Object)
//DB_LeaderLib_Combat_DeadObjects(_CombatID, _Object)
//DB_LeaderLib_Combat_Casualties(_CombatID, _Victim, _Attacker)
/*Temp*/
//DB_LeaderLib_Combat_Temp_ObjectCombatList(_Index, _Object, _CombatID)
//DB_LeaderLib_Combat_Temp_CharacterCombatList(_Index, _Character, _CombatID)
//DB_LeaderLib_Combat_Temp_ItemCombatList(_Index, _Item, _CombatID)
//DB_LeaderLib_Combat_Temp_RandomObject(_CombatID, _Object)
//DB_LeaderLib_Combat_Temp_RandomCharacter(_CombatID, _Character, _Index)
//DB_LeaderLib_Combat_Temp_RandomItem(_CombatID, _Item, _Index)
//DB_LeaderLib_Combat_Temp_RandomEnemy(_CombatID, _Ally, _Enemy, _Index)
KBSECTION
//REGION CLEAR
PROC
LeaderLib_Combat_Clear_CombatData((INTEGER)_CombatID)
AND
DB_LeaderLib_Combat_ActiveCombat(_CombatID)
THEN
NOT DB_LeaderLib_Combat_ActiveCombat(_CombatID);

PROC
LeaderLib_Combat_Clear_CombatData((INTEGER)_CombatID)
AND
DB_LeaderLib_Combat_ActiveObject(_CombatID, _Object)
THEN
NOT DB_LeaderLib_Combat_ActiveObject(_CombatID, _Object);

PROC
LeaderLib_Combat_Clear_CombatData((INTEGER)_CombatID)
AND
DB_LeaderLib_Combat_DeadObjects(_CombatID, _Object)
THEN
NOT DB_LeaderLib_Combat_DeadObjects(_CombatID, _Object);

PROC
LeaderLib_Combat_Clear_CombatData((INTEGER)_CombatID)
AND
DB_LeaderLib_Combat_Casualties(_CombatID, _Victim, _AttackOwner)
THEN
NOT DB_LeaderLib_Combat_Casualties(_CombatID, _Victim, _AttackOwner);
//END_REGION

//REGION COMBAT_TRACKING
//For immediately reacting to a combat setting up
IF
ObjectEnteredCombat(_Object, _CombatID)
AND
NOT DB_LeaderLib_Combat_ActiveCombat(_CombatID)
AND
GetPosition(_Object, _x, _y, _z)
THEN
DB_LeaderLib_Combat_ActiveCombat(_CombatID);
DB_LeaderLib_Combat_ActiveCombatPosition(_CombatID, _x, _y, _z);

//Fires after objects enter combat
IF
CombatStarted(_CombatID)
AND
NOT DB_LeaderLib_Combat_ActiveCombat(_CombatID)
THEN
DB_LeaderLib_Combat_ActiveCombat(_CombatID);

IF
CombatEnded(_CombatID)
AND
DB_LeaderLib_Combat_ActiveCombat(_CombatID)
THEN
NOT DB_LeaderLib_Combat_ActiveCombat(_CombatID);

IF
CombatEnded(_CombatID)
AND
DB_LeaderLib_Combat_ActiveCombatPosition(_CombatID, _x, _y, _z)
THEN
NOT DB_LeaderLib_Combat_ActiveCombatPosition(_CombatID, _x, _y, _z);

IF
ObjectLeftCombat(_Object, _CombatID)
THEN
LeaderLib_Combat_Clear_ActiveTurn(_CombatID, _Object);
//END_REGION

//REGION COMBAT_ROUNDS
IF
CombatRoundStarted(_CombatID, _CurrentRound)
AND
DB_LeaderLib_Combat_Rounds(_CombatID, _LastRound, _LastTotalRounds)
AND
IntegerSum(_LastTotalRounds, 1, _TotalRounds)
THEN
NOT DB_LeaderLib_Combat_Rounds(_CombatID, _LastRound, _LastTotalRounds);
DB_LeaderLib_Combat_Rounds(_CombatID, _CurrentRound, _TotalRounds);

IF
CombatRoundStarted(_CombatID, _CurrentRound)
AND
NOT DB_LeaderLib_Combat_Rounds(_CombatID, _, _)
THEN
DB_LeaderLib_Combat_Rounds(_CombatID, _CurrentRound, 1);

IF
CombatEnded(_CombatID)
AND
DB_LeaderLib_Combat_Rounds(_CombatID, _CurrentRound, _TotalRounds)
THEN
NOT DB_LeaderLib_Combat_Rounds(_CombatID, _CurrentRound, _TotalRounds);
LeaderLib_Combat_OnCombatEnded(_CombatID, _TotalRounds);

PROC
LeaderLib_Combat_OnCombatEnded((INTEGER)_CombatID, (INTEGER)_TotalRounds)
THEN
DB_NOOP(1);
//END_REGION

//REGION TURN_TRACKING
IF
ObjectTurnStarted(_Object)
AND
DB_CombatObjects(_Object, _CombatID)
THEN
LeaderLib_Combat_Set_ActiveTurn(_CombatID, _Object);

IF
ObjectTurnEnded(_Object)
AND
DB_CombatObjects(_Object, _CombatID)
THEN
LeaderLib_Combat_Clear_ActiveTurn(_CombatID, _Object);

PROC
LeaderLib_Combat_Set_ActiveTurn((INTEGER)_CombatID, (GUIDSTRING)_Object)
AND
DB_LeaderLib_Combat_ActiveObject(_CombatID, _OtherObject)
AND
_OtherObject != _Object
THEN
NOT DB_LeaderLib_Combat_ActiveObject(_CombatID, _OtherObject);

PROC
LeaderLib_Combat_Set_ActiveTurn((INTEGER)_CombatID, (GUIDSTRING)_Object)
THEN
DB_LeaderLib_Combat_ActiveObject(_CombatID, _Object);

PROC
LeaderLib_Combat_Clear_ActiveTurn((INTEGER)_CombatID, (GUIDSTRING)_Object)
AND
DB_LeaderLib_Combat_ActiveObject(_CombatID, _Object)
THEN
NOT DB_LeaderLib_Combat_ActiveObject(_CombatID, _Object);
//END_REGION

//REGION THE_BIG_SLEEP(CASUALTIES)
PROC
LeaderLib_Combat_AddCasualty((INTEGER)_CombatID, (GUIDSTRING)_Victim, (CHARACTERGUID)_AttackOwner)
THEN
DB_LeaderLib_Combat_Casualties(_CombatID, _Victim, _AttackOwner);
//END_REGION

//REGION QUERIES
QRY
LeaderLib_Combat_QRY_HasAliveEnemies((CHARACTERGUID)_Character)
AND
DB_CombatCharacters(_Object, _CombatID)
AND
_Object != _Character
AND
CharacterIsEnemy(_Object, _Character, 1)
AND
CharacterIsDead(_Object, 0)
THEN
DB_NOOP(1);

QRY
LeaderLib_Combat_QRY_IsActiveTurn((CHARACTERGUID)_Character)
AND
CharacterIsInCombat(_Character, 1)
AND
DB_LeaderLib_Combat_ActiveObject(_CombatID, _Character)
THEN
DB_NOOP(1);

QRY
LeaderLib_Combat_QRY_IsEnemy((CHARACTERGUID)_Character, (GUIDSTRING)_Target)
AND
LeaderLib_Combat_QRY_IsEnemy(_Character, _Target, 0)
THEN
DB_NOOP(1);

QRY
LeaderLib_Combat_QRY_IsEnemy((CHARACTERGUID)_Character, (GUIDSTRING)_Target, (INTEGER)_IncludeItems)
AND
ObjectIsCharacter((CHARACTERGUID)_Target, 1)
AND
CharacterIsEnemy(_Character, _Target, _a)
AND
IsTagged(_Target, "LeaderLib_FriendlyFireEnabled", _b)
AND
IntegerSum(_a, _b, _c)
AND
_c > 0
THEN
DB_NOOP(1);

QRY
LeaderLib_Combat_QRY_IsEnemy((CHARACTERGUID)_Character, (GUIDSTRING)_Target, 1)
AND
ObjectIsItem((ITEMGUID)_Target, 1)
AND
ItemIsDestructible(_Target, 1)
THEN
DB_NOOP(1);

QRY
LeaderLib_Combat_QRY_DistanceToCombatIsLessThan((INTEGER)_CombatID, (REAL)_x, (REAL)_y, (REAL)_z, (REAL)_MinDist)
AND
DB_CombatObjects(_Object, _CombatID)
AND
GetDistanceToPosition(_Object, _x, _y, _z, _Dist)
AND
_Dist < _MinDist
THEN
DB_NOOP(1);

QRY
LeaderLib_Combat_QRY_IsNearCombat((GUIDSTRING)_Object, (INTEGER)_CombatID, (REAL)_MinDist)
AND
DB_CombatObjects(_OtherObject, _CombatID)
AND
GetDistanceTo(_Object, _OtherObject, _Dist)
AND
_Dist < _MinDist
THEN
DB_NOOP(1);

QRY
LeaderLib_Combat_QRY_HasInvolvedPlayer((INTEGER)_CombatID)
AND
DB_CombatCharacters(_Char, _CombatID)
AND
DB_IsPlayer(_Char)
THEN
DB_NOOP(1);

QRY
LeaderLib_Combat_QRY_AnyPlayerIsInCombat()
AND
DB_IsPlayer(_Char)
AND
CharacterIsInCombat(_Char, 1)
THEN
DB_NOOP(1);
//END_REGION

//REGION RANDOM
QRY
LeaderLib_Combat_QRY_GetRandomEnemy((CHARACTERGUID)_Char, (INTEGER)_CombatID)
THEN
LeaderLib_Combat_GetRandomEnemy(_Char, _CombatID, -1, -1.0);

QRY
LeaderLib_Combat_QRY_GetRandomEnemy((CHARACTERGUID)_Char, (INTEGER)_CombatID, (INTEGER)_IsDead)
THEN
LeaderLib_Combat_GetRandomEnemy(_Char, _CombatID, _IsDead, -1.0);

QRY
LeaderLib_Combat_QRY_GetRandomEnemy((CHARACTERGUID)_Char, (INTEGER)_CombatID, (INTEGER)_IsDead, (REAL)_MaxDistance)
THEN
LeaderLib_Combat_GetRandomEnemy(_Char, _CombatID, _IsDead, _MaxDistance);

PROC
LeaderLib_Combat_GetRandomEnemy((CHARACTERGUID)_Char, (INTEGER)_CombatID)
THEN
LeaderLib_Combat_GetRandomEnemy(_Char, _CombatID, -1, -1.0);

PROC
LeaderLib_Combat_GetRandomEnemy((CHARACTERGUID)_Char, (INTEGER)_CombatID, (INTEGER)_IsDead)
THEN
LeaderLib_Combat_GetRandomEnemy(_Char, _CombatID, _IsDead, -1.0);

PROC
LeaderLib_Combat_GetRandomEnemy((CHARACTERGUID)_Char, (INTEGER)_CombatID, (INTEGER)_IsDead, (REAL)_MaxDistance)
THEN
LeaderLib_Combat_ClearRandomCharacterData(_CombatID);

PROC
LeaderLib_Combat_GetRandomEnemy((CHARACTERGUID)_Char, (INTEGER)_CombatID, (INTEGER)_IsDead, (REAL)_MaxDistance)
AND
DB_CombatCharacters(_Enemy, _CombatID)
AND
_Enemy != _Char
AND
CharacterIsEnemy(_Char, _Enemy, 1)
AND
CharacterIsDead(_Enemy, _CharIsDead)
AND
LeaderLib_Math_QRY_IsEqualToAny(_IsDead, _CharIsDead, -1) // Either match _CharIsDead or ignore if -1
AND
LeaderLib_Helper_QRY_DistanceWithin(_Char, _Enemy, _MaxDistance)
THEN
LeaderLib_Combat_Internal_AddToCharacterList(_Enemy, _CombatID);

PROC
LeaderLib_Combat_GetRandomEnemy((CHARACTERGUID)_Char, (INTEGER)_CombatID, (INTEGER)_IsDead, (REAL)_MaxDistance)
AND
DB_LeaderLib_Combat_Temp_ListTotal("Character", _CombatID, _Total)
AND
IntegerSubtract(_Total, 1, _LastIndex)
AND
LeaderLib_Random_QRY(0, _LastIndex)
AND
DB_LeaderLib_Random(_Index)
AND
DB_LeaderLib_Combat_Temp_CharacterCombatList(_Index, _Enemy, _CombatID)
THEN
DB_LeaderLib_Combat_Temp_RandomEnemy(_CombatID, _Char, _Enemy, _Index);
NOT DB_LeaderLib_Random(_Index);

QRY
LeaderLib_Combat_QRY_GetRandomCharacter((INTEGER)_CombatID)
THEN
LeaderLib_Combat_GetRandomCharacter(_CombatID, -1);

QRY
LeaderLib_Combat_QRY_GetRandomCharacter((INTEGER)_CombatID, (INTEGER)_IsDead)
THEN
LeaderLib_Combat_GetRandomCharacter(_CombatID, _IsDead);

PROC
LeaderLib_Combat_GetRandomCharacter((INTEGER)_CombatID)
THEN
LeaderLib_Combat_GetRandomCharacter(_CombatID, -1);

PROC
LeaderLib_Combat_GetRandomCharacter((INTEGER)_CombatID, (INTEGER)_IsDead)
THEN
LeaderLib_Combat_ClearRandomCharacterData(_CombatID);

PROC
LeaderLib_Combat_GetRandomCharacter((INTEGER)_CombatID, (INTEGER)_IsDead)
AND
DB_CombatCharacters(_Character, _CombatID)
AND
CharacterIsDead(_Character, _CharIsDead)
AND
LeaderLib_Math_QRY_IsEqualToAny(_IsDead, _CharIsDead, -1) // Either match _CharIsDead or ignore if -1
THEN
LeaderLib_Combat_Internal_AddToCharacterList(_Character, _CombatID);

PROC
LeaderLib_Combat_GetRandomCharacter((INTEGER)_CombatID, (INTEGER)_IsDead)
AND
DB_LeaderLib_Combat_Temp_ListTotal("Character", _CombatID, _Total)
AND
IntegerSubtract(_Total, 1, _LastIndex)
AND
LeaderLib_Random_QRY(0, _LastIndex)
AND
DB_LeaderLib_Random(_Index)
AND
DB_LeaderLib_Combat_Temp_CharacterCombatList(_Index, _Character, _CombatID)
THEN
DB_LeaderLib_Combat_Temp_RandomCharacter(_CombatID, _Character, _Index);
NOT DB_LeaderLib_Random(_Index);

QRY
LeaderLib_Combat_QRY_GetRandomItem((INTEGER)_CombatID)
THEN
LeaderLib_Combat_GetRandomItem(_CombatID);

PROC
LeaderLib_Combat_GetRandomItem((INTEGER)_CombatID)
THEN
LeaderLib_Combat_ClearRandomItemData(_CombatID);

PROC
LeaderLib_Combat_GetRandomItem((INTEGER)_CombatID)
AND
DB_CombatObjects(_Object, _CombatID)
AND
ObjectIsItem((ITEMGUID)_Object, 1)
THEN
LeaderLib_Combat_Internal_AddToItemList(_Object, _CombatID);

PROC
LeaderLib_Combat_GetRandomItem((INTEGER)_CombatID)
AND
DB_LeaderLib_Combat_Temp_ListTotal("Item", _CombatID, _Total)
AND
IntegerSubtract(_Total, 1, _LastIndex)
AND
LeaderLib_Random_QRY(0, _LastIndex)
AND
DB_LeaderLib_Random(_Index)
AND
DB_LeaderLib_Combat_Temp_ItemCombatList(_Index, _Item, _CombatID)
THEN
NOT DB_LeaderLib_Random(_Index);
DB_LeaderLib_Combat_Temp_RandomItem(_CombatID, _Item, _Index);

QRY
LeaderLib_Combat_QRY_GetRandomObject((INTEGER)_CombatID)
THEN
LeaderLib_Combat_GetRandomObject(_CombatID);

PROC
LeaderLib_Combat_GetRandomObject((INTEGER)_CombatID)
THEN
LeaderLib_Combat_ClearRandomObjectData(_CombatID);

PROC
LeaderLib_Combat_GetRandomObject((INTEGER)_CombatID)
AND
DB_CombatObjects(_Object, _CombatID)
THEN
LeaderLib_Combat_Internal_AddToObjectList(_Object, _CombatID);

PROC
LeaderLib_Combat_GetRandomObject((CHARACTERGUID)_Ally, (INTEGER)_CombatID)
AND
DB_LeaderLib_Combat_Temp_ListTotal("Object", _CombatID, _Total)
AND
IntegerSubtract(_Total, 1, _LastIndex)
AND
LeaderLib_Random_QRY(0, _LastIndex)
AND
DB_LeaderLib_Random(_Index)
AND
DB_LeaderLib_Combat_Temp_ObjectCombatList(_Index, _Object, _CombatID)
THEN
DB_LeaderLib_Combat_Temp_RandomObject(_CombatID, _Object, _Index);
NOT DB_LeaderLib_Random(_Index);
//END_REGION

//REGION CHARACTER_LIST
PROC
LeaderLib_Combat_ClearRandomCharacterData((INTEGER)_CombatID)
AND
DB_LeaderLib_Combat_Temp_ListTotal("Character", _CombatID, _Total)
THEN
NOT DB_LeaderLib_Combat_Temp_ListTotal("Character", _CombatID, _Total);

PROC
LeaderLib_Combat_ClearRandomCharacterData((INTEGER)_CombatID)
AND
DB_LeaderLib_Combat_Temp_RandomCharacter(_CombatID, _Character, _Index)
THEN
NOT DB_LeaderLib_Combat_Temp_RandomCharacter(_CombatID, _Character, _Index);

PROC
LeaderLib_Combat_ClearRandomCharacterData((INTEGER)_CombatID)
AND
DB_LeaderLib_Combat_Temp_RandomEnemy(_CombatID, _Ally, _Enemy, _Index)
THEN
NOT DB_LeaderLib_Combat_Temp_RandomEnemy(_CombatID, _Ally, _Enemy, _Index);

PROC
LeaderLib_Combat_ClearRandomCharacterData((INTEGER)_CombatID)
AND
DB_LeaderLib_Combat_Temp_CharacterCombatList(_Total, _Character, _CombatID)
THEN
NOT DB_LeaderLib_Combat_Temp_CharacterCombatList(_Total, _Character, _CombatID);

PROC
LeaderLib_Combat_Internal_AddToCharacterList((CHARACTERGUID)_Character, (INTEGER)_CombatID)
AND
NOT DB_LeaderLib_Combat_Temp_ListTotal("Character", _CombatID, _)
THEN
DB_LeaderLib_Combat_Temp_ListTotal("Character", _CombatID, 0);

PROC
LeaderLib_Combat_Internal_AddToCharacterList((CHARACTERGUID)_Character, (INTEGER)_CombatID)
AND
DB_LeaderLib_Combat_Temp_ListTotal("Character", _CombatID, _Total)
AND
IntegerSum(_Total, 1, _NextTotal)
THEN
NOT DB_LeaderLib_Combat_Temp_ListTotal("Character", _CombatID, _Total);
DB_LeaderLib_Combat_Temp_ListTotal("Character", _CombatID, _NextTotal);
DB_LeaderLib_Combat_Temp_CharacterCombatList(_Total, _Character, _CombatID);
//END_REGION

//REGION ITEM_LIST
PROC
LeaderLib_Combat_ClearRandomItemData((INTEGER)_CombatID)
AND
DB_LeaderLib_Combat_Temp_ListTotal("Item", _CombatID, _Total)
THEN
NOT DB_LeaderLib_Combat_Temp_ListTotal("Item", _CombatID, _Total);

PROC
LeaderLib_Combat_ClearRandomItemData((INTEGER)_CombatID)
AND
DB_LeaderLib_Combat_Temp_ItemCombatList(_Index, _Item, _CombatID)
THEN
NOT DB_LeaderLib_Combat_Temp_ItemCombatList(_Index, _Item, _CombatID);

PROC
LeaderLib_Combat_ClearRandomItemData((INTEGER)_CombatID)
AND
DB_LeaderLib_Combat_Temp_RandomItem(_CombatID, _Item, _Index)
THEN
NOT DB_LeaderLib_Combat_Temp_RandomItem(_CombatID, _Item, _Index);

PROC
LeaderLib_Combat_Internal_AddToItemList((ITEMGUID)_Item, (INTEGER)_CombatID)
AND
NOT DB_LeaderLib_Combat_Temp_ListTotal("Item", _CombatID, _)
THEN
DB_LeaderLib_Combat_Temp_ListTotal("Item", _CombatID, 0);

PROC
LeaderLib_Combat_Internal_AddToItemList((ITEMGUID)_Item, (INTEGER)_CombatID)
AND
DB_LeaderLib_Combat_Temp_ListTotal("Item", _CombatID, _Total)
AND
IntegerSum(_Total, 1, _NextTotal)
THEN
NOT DB_LeaderLib_Combat_Temp_ListTotal("Item", _CombatID, _Total);
DB_LeaderLib_Combat_Temp_ListTotal("Item", _CombatID, _NextTotal);
DB_LeaderLib_Combat_Temp_ItemCombatList(_Total, _Item, _CombatID);
//END_REGION

//REGION OBJECT_LIST
PROC
LeaderLib_Combat_ClearRandomObjectData((INTEGER)_CombatID)
AND
DB_LeaderLib_Combat_Temp_RandomObject(_CombatID, _Object, _Index)
THEN
NOT DB_LeaderLib_Combat_Temp_RandomObject(_CombatID, _Object, _Index);

PROC
LeaderLib_Combat_ClearRandomObjectData((INTEGER)_CombatID)
AND
DB_LeaderLib_Combat_Temp_ListTotal("Object", _CombatID, _Total)
THEN
NOT DB_LeaderLib_Combat_Temp_ListTotal("Object", _CombatID, _Total);

PROC
LeaderLib_Combat_ClearRandomObjectData((INTEGER)_CombatID)
AND
DB_LeaderLib_Combat_Temp_ObjectCombatList(_CombatID, _Object, _Index)
THEN
NOT DB_LeaderLib_Combat_Temp_ObjectCombatList(_CombatID, _Object, _Index);

PROC
LeaderLib_Combat_Internal_AddToObjectList((GUIDSTRING)_Object, (INTEGER)_CombatID)
AND
NOT DB_LeaderLib_Combat_Temp_ListTotal("Object", _CombatID, _)
THEN
DB_LeaderLib_Combat_Temp_ListTotal("Object", _CombatID, 0);

PROC
LeaderLib_Combat_Internal_AddToObjectList((GUIDSTRING)_Object, (INTEGER)_CombatID)
AND
DB_LeaderLib_Combat_Temp_ListTotal("Object", _CombatID, _Total)
AND
IntegerSum(_Total, 1, _NextTotal)
THEN
NOT DB_LeaderLib_Combat_Temp_ListTotal("Object", _CombatID, _Total);
DB_LeaderLib_Combat_Temp_ListTotal("Object", _CombatID, _NextTotal);
DB_LeaderLib_Combat_Temp_ObjectCombatList(_Total, _Object, _CombatID);
//END_REGION

//REGION COMBAT_LIST_DATA_CLEAR
PROC
LeaderLib_Combat_Clear_CombatData((INTEGER)_CombatID)
THEN
LeaderLib_Combat_ClearRandomItemData(_CombatID);
LeaderLib_Combat_ClearRandomCharacterData(_CombatID);
LeaderLib_Combat_ClearRandomObjectData(_CombatID);
//END_REGION

//REGION FRIENDLY_FIRE
IF
GlobalFlagSet("LeaderLib_FriendlyFireEnabled")
THEN
CharacterLaunchOsirisOnlyIterator("LeaderLib_SetFriendlyFireTag");

IF
StoryEvent((CHARACTERGUID)_Character, "LeaderLib_SetFriendlyFireTag")
THEN
SetTag(_Character, "LeaderLib_FriendlyFireEnabled");

IF
GlobalFlagCleared("LeaderLib_FriendlyFireEnabled")
THEN
CharacterLaunchOsirisOnlyIterator("LeaderLib_ClearFriendlyFireTag");

IF
StoryEvent((CHARACTERGUID)_Character, "LeaderLib_ClearFriendlyFireTag")
THEN
ClearTag(_Character, "LeaderLib_FriendlyFireEnabled");

//For summons/etc which may enter battle later
IF
DB_CombatCharacters(_Character, _CombatID)
AND
DB_GlobalFlag("LeaderLib_FriendlyFireEnabled")
THEN
SetTag(_Character, "LeaderLib_FriendlyFireEnabled");

//END_REGION

//REGION CLEANUP
//Cleanup past data
PROC
LeaderUpdater_ModUpdated("LeaderLib", "LaughingLeader", (STRING)_PastVersion, (STRING)_NewVersion)
AND
LeaderLib_StringExt_QRY_VersionIsLessThan(_PastVersion, 1, 0, 2, 0)
THEN
SysClear("DB_LeaderLib_Combat_Casualties", 3);
//Deprecated
SysClear("DB_LeaderLib_Combat_PastCombat", 1);
SysClear("DB_LeaderLib_Combat_Objects", 2); // Use DB_CombatObjects instead.

IF
CombatEnded(_CombatID)
THEN
LeaderLib_Combat_Clear_CombatData(_CombatID);

//END_REGION
EXITSECTION

ENDEXITSECTION
ParentTargetEdge "LaughingLeader__LeaderLib"
