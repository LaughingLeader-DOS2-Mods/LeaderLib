Version 1
SubGoalCombiner SGC_AND
INITSECTION
//DB_LeaderLib_Skills_StatusToggleSkills(_Skill, _Status, _Duration, _Force)
KBSECTION

/* If a permanent status is registered, and a skill is registered to toggle it, 
the flag set in the permanent status will be set/cleared automatically when the skill is used.
*/
//REGION TOGGLE_STATUS_SKILL
PROC
LeaderLib_Skills_Register_StatusToggleSkill((STRING)_Skill, (STRING)_Status)
THEN
LeaderLib_Skills_Register_StatusToggleSkill(_Skill, _Status, -1.0, 1, 0);

PROC
LeaderLib_Skills_Register_StatusToggleSkill((STRING)_Skill, (STRING)_Status, (REAL)_Duration)
THEN
LeaderLib_Skills_Register_StatusToggleSkill(_Skill, _Status, _Duration, 1, 0);

PROC
LeaderLib_Skills_Register_StatusToggleSkill((STRING)_Skill, (STRING)_Status, (REAL)_Duration, (INTEGER)_Force)
THEN
LeaderLib_Skills_Register_StatusToggleSkill(_Skill, _Status, _Duration, _Force, 0);

// _Skill - The skill to listen for.
// _Status - The status to apply.
// _Duration - The duration to apply the status for.
// _Force - Whether to force the status to apply.
// _OnUse - If 1, the status is toggled via CharacterUsedSkill. If 0, SkillCast.
PROC
LeaderLib_Skills_Register_StatusToggleSkill((STRING)_Skill, (STRING)_Status, (REAL)_Duration, (INTEGER)_Force, (INTEGER)_OnUse)
AND
DB_LeaderLib_Skills_StatusToggleSkills(_Skill, _Status, _OtherDuration, _OtherForce, _OtherOnUse)
THEN
NOT DB_LeaderLib_Skills_StatusToggleSkills(_Skill, _Status, _OtherDuration, _OtherForce, _OtherOnUse);

PROC
LeaderLib_Skills_Register_StatusToggleSkill((STRING)_Skill, (STRING)_Status, (REAL)_Duration, (INTEGER)_Force, (INTEGER)_OnUse)
THEN
DB_LeaderLib_Skills_StatusToggleSkills(_Skill, _Status, _Duration, _Force, _OnUse);

PROC
LeaderLib_Skills_Register_StatusToggleSkill((STRING)_Skill, (STRING)_Status, (REAL)_Duration, (INTEGER)_Force, (INTEGER)_OnUse)
AND
NOT DB_LeaderLib_ToggleScripts_Temp_ActiveScripts("LeaderLib_StatusEvents_ToggleSkillsEnabled", "LeaderLib")
THEN
LeaderLib_ToggleScripts_EnableScript("LeaderLib_StatusEvents_ToggleSkillsEnabled", "LeaderLib");

PROC
LeaderLib_Skills_BlockStatusToggle((CHARACTERGUID)_Character, (STRING)_Skill, (STRING)_Status)
THEN
DB_NOOP(1);

PROC
LeaderLib_Skills_Internal_ProcessStatusToggle((CHARACTERGUID)_Character, (STRING)_Skill, (STRING)_Status, (REAL)_Duration, (INTEGER)_Force)
AND
NOT DB_LeaderLib_Skills_BlockStatusToggle(_Character, _Skill, _Status)
AND
NOT DB_LeaderLib_Skills_Temp_JustToggledSkillStatus(_Character, _Skill)
AND
HasActiveStatus(_Character, _Status, 0)
THEN
ApplyStatus(_Character, _Status, _Duration, 1, _Character);
LeaderLib_Skills_OnStatusToggleApplied(_Character, _Skill, _Status);
DB_LeaderLib_Skills_Temp_JustToggledSkillStatus(_Character, _Skill);

PROC
LeaderLib_Skills_OnStatusToggleApplied((CHARACTERGUID)_Character, (STRING)_Skill, (STRING)_Status)
AND
DB_LeaderLib_Statuses_PermanentStatus(_ModID, _Group, _Status, _Flag)
THEN
ObjectSetFlag(_Character, _Flag, 0);

PROC
LeaderLib_Skills_Internal_ProcessStatusToggle((CHARACTERGUID)_Character, (STRING)_Skill, (STRING)_Status, (REAL)_Duration, (INTEGER)_Force)
AND
NOT DB_LeaderLib_Skills_BlockStatusToggle(_Character, _Skill, _Status)
AND
NOT DB_LeaderLib_Skills_Temp_JustToggledSkillStatus(_Character, _Skill)
AND
HasActiveStatus(_Character, _Status, 1)
THEN
RemoveStatus(_Character, _Status);
LeaderLib_Skills_OnStatusToggleRemoved(_Character, _Skill, _Status);
DB_LeaderLib_Skills_Temp_JustToggledSkillStatus(_Character, _Skill);

PROC
LeaderLib_Skills_OnStatusToggleRemoved((CHARACTERGUID)_Character, (STRING)_Skill, (STRING)_Status)
AND
DB_LeaderLib_Statuses_PermanentStatus(_ModID, _Group, _Status, _Flag)
THEN
ObjectClearFlag(_Character, _Flag, 0);

//Clear
PROC
LeaderLib_Skills_Internal_ProcessStatusToggle((CHARACTERGUID)_Character, (STRING)_Skill, (STRING)_Status, (REAL)_Duration, (INTEGER)_Force)
AND
DB_LeaderLib_Skills_Temp_JustToggledSkillStatus(_Character, _Skill)
THEN
NOT DB_LeaderLib_Skills_Temp_JustToggledSkillStatus(_Character, _Skill);

PROC
LeaderLib_Skills_Internal_ProcessStatusToggle((CHARACTERGUID)_Character, (STRING)_Skill, (STRING)_Status, (REAL)_Duration, (INTEGER)_Force)
AND
DB_LeaderLib_Skills_BlockStatusToggle(_Character, _Skill, _Status)
THEN
NOT DB_LeaderLib_Skills_BlockStatusToggle(_Character, _Skill, _Status);
//END_REGION

//REGION USE_PROCS
PROC
LeaderLib_Skills_UseSkillOnTarget((CHARACTERGUID)_Caster, (GUIDSTRING)_Target, (STRING)_Skill, (INTEGER)_CopyStats, (INTEGER)_CopyEquipment)
AND
GetUUID(_Caster, _UUID)
AND
GetUUID(_Target, _UUID2)
AND
Random(999999, _Ran)
AND
IntegertoString(_Ran, _RanStr)
AND
LeaderLib_StringExt_QRY_SafeCombine("LeaderLib_SkillDummyID", _UUID, _UUID2, _RanStr)
AND
DB_LeaderLib_StringExt_CombineResult("LeaderLib_SkillDummyID", _ID)
AND
LeaderLib_Skills_QRY_PrepareSkillDummy(_ID, _Caster, _CopyStats, _CopyEquipment)
AND
DB_LeaderLib_Skills_SkillDummies(_ID, _Dummy)
AND
GetPosition(_Caster, _x, _y, _z)
THEN
NOT DB_LeaderLib_StringExt_CombineResult("LeaderLib_SkillDummyID", _ID);
//LeaderLog_Log("TRACE", "[LeaderLib:Skills:UseSkillOnTarget] Got dummy with ID [",_ID,"]. Casting [",_Skill,"] after teleport.");
DB_LeaderLib_Skills_Temp_SkillDummyData(_Dummy, _Caster, _Target, _Skill);
DB_LeaderLib_Skills_Temp_MoveDummyToPosition(_Dummy, _x, _y, _z);
TeleportToPosition(_Dummy, _x, _y, _z, "LeaderLib_Events_SkillDummyTeleported", 0, 0);

PROC
LeaderLib_Skills_UseSkillOnTargetFromPosition((CHARACTERGUID)_Caster, (GUIDSTRING)_Target, (STRING)_Skill, (REAL)_x, (REAL)_y, (REAL)_z, (INTEGER)_CopyStats, (INTEGER)_CopyEquipment)
AND
GetUUID(_Caster, _UUID)
AND
GetUUID(_Target, _UUID2)
AND
Random(999999, _Ran)
AND
IntegertoString(_Ran, _RanStr)
AND
LeaderLib_StringExt_QRY_SafeCombine("LeaderLib_SkillDummyID", _UUID, _UUID2, _RanStr)
AND
DB_LeaderLib_StringExt_CombineResult("LeaderLib_SkillDummyID", _ID)
AND
LeaderLib_Skills_QRY_PrepareSkillDummy(_ID, _Caster, _CopyStats, _CopyEquipment)
AND
DB_LeaderLib_Skills_SkillDummies(_ID, _Dummy)
THEN
NOT DB_LeaderLib_StringExt_CombineResult("LeaderLib_SkillDummyID", _ID);
DB_LeaderLib_Skills_Temp_SkillDummyData(_Dummy, _Caster, _Target, _Skill);
DB_LeaderLib_Skills_Temp_MoveDummyToPosition(_Dummy, _x, _y, _z);
LeaderLog_Log("TRACE", "[LeaderLib:Skills:UseSkillOnTargetFromPosition] Teleporting skill dummy for skill [",_Skill,"] to position. Dummy ID: [",_ID,"]");
TeleportToPosition(_Dummy, _x, _y, _z, "LeaderLib_Events_SkillDummyTeleported", 0, 0);

PROC
LeaderLib_Skills_UseSkillAtPosition((CHARACTERGUID)_Caster, (REAL)_x, (REAL)_y, (REAL)_z, (STRING)_Skill, (INTEGER)_CopyStats, (INTEGER)_CopyEquipment)
AND
GetUUID(_Caster, _UUID)
AND
Random(999999, _Ran)
AND
IntegertoString(_Ran, _RanStr)
AND
LeaderLib_StringExt_QRY_SafeCombine("LeaderLib_SkillDummyID", _UUID, _RanStr)
AND
DB_LeaderLib_StringExt_CombineResult("LeaderLib_SkillDummyID", _ID)
AND
LeaderLib_Skills_QRY_PrepareSkillDummy(_ID, _Caster, _CopyStats, _CopyEquipment)
AND
DB_LeaderLib_Skills_SkillDummies(_ID, _Dummy)
THEN
NOT DB_LeaderLib_StringExt_CombineResult("LeaderLib_SkillDummyID", _ID);
//LeaderLog_Log("TRACE", "[LeaderLib:Skills:UseSkillOnTarget] Got dummy with ID [",_ID,"]. Casting [",_Skill,"] after teleport.");
DB_LeaderLib_Skills_Temp_SkillDummyData(_Dummy, _Caster, _x, _y, _z, _Skill);
DB_LeaderLib_Skills_Temp_MoveDummyToPosition(_Dummy, _x, _y, _z);
TeleportToPosition(_Dummy, _x, _y, _z, "LeaderLib_Events_SkillDummyTeleported", 0, 0);

PROC
LeaderLib_Skills_UseShoutFromPosition((CHARACTERGUID)_Caster, (STRING)_Skill, (REAL)_x, (REAL)_y, (REAL)_z, (INTEGER)_CopyStats, (INTEGER)_CopyEquipment)
AND
GetUUID(_Caster, _UUID)
AND
Random(999999, _Ran)
AND
IntegertoString(_Ran, _RanStr)
AND
LeaderLib_StringExt_QRY_SafeCombine("LeaderLib_SkillDummyID", _UUID, _RanStr)
AND
DB_LeaderLib_StringExt_CombineResult("LeaderLib_SkillDummyID", _ID)
AND
LeaderLib_Skills_QRY_PrepareSkillDummy(_ID, _Caster, _CopyStats, _CopyEquipment)
AND
DB_LeaderLib_Skills_SkillDummies(_ID, _Dummy)
THEN
NOT DB_LeaderLib_StringExt_CombineResult("LeaderLib_SkillDummyID", _ID);
DB_LeaderLib_Skills_Temp_SkillDummyData(_Dummy, _Caster, _Dummy, _Skill);
DB_LeaderLib_Skills_Temp_MoveDummyToPosition(_Dummy, _x, _y, _z);
LeaderLog_Log("TRACE", "[LeaderLib:Skills:UseShoutFromPosition] Teleporting skill dummy for skill [",_Skill,"] to position. Dummy ID: [",_ID,"]");
TeleportToPosition(_Dummy, _x, _y, _z, "LeaderLib_Events_SkillDummyTeleported", 0, 0);
//END_REGION

//REGION SKILL_DUMMIES
IF
StoryEvent((CHARACTERGUID)_Dummy, "LeaderLib_Events_SkillDummyTeleported")
AND
DB_LeaderLib_Skills_Temp_MoveDummyToPosition(_Dummy, _x, _y, _z)
THEN
NOT DB_LeaderLib_Skills_Temp_MoveDummyToPosition(_Dummy, _x, _y, _z);
LeaderLog_Log("TRACE", "[LeaderLib:Skills:SkillDummyTeleported] Skill dummy teleported to position. Moving to position as a failsafe.");
CharacterMoveToPosition(_Dummy, _x, _y, _z, 1, "LeaderLib_Events_SkillDummyArrived");

//Failsafe
IF
StoryEvent((CHARACTERGUID)_Dummy, "LeaderLib_Events_SkillDummyTeleported")
THEN
LeaderLib_Timers_StartObjectTimer(_Dummy, 1000, "LeaderLib_Timers_Skills_StartSkillDummyCasting", "LeaderLib_Events_SkillDummyArrived");

IF
StoryEvent((CHARACTERGUID)_Dummy, "LeaderLib_Events_SkillDummyArrived")
AND
DB_LeaderLib_Skills_Temp_SkillDummyData(_Dummy, _Caster, _Target, _Skill)
THEN
LeaderLog_Log("TRACE", "[LeaderLib:Skills:SkillDummyTeleported] Skill dummy for skill [",_Skill,"] teleported to position. Moving to position as a failsafe.");

IF
StoryEvent((CHARACTERGUID)_Dummy, "LeaderLib_Events_SkillDummyArrived")
AND
DB_LeaderLib_Skills_Temp_SkillDummyData(_Dummy, _Caster, _Target, _Skill)
AND
ObjectIsCharacter(_Target, 1)
THEN
MakeWar(_Dummy, (CHARACTERGUID)_Target, 0);

IF
StoryEvent((CHARACTERGUID)_Dummy, "LeaderLib_Events_SkillDummyArrived")
AND
DB_LeaderLib_Skills_Temp_SkillDummyData(_Dummy, _Caster, _Target, _Skill)
THEN
NOT DB_LeaderLib_Skills_Temp_SkillDummyData(_Dummy, _Caster, _Target, _Skill);
LeaderLog_Log("TRACE", "[LeaderLib:Skills:SkillDummyArrived] Skill dummy is using skill [",_Skill,"] on target.");
LeaderLib_Timers_CancelObjectTimer(_Dummy, "LeaderLib_Timers_Skills_StartSkillDummyCasting");
//CharacterSetDetached(_Dummy, 0);
//SetVisible(_Dummy, 1);
DB_LeaderLib_Skills_Temp_ListenForTargetCast(_Dummy, _Caster, _Target, _Skill);
CharacterUseSkill(_Dummy, _Skill, _Target, 1, 1, 1);
LeaderLib_Skills_MarkDummyForReset(_Dummy, 3000);

IF
CharacterUsedSkillOnTarget(_Dummy, _Target, _Skill, _Skilltype, _SkillElement)
AND
DB_LeaderLib_Skills_Temp_ListenForTargetCast(_Dummy, _Caster, _, _Skill)
AND
GetPosition(_Target, _x, _y, _z)
THEN
LeaderLib_Skills_OnDummyUsedSkillOnTarget(_Dummy, _Caster, _Skill, _Target, _Skilltype, _SkillElement);
LeaderLib_Skills_OnDummyUsedSkillAtPosition(_Dummy, _Caster, _Skill, _x, _y, _z, _Skilltype, _SkillElement);

PROC
LeaderLib_Skills_OnDummyUsedSkillOnTarget((CHARACTERGUID)_Dummy, (CHARACTERGUID)_Caster, (STRING)_Skill, (GUIDSTRING)_Target, (STRING)_Skilltype, (STRING)_SkillElement)
THEN
DB_NOOP(1);

IF
SkillCast(_Dummy, _Skill, _Skilltype, _SkillElement)
AND
DB_LeaderLib_Skills_Temp_ListenForTargetCast(_Dummy, _Caster, _Target, _Skill)
AND
GetPosition(_Target, _x, _y, _z)
THEN
NOT DB_LeaderLib_Skills_Temp_ListenForTargetCast(_Dummy, _Caster, _Target, _Skill);
LeaderLib_Skills_OnDummyCastSkillOnTarget(_Dummy, _Caster, _Skill, _Target, _Skilltype, _SkillElement);
LeaderLib_Skills_OnDummyCastSkillAtPosition(_Dummy, _Caster, _Skill, _x, _y, _z, _Skilltype, _SkillElement);

PROC
LeaderLib_Skills_OnDummyCastSkillOnTarget((CHARACTERGUID)_Dummy, (CHARACTERGUID)_Caster, (STRING)_Skill, (GUIDSTRING)_Target, (STRING)_Skilltype, (STRING)_SkillElement)
THEN
DB_NOOP(1);

IF
StoryEvent((CHARACTERGUID)_Dummy, "LeaderLib_Events_SkillDummyArrived")
AND
DB_LeaderLib_Skills_Temp_SkillDummyData(_Dummy, _Caster, _x, _y, _z, _Skill)
THEN
NOT DB_LeaderLib_Skills_Temp_SkillDummyData(_Dummy, _Caster, _x, _y, _z, _Skill);
LeaderLog_Log("TRACE", "[LeaderLib:Skills:SkillDummyArrived] Skill dummy is using skill [",_Skill,"] at position.");
LeaderLib_Timers_CancelObjectTimer(_Dummy, "LeaderLib_Timers_Skills_StartSkillDummyCasting");
DB_LeaderLib_Skills_Temp_ListenForPositionCast(_Dummy, _Caster, _x, _y, _z, _Skill);
CharacterUseSkillAtPosition(_Dummy, _Skill, _x, _y, _z, 1, 1);
LeaderLib_Skills_MarkDummyForReset(_Dummy, 3000);

IF
CharacterUsedSkillAtPosition(_Dummy, _x, _y, _z, _Skill, _Skilltype, _SkillElement)
AND
DB_LeaderLib_Skills_Temp_ListenForPositionCast(_Dummy, _Caster, _, _, _, _Skill)
THEN
LeaderLib_Skills_OnDummyUsedSkillAtPosition(_Dummy, _Caster, _Skill, _x, _y, _z, _Skilltype, _SkillElement);

PROC
LeaderLib_Skills_OnDummyUsedSkillAtPosition((CHARACTERGUID)_Dummy, (CHARACTERGUID)_Caster, (STRING)_Skill, (REAL)_x, (REAL)_y, (REAL)_z, (STRING)_Skilltype, (STRING)_SkillElement)
THEN
DB_NOOP(1);

IF
SkillCast(_Dummy, _Skill, _Skilltype, _SkillElement)
AND
DB_LeaderLib_Skills_Temp_ListenForPositionCast(_Dummy, _Caster, _x, _y, _z, _Skill)
THEN
NOT DB_LeaderLib_Skills_Temp_ListenForPositionCast(_Dummy, _Caster, _x, _y, _z, _Skill);
LeaderLib_Skills_OnDummyCastSkillAtPosition(_Dummy, _Caster, _Skill, _x, _y, _z, _Skilltype, _SkillElement);

PROC
LeaderLib_Skills_OnDummyCastSkillAtPosition((CHARACTERGUID)_Dummy, (CHARACTERGUID)_Caster, (STRING)_Skill, (REAL)_x, (REAL)_y, (REAL)_z, (STRING)_Skilltype, (STRING)_SkillElement)
THEN
DB_NOOP(1);
/*
IF
SkillCast(_Dummy, _Skill, _, _)
AND
ObjectGetFlag(_Dummy, "LeaderLib_IsSkillDummy", 1)
AND
CharacterGetLevel(_Dummy, _Level)
AND
IntegertoString(_Level, _LevelStr)
THEN
LeaderLog_Log("TRACE", "[LeaderLib:Skills:UseSkillOnTarget] Dummy is level [",_LevelStr,"].");
*/

IF
SkillCast(_Dummy, _Skill, _, _)
AND
ObjectGetFlag(_Dummy, "LeaderLib_IsSkillDummy", 1)
THEN
LeaderLib_Skills_MarkDummyForReset(_Dummy, 2500);
LeaderLog_Log("TRACE", "[LeaderLib:Skills:SkillCast(Dummy)] Skill dummy cast skill [",_Skill,"]. Resetting dummy after 2500ms.");
//END_REGION

//REGION DUMMY_PREPARATION
QRY
LeaderLib_Skills_QRY_PrepareSkillDummy((STRING)_ID, (CHARACTERGUID)_Caster, (INTEGER)_CopyStats, (INTEGER)_CopyEquipment)
THEN
LeaderLib_Skills_PrepareSkillDummy(_ID, _Caster, _CopyStats, _CopyEquipment);

PROC
LeaderLib_Skills_PrepareSkillDummy((STRING)_ID, (CHARACTERGUID)_Caster, (INTEGER)_CopyStats, (INTEGER)_CopyEquipment)
AND
DB_LeaderLib_Skills_InactiveSkillDummies((CHARACTERGUID)_Dummy)
AND
ObjectExists(_Dummy, 1)
AND
GetPosition(_Caster, _x, _y, _z)
THEN
NOT DB_LeaderLib_Skills_InactiveSkillDummies(_Dummy);
LeaderLib_Skills_Internal_TransformDummy(_Dummy, _Caster, _CopyStats, _CopyEquipment);
LeaderLib_Skills_Internal_PrepareDummyStats(_Dummy, _Caster, _CopyStats, _CopyEquipment);
CharacterSetDetached(_Dummy, 1);
SetOnStage(_Dummy, 1);
SetVarString(_Dummy, "LeaderLib_SkillDummyID", _ID);
DB_LeaderLib_Skills_SkillDummies(_ID, _Dummy);

PROC
LeaderLib_Skills_PrepareSkillDummy((STRING)_ID, (CHARACTERGUID)_Caster, (INTEGER)_CopyStats, (INTEGER)_CopyEquipment)
AND
NOT DB_LeaderLib_Skills_SkillDummies(_ID,_)
AND
GetPosition(_Caster, _x, _y, _z)
AND
TemporaryCharacterCreateAtPosition(_x, _y, _z, "LeaderLib_SkillDummy_94668062-11ea-4ecf-807c-4cc225cbb236", 0, _Dummy)
THEN
SetTag(_Dummy, "LeaderLib_TemporaryCharacter");
LeaderLib_Skills_Internal_TransformDummy(_Dummy, _Caster, _CopyStats, _CopyEquipment);
LeaderLib_Skills_Internal_PrepareDummyStats(_Dummy, _Caster, _CopyStats, _CopyEquipment);
ObjectSetFlag(_Dummy, "LeaderLib_IsSkillDummy", 0);
CharacterMakeStoryNpc(_Dummy, 1);
SetVisible(_Dummy, 0);
CharacterSetDetached(_Dummy, 1);
SetVarString(_Dummy, "LeaderLib_SkillDummyID", _ID);
DB_LeaderLib_Skills_SkillDummies(_ID, _Dummy);

PROC
LeaderLib_Skills_Internal_TransformDummy((CHARACTERGUID)_Dummy, (CHARACTERGUID)_Caster, (INTEGER)_CopyStats, (INTEGER)_CopyEquipment)
THEN
//CharacterTransformAppearanceTo(_Dummy, _Caster, _CopyEquipment, 1);
ObjectSetFlag(_Dummy, "LEADERLIB_IGNORE", 0);
CharacterTransformFromCharacter(_Dummy, _Caster, 0, 1, _CopyStats, _CopyEquipment, _CopyStats, 1, 0);
SetCanJoinCombat(_Dummy, 0);
SetCanFight(_Dummy, 0);
SetTag(_Dummy, "LeaderLib_Dummy");
SetTag(_Dummy, "SUMMON"); // For Crime/etc to ignore the dummy
SetVarObject(_Dummy, "LeaderLib_Dummy_Owner", _Caster);
LeaderLib_ToggleScripts_EnableScript("LeaderLib_DummyCrimesEnabled", "LeaderLib");
//LeaderLib_Timers_StartCharacterCharacterTimer(_Dummy, _Caster, 50, "LeaderLib_Timers_SkillDummy_CopyStats", "LeaderLib_Commands_SkillDummy_CopyStats")

PROC
LeaderLib_Skills_Internal_PrepareDummyStats((CHARACTERGUID)_Dummy, (CHARACTERGUID)_Caster, 1, (INTEGER)_CopyEquipment)
THEN
LeaderLib_Helper_CopyStats(_Dummy, _Caster, 1, 1, 1, 1);
LeaderLib_Helper_CopyFaction(_Dummy, _Caster);
//END_REGION

//REGION TARGET_DUMMY
PROC
LeaderLib_Skills_CreateTargetDummy((STRING)_ID, (REAL)_x, (REAL)_y, (REAL)_z)
THEN
LeaderLib_Skills_CreateTargetDummy(_ID, _x, _y, _z, "", 5000, 1, 0);

PROC
LeaderLib_Skills_CreateTargetDummy((STRING)_ID, (REAL)_x, (REAL)_y, (REAL)_z, (STRING)_ReadyEvent)
THEN
LeaderLib_Skills_CreateTargetDummy(_ID, _x, _y, _z, _ReadyEvent, 5000, 1, 0);

PROC
LeaderLib_Skills_CreateTargetDummy((STRING)_ID, (REAL)_x, (REAL)_y, (REAL)_z, (STRING)_ReadyEvent, (INTEGER)_Timeout)
THEN
LeaderLib_Skills_CreateTargetDummy(_ID, _x, _y, _z, _ReadyEvent, _Timeout, 1, 0, 0);

PROC
LeaderLib_Skills_CreateTargetDummy((STRING)_ID, (REAL)_x, (REAL)_y, (REAL)_z, (STRING)_ReadyEvent, (INTEGER)_Timeout, (INTEGER)_Invulnerable, (INTEGER)_Visible)
THEN
LeaderLib_Skills_CreateTargetDummy(_ID, _x, _y, _z, _ReadyEvent, _Timeout, _Invulnerable, _Visible, 0);

PROC
LeaderLib_Skills_CreateTargetDummy((STRING)_ID, (REAL)_x, (REAL)_y, (REAL)_z, (STRING)_ReadyEvent, (INTEGER)_Timeout, (INTEGER)_Invulnerable, (INTEGER)_Visible, (INTEGER)_Immortal)
AND
TemporaryCharacterCreateAtPosition(_x, _y, _z, "LeaderLib_SkillDummy_94668062-11ea-4ecf-807c-4cc225cbb236", 0, _Dummy)
THEN
SetTag(_Dummy, "LeaderLib_TemporaryCharacter");
LeaderLib_Skills_Internal_SetTargetDummyID(_ID, _Dummy);
SetVarInteger(_Dummy, "LeaderLib_TargetDummyTimeout", _Timeout);
SetVarString(_Dummy, "LeaderLib_TargetDummyReadyEvent", _ReadyEvent);
LeaderLib_Skills_Internal_PrepareTargetDummy(_Dummy, _Invulnerable, _Visible, _Immortal);
DB_LeaderLib_Skills_Temp_MoveDummyToPosition(_Dummy, _x, _y, _z);
LeaderLib_Timers_StartObjectTimer(_Dummy, 1000, "LeaderLib_Timers_Skills_TargetDummyFailsafe", "LeaderLib_Events_TargetDummyReady");
TeleportToPosition(_Dummy, _x, _y, _z, "LeaderLib_Events_TargetDummyTeleported", 0, 0);

PROC
LeaderLib_Skills_Internal_PrepareTargetDummy((CHARACTERGUID)_Dummy, (INTEGER)_Invulnerable, (INTEGER)_Visible, (INTEGER)_Immortal)
THEN
CharacterSetImmortal(_Dummy, _Immortal);
CharacterMakeStoryNpc(_Dummy, _Invulnerable);
SetVisible(_Dummy, _Visible);
CharacterSetDetached(_Dummy, _Invulnerable);
CharacterDisableAllCrimes(_Dummy);
//SetTag(_Dummy, "ANIMAL");

PROC
LeaderLib_Skills_Internal_SetTargetDummyID("", (CHARACTERGUID)_Dummy)
AND
NOT DB_LeaderLib_Skills_TargetDummies(_, _Dummy)
AND
GetUUID(_Dummy, _ID)
THEN
DB_LeaderLib_Skills_TargetDummies(_ID, _Dummy);
SetVarString(_Dummy, "LeaderLib_TargetDummyID", _ID);

PROC
LeaderLib_Skills_Internal_SetTargetDummyID((STRING)_ID, (CHARACTERGUID)_Dummy)
AND
NOT DB_LeaderLib_Skills_TargetDummies(_, _Dummy)
AND
_ID != ""
THEN
DB_LeaderLib_Skills_TargetDummies(_ID, _Dummy);
SetVarString(_Dummy, "LeaderLib_TargetDummyID", _ID);

QRY
LeaderLib_Skills_QRY_CreateTargetDummy((STRING)_ID, (REAL)_x, (REAL)_y, (REAL)_z, (STRING)_ReadyEvent, (INTEGER)_Timeout, (INTEGER)_Invulnerable, (INTEGER)_Visible, (INTEGER)_Immortal)
THEN
LeaderLib_Skills_CreateTargetDummy(_ID, _x, _y, _z, _ReadyEvent, _Timeout, _Invulnerable, _Visible, _Immortal);

QRY
LeaderLib_Skills_QRY_CreateTargetDummy((STRING)_ID, (REAL)_x, (REAL)_y, (REAL)_z, (STRING)_ReadyEvent, (INTEGER)_Timeout, (INTEGER)_Invulnerable, (INTEGER)_Visible)
THEN
LeaderLib_Skills_CreateTargetDummy(_ID, _x, _y, _z, _ReadyEvent, _Timeout, _Invulnerable, _Visible);

QRY
LeaderLib_Skills_QRY_CreateTargetDummy((STRING)_ID, (REAL)_x, (REAL)_y, (REAL)_z, (STRING)_ReadyEvent, (INTEGER)_Timeout)
THEN
LeaderLib_Skills_CreateTargetDummy(_ID, _x, _y, _z, _ReadyEvent, _Timeout);

QRY
LeaderLib_Skills_QRY_CreateTargetDummy((STRING)_ID, (REAL)_x, (REAL)_y, (REAL)_z, (STRING)_ReadyEvent)
THEN
LeaderLib_Skills_CreateTargetDummy(_ID, _x, _y, _z, _ReadyEvent);

QRY
LeaderLib_Skills_QRY_CreateTargetDummy((STRING)_ID, (REAL)_x, (REAL)_y, (REAL)_z)
THEN
LeaderLib_Skills_CreateTargetDummy(_ID, _x, _y, _z, "");

PROC
LeaderLib_Skills_CreateTargetDummyAtObject((STRING)_ID, (GUIDSTRING)_Target, (STRING)_ReadyEvent)
AND
GetPosition(_Target, _x, _y, _z)
THEN
LeaderLib_Skills_CreateTargetDummy(_ID, _x, _y, _z, _ReadyEvent, 2000, 1, 0);

PROC
LeaderLib_Skills_CreateTargetDummyAtObject((STRING)_ID, (GUIDSTRING)_Target, (STRING)_ReadyEvent, (INTEGER)_Timeout)
AND
GetPosition(_Target, _x, _y, _z)
THEN
LeaderLib_Skills_CreateTargetDummy(_ID, _x, _y, _z, _ReadyEvent, _Timeout, 1, 0);

PROC
LeaderLib_Skills_CreateTargetDummyAtObject((STRING)_ID, (GUIDSTRING)_Target, (STRING)_ReadyEvent, (INTEGER)_Timeout, (INTEGER)_Invulnerable)
AND
GetPosition(_Target, _x, _y, _z)
THEN
LeaderLib_Skills_CreateTargetDummy(_ID, _x, _y, _z, _ReadyEvent, _Timeout, _Invulnerable, 0);

PROC
LeaderLib_Skills_CreateTargetDummyAtObject((STRING)_ID, (GUIDSTRING)_Target, (STRING)_ReadyEvent, (INTEGER)_Timeout, (INTEGER)_Invulnerable, (INTEGER)_Visible)
AND
GetPosition(_Target, _x, _y, _z)
THEN
LeaderLib_Skills_CreateTargetDummy(_ID, _x, _y, _z, _ReadyEvent, _Timeout, _Invulnerable, _Visible);

PROC
LeaderLib_Skills_CreateTargetDummyAtObject((STRING)_ID, (GUIDSTRING)_Target, (STRING)_ReadyEvent, (INTEGER)_Timeout, (INTEGER)_Invulnerable, (INTEGER)_Visible, (INTEGER)_Immortal)
AND
GetPosition(_Target, _x, _y, _z)
THEN
LeaderLib_Skills_CreateTargetDummy(_ID, _x, _y, _z, _ReadyEvent, _Timeout, _Invulnerable, _Visible, _Immortal);

QRY
LeaderLib_Skills_QRY_CreateTargetDummyAtObject((STRING)_ID, (GUIDSTRING)_Target, (STRING)_ReadyEvent, (INTEGER)_Timeout, (INTEGER)_Invulnerable, (INTEGER)_Visible, (INTEGER)_Immortal)
THEN
LeaderLib_Skills_CreateTargetDummyAtObject(_ID, _Target, _ReadyEvent, _Timeout, _Invulnerable, _Visible, _Immortal);

QRY
LeaderLib_Skills_QRY_CreateTargetDummyAtObject((STRING)_ID, (GUIDSTRING)_Target, (STRING)_ReadyEvent, (INTEGER)_Timeout, (INTEGER)_Invulnerable, (INTEGER)_Visible)
THEN
LeaderLib_Skills_CreateTargetDummyAtObject(_ID, _Target, _ReadyEvent, _Timeout, _Invulnerable, _Visible);

QRY
LeaderLib_Skills_QRY_CreateTargetDummyAtObject((STRING)_ID, (GUIDSTRING)_Target, (STRING)_ReadyEvent, (INTEGER)_Timeout, (INTEGER)_Invulnerable)
THEN
LeaderLib_Skills_CreateTargetDummyAtObject(_ID, _Target, _ReadyEvent, _Timeout, _Invulnerable);

QRY
LeaderLib_Skills_QRY_CreateTargetDummyAtObject((STRING)_ID, (GUIDSTRING)_Target, (STRING)_ReadyEvent, (INTEGER)_Timeout)
THEN
LeaderLib_Skills_CreateTargetDummyAtObject(_ID, _Target, _ReadyEvent, _Timeout);

QRY
LeaderLib_Skills_QRY_CreateTargetDummyAtObject((STRING)_ID, (GUIDSTRING)_Target, (STRING)_ReadyEvent)
THEN
LeaderLib_Skills_CreateTargetDummyAtObject(_ID, _Target, _ReadyEvent);

QRY
LeaderLib_Skills_QRY_CreateTargetDummyAtObject((STRING)_ID, (GUIDSTRING)_Target)
THEN
LeaderLib_Skills_CreateTargetDummyAtObject(_ID, _Target, "");

IF
StoryEvent((CHARACTERGUID)_Dummy, "LeaderLib_Events_TargetDummyTeleported")
AND
DB_LeaderLib_Skills_Temp_MoveDummyToPosition(_Dummy, _x, _y, _z)
THEN
NOT DB_LeaderLib_Skills_Temp_MoveDummyToPosition(_Dummy, _x, _y, _z);
LeaderLog_Log("TRACE", "[LeaderLib:Skills:TargetDummyTeleported] Target dummy teleported to position. Moving to position.");
CharacterMoveToPosition(_Dummy, _x, _y, _z, 1, "LeaderLib_Events_TargetDummyReady");

IF
StoryEvent((CHARACTERGUID)_Dummy, "LeaderLib_Events_TargetDummyReady")
AND
GetVarString(_Dummy, "LeaderLib_TargetDummyReadyEvent", _ReadyEvent)
AND
_ReadyEvent != ""
THEN
SetStoryEvent(_Dummy, _ReadyEvent);

IF
StoryEvent((CHARACTERGUID)_Dummy, "LeaderLib_Events_TargetDummyReady")
THEN
LeaderLib_Timers_CancelObjectTimer(_Dummy, "LeaderLib_Timers_Skills_TargetDummyFailsafe");

IF
StoryEvent((CHARACTERGUID)_Dummy, "LeaderLib_Events_TargetDummyReady")
AND
DB_LeaderLib_Skills_Temp_MoveDummyToPosition(_Dummy, _x, _y, _z)
THEN
NOT DB_LeaderLib_Skills_Temp_MoveDummyToPosition(_Dummy, _x, _y, _z);

IF
StoryEvent((CHARACTERGUID)_Dummy, "LeaderLib_Events_TargetDummyReady")
AND
GetVarInteger(_Dummy, "LeaderLib_TargetDummyTimeout", _Timeout)
AND
_Timeout > 0
THEN
LeaderLib_Skills_MarkDummyForReset(_Dummy, _Timeout);

IF
StoryEvent((CHARACTERGUID)_Dummy, "LeaderLib_Events_TargetDummyReady")
AND
GetVarInteger(_Dummy, "LeaderLib_TargetDummyTimeout", _Timeout)
AND
_Timeout == 0
THEN
LeaderLib_Skills_ResetDummy(_Dummy);
//END_REGION

//REGION DUMMY_RESET
PROC
LeaderLib_Skills_MarkDummyForReset((CHARACTERGUID)_Dummy, (INTEGER)_Duration)
AND
_Duration > 0
THEN
ProcObjectTimerCancel(_Dummy, "LeaderLib_Timers_Skills_ResetDummy");
ProcObjectTimer(_Dummy, "LeaderLib_Timers_Skills_ResetDummy", _Duration);

PROC
LeaderLib_Skills_MarkDummyForReset((CHARACTERGUID)_Dummy, (INTEGER)_Duration)
AND
_Duration <= 0
THEN
ProcObjectTimerFinished(_Dummy, "LeaderLib_Timers_Skills_ResetDummy");

PROC
ProcObjectTimerFinished((CHARACTERGUID)_Dummy, "LeaderLib_Timers_Skills_ResetDummy")
THEN
LeaderLib_Skills_ResetDummy(_Dummy);

PROC
LeaderLib_Skills_ResetDummy((CHARACTERGUID)_Dummy)
AND
DB_LeaderLib_Skills_SkillDummies(_ID, _Dummy)
THEN
NOT DB_LeaderLib_Skills_SkillDummies(_ID, _Dummy);
DB_LeaderLib_Skills_InactiveSkillDummies(_Dummy);
ClearVarObject(_Dummy, "LeaderLib_Dummy_Owner");
SetVarString(_Dummy, "LeaderLib_SkillDummyID", "");
SetOnStage(_Dummy, 0);

PROC
LeaderLib_Skills_ResetDummy((CHARACTERGUID)_Dummy)
AND
DB_LeaderLib_Skills_Temp_ListenForTargetCast(_Dummy, _Caster, _Target, _Skill)
THEN
NOT DB_LeaderLib_Skills_Temp_ListenForTargetCast(_Dummy, _Caster, _Target, _Skill);

PROC
LeaderLib_Skills_ResetDummy((CHARACTERGUID)_Dummy)
AND
DB_LeaderLib_Skills_Temp_ListenForPositionCast(_Dummy, _Caster, _x, _y, _z, _Skill)
THEN
NOT DB_LeaderLib_Skills_Temp_ListenForPositionCast(_Dummy, _Caster, _x, _y, _z, _Skill);

PROC
LeaderLib_Skills_ResetDummy((CHARACTERGUID)_Dummy)
AND
DB_LeaderLib_Skills_TargetDummies(_ID, _Dummy)
THEN
NOT DB_LeaderLib_Skills_TargetDummies(_ID, _Dummy);
CharacterMakeStoryNpc(_Dummy, 0);
RemoveTemporaryCharacter(_Dummy);

PROC
LeaderLib_Skills_ResetDummyByID((STRING)_ID)
AND
DB_LeaderLib_Skills_SkillDummies(_ID, _Dummy)
THEN
LeaderLib_Skills_ResetDummy(_Dummy);
//END_REGION

//REGION DUMMY_CRIMES_DISABLING
QRY
LeaderLib_Skills_QRY_AnyDummiesActive()
AND
DB_LeaderLib_Skills_SkillDummies(_ID, _Dummy)
THEN
DB_NOOP(1);

QRY
LeaderLib_Skills_QRY_AnyDummiesActive()
AND
DB_LeaderLib_Skills_TargetDummies(_ID, _Dummy)
THEN
DB_NOOP(1);

PROC
LeaderLib_Skills_ResetDummy((CHARACTERGUID)_Dummy)
AND
DB_IgnoreAssaultFor(_Dummy,_NPC)
THEN
NOT DB_IgnoreAssaultFor(_Dummy,_NPC);

PROC
LeaderLib_Skills_ResetDummy((CHARACTERGUID)_Dummy)
AND
NOT LeaderLib_Skills_QRY_AnyDummiesActive()
THEN
LeaderLib_ToggleScripts_DisableScriptAfterDelay("LeaderLib_DummyCrimesEnabled", "LeaderLib", 2000);
//END_REGION

//REGION RESET_REGION_ENDED
IF
RegionEnded(_)
AND
DB_LeaderLib_Skills_SkillDummies(_ID, _Dummy)
AND
ObjectExists(_Dummy, 1)
THEN
CharacterMakeStoryNpc(_Dummy, 0);
RemoveTemporaryCharacter(_Dummy);
NOT DB_LeaderLib_Skills_SkillDummies(_ID, _Dummy);

IF
RegionEnded(_)
AND
DB_LeaderLib_Skills_TargetDummies(_ID, _Dummy)
AND
ObjectExists(_Dummy, 1)
THEN
CharacterMakeStoryNpc(_Dummy, 0);
RemoveTemporaryCharacter(_Dummy);
NOT DB_LeaderLib_Skills_TargetDummies(_ID, _Dummy);

IF
RegionEnded(_)
AND
DB_LeaderLib_Skills_InactiveSkillDummies(_Dummy)
AND
ObjectExists(_Dummy, 1)
THEN
CharacterMakeStoryNpc(_Dummy, 0);
RemoveTemporaryCharacter(_Dummy);
NOT DB_LeaderLib_Skills_InactiveSkillDummies(_Dummy);

IF
RegionEnded(_)
THEN
SysClear("DB_LeaderLib_Skills_SkillDummies", 2);
SysClear("DB_LeaderLib_Skills_TargetDummies", 2);
SysClear("DB_LeaderLib_Skills_InactiveSkillDummies", 1);
LeaderLib_ToggleScripts_DisableScript("LeaderLib_DummyCrimesEnabled", "LeaderLib");

//END_REGION

//REGION SKILL_USAGE_LISTENERS
/*
LeaderLib_Skills_CharacterUsedSkillAtPosition(_Char, "", _x,  _y, _z);
LeaderLib_Skills_CharacterUsedSkillOnTarget(_Char, "", _Target);
*/
//These are helpers so alternate versions of skills (enemy variants) can still trigger the same logic
PROC
LeaderLib_Skills_CharacterUsedSkill((CHARACTERGUID)_Char, (STRING)_Skill)
THEN
DB_NOOP(1);

PROC
LeaderLib_Skills_CharacterUsedSkillAtPosition((CHARACTERGUID)_Char, (STRING)_Skill, (REAL)_x, (REAL)_y, (REAL)_z)
THEN
LeaderLib_Skills_CharacterUsedSkill(_Char, _Skill);

PROC
LeaderLib_Skills_CharacterUsedSkillOnTarget((CHARACTERGUID)_Char, (STRING)_Skill, (GUIDSTRING)_Target)
AND
GetPosition(_Target, _x, _y, _z)
THEN
LeaderLib_Skills_CharacterUsedSkillAtPosition(_Char, _Skill, _x, _y, _z);

PROC
LeaderLib_Skills_CharacterCastSkill((CHARACTERGUID)_Char, (STRING)_Skill)
THEN
DB_NOOP(1);
//END_REGION

//REGION SET_SKILL_SLOT
// [BEGIN_NO_OSITOOLS]
PROC
LeaderLib_Skills_SetSlot((CHARACTERGUID)_Char, (STRING)_Skill, (INTEGER)_Slot)
THEN
DB_NOOP(1);
// [END_NO_OSITOOLS]

/* [OSITOOLS_ONLY]
PROC
LeaderLib_Skills_SetSlot((CHARACTERGUID)_Char, (STRING)_Skill, (INTEGER)_Slot)
AND
NRD_SkillBarFindSkill(_Char, _Skill, _OldSlot)
THEN
DB_LeaderLib_Skills_SetSlotResolved(_Char, _Skill, _Slot);
NRD_SkillBarClear(_Char, _OldSlot);
LeaderLib_Skills_Internal_SetSlotToSkill(_Char, _Slot, _Skill);

PROC
LeaderLib_Skills_SetSlot((CHARACTERGUID)_Char, (STRING)_Skill, (INTEGER)_Slot)
AND
NOT DB_LeaderLib_Skills_SetSlotResolved(_Char, _Skill, _Slot)
THEN
DB_LeaderLib_Skills_SetSlotResolved(_Char, _Skill, _Slot);
LeaderLib_Skills_Internal_SetSlotToSkill(_Char, _Slot, _Skill);

PROC
LeaderLib_Skills_SetSlot((CHARACTERGUID)_Char, (STRING)_Skill, (INTEGER)_Slot)
AND
DB_LeaderLib_Skills_SetSlotResolved(_Char, _Skill, _Slot)
THEN
NOT DB_LeaderLib_Skills_SetSlotResolved(_Char, _Skill, _Slot);

PROC
LeaderLib_Skills_Internal_SetSlotToSkill((CHARACTERGUID)_Char, (INTEGER)_Slot, (STRING)_Skill)
THEN
LeaderLib_Ext_TrySetSkillSlot(_Char, _Slot, _Skill, 1);
*/
//END_REGION
EXITSECTION

ENDEXITSECTION
ParentTargetEdge "LaughingLeader__LeaderLib"
