Version 1
SubGoalCombiner SGC_AND
INITSECTION
//REGION TREASURE
//DB_LeaderLib_Treasure_RegisteredObject(_TreasureID, _Object)
//DB_LeaderLib_Treasure_RegisteredObjectTemplate(_TreasureID, _Template)
//DB_LeaderLib_Treasure_RegisteredTraderTreasure(_TreasureID, _TraderID)

//DB_LeaderLib_Treasure_TreasureItemTemplates(_TreasureID, _ItemEntry, _Amount, _RequirementID)
//DB_LeaderLib_Treasure_TreasureItemStats(_TreasureID, _ItemEntry, _Amount, _RequirementID)
//DB_LeaderLib_Treasure_RegisteredTreasureTable(_TreasureID, _TreasureTable, _RequirementID, _UsePartyLevel, _MinLevel, _MaxLevel)

//DB_LeaderLib_Treasure_ItemGenerationType(_TreasureID, _ItemEntry, _GenerationType)
//DB_LeaderLib_Treasure_TreasureGenerationType(_TreasureID, _GenerationType)
//DB_LeaderLib_Treasure_RegisteredGenerationTypes(_GenerationType)
//DB_LeaderLib_Treasure_ItemGenerationFlag(_TreasureID, _ItemEntry, _Flag, _FlagType)
//DB_LeaderLib_Treasure_GenerationSpeed(_TreasureID, _TickRate)

//DB_LeaderLib_Treasure_ItemLevel(_TreasureID, _ItemEntry, _MinLevel, _MaxLevel, _UsePartyLevel)
//DB_LeaderLib_Treasure_ItemDeltaMods(_ID, _TreasureID, _ItemEntry, _Deltamod, _Chance)
//DB_LeaderLib_Treasure_ItemRunes(_ID, _TreasureID, _ItemEntry, _Rune, _Chance)
//DB_LeaderLib_Treasure_ItemMaxAmount(_TreasureID, _ItemEntry, _MaxAmount)

//DB_LeaderLib_Treasure_OnlyOnce(_TreasureID, _ItemEntryOrTreasureTable, _OnCompletionEvent)
//DB_LeaderLib_Treasure_GeneratedEvent(_TreasureID, _ItemEntry, _OnGeneratedEvent)
//DB_LeaderLib_Treasure_ItemDoneGenerating(_Object, _TreasureID, _ItemEntry)

//DB_LeaderLib_Treasure_TreasureTableLimit(_TreasureID, _TreasureTable, _Limit)
//END_REGION

//REGION TRADER
//DB_LeaderLib_Traders_RegisteredTraderTemplate(_TraderID, _Template, _PlaySpawn)
//DB_LeaderLib_Traders_RegisteredGlobalTrader(_TraderID, _Trader)
//DB_LeaderLib_Traders_RegisteredTraderInstance(_TraderID, _Trader, _Level)
//END_REGION
KBSECTION
PROC
LeaderLib_Treasure_JustRegistered((STRING)_TreasureID, (STRING)_RegisteredVal, (STRING)_Type)
THEN
DB_NOOP(1);

PROC
LeaderLib_Treasure_JustRegisteredObject((STRING)_TreasureID, (GUIDSTRING)_RegisteredVal, (STRING)_Type)
AND
String(_RegisteredVal, _Str)
THEN
LeaderLib_Treasure_JustRegistered(_TreasureID, _Str, _Type);

//REGION TREASURE_REGISTERING
PROC
LeaderLib_Treasure_Register_TreasureToObject((STRING)_TreasureID, (GUIDSTRING)_Object)
AND
NOT DB_LeaderLib_Treasure_RegisteredObject(_TreasureID, _Object)
THEN
DB_LeaderLib_Treasure_RegisteredObject(_TreasureID, _Object);
LeaderLib_Treasure_JustRegisteredObject(_TreasureID, _Object, "Object");

PROC
LeaderLib_Treasure_Register_TreasureToTemplate((STRING)_TreasureID, (STRING)_ObjectTemplate)
AND
NOT DB_LeaderLib_Treasure_RegisteredObjectTemplate(_TreasureID, _ObjectTemplate)
THEN
DB_LeaderLib_Treasure_RegisteredObjectTemplate(_TreasureID, _ObjectTemplate);
LeaderLib_Treasure_JustRegistered(_TreasureID, _ObjectTemplate, "ObjectTemplate");

PROC
LeaderLib_Treasure_Register_TreasureToTrader((STRING)_TreasureID, (STRING)_TraderID)
AND
NOT DB_LeaderLib_Treasure_RegisteredTraderTreasure(_TreasureID, _TraderID)
THEN
//LeaderLog_Log("DEBUG", "[LeaderLib:TreasureSystem:Register_TreasureToTrader] [",_TreasureID,"] registered to [",_TraderID,"].");
DB_LeaderLib_Treasure_RegisteredTraderTreasure(_TreasureID, _TraderID);
LeaderLib_Treasure_JustRegistered(_TreasureID, _TraderID, "TraderTreasure");

PROC
LeaderLib_Treasure_Register_TreasureTable((STRING)_TreasureID, (STRING)_TreasureTable)
THEN
LeaderLib_Treasure_Register_TreasureTable(_TreasureID, _TreasureTable, "",1,-1,-1);

PROC
LeaderLib_Treasure_Register_TreasureTable((STRING)_TreasureID, (STRING)_TreasureTable, (STRING)_RequirementID)
THEN
LeaderLib_Treasure_Register_TreasureTable(_TreasureID, _TreasureTable, _RequirementID,1,-1,-1);

PROC
LeaderLib_Treasure_Register_TreasureTable((STRING)_TreasureID, (STRING)_TreasureTable, (STRING)_RequirementID, (INTEGER)_UsePartyLevel)
THEN
// 1, 1 for the level range here, just in case _UsePartyLevel is 0
LeaderLib_Treasure_Register_TreasureTable(_TreasureID, _TreasureTable, _RequirementID, _UsePartyLevel, 1, 1);

PROC
LeaderLib_Treasure_Register_TreasureTable((STRING)_TreasureID, (STRING)_TreasureTable, (STRING)_RequirementID, (INTEGER)_UsePartyLevel, (INTEGER)_Level)
THEN
LeaderLib_Treasure_Register_TreasureTable(_TreasureID, _TreasureTable, _RequirementID, _UsePartyLevel, _Level, _Level);

PROC
LeaderLib_Treasure_Register_TreasureTable((STRING)_TreasureID, (STRING)_TreasureTable, (STRING)_RequirementID, (INTEGER)_UsePartyLevel, (INTEGER)_MinLevel, (INTEGER)_MaxLevel)
AND
NOT DB_LeaderLib_Treasure_RegisteredTreasureTable(_TreasureID, _TreasureTable, _RequirementID, _UsePartyLevel, _MinLevel, _MaxLevel)
THEN
DB_LeaderLib_Treasure_RegisteredTreasureTable(_TreasureID, _TreasureTable, _RequirementID, _UsePartyLevel, _MinLevel, _MaxLevel);
LeaderLib_Treasure_JustRegistered(_TreasureID, _TreasureTable, "TreasureTable");

PROC
LeaderLib_Treasure_Register_ItemTemplate((STRING)_TreasureID, (STRING)_ItemEntry)
THEN
LeaderLib_Treasure_Register_ItemTemplate(_TreasureID, _ItemEntry, 1, "");

PROC
LeaderLib_Treasure_Register_ItemTemplate((STRING)_TreasureID, (STRING)_ItemEntry, (INTEGER)_Amount)
THEN
LeaderLib_Treasure_Register_ItemTemplate(_TreasureID, _ItemEntry, _Amount, "");

PROC
LeaderLib_Treasure_Register_ItemTemplate((STRING)_TreasureID, (STRING)_ItemEntry, (INTEGER)_Amount, (STRING)_RequirementID)
AND
NOT DB_LeaderLib_Treasure_TreasureItemTemplates(_TreasureID, _ItemEntry, _Amount, _RequirementID)
THEN
DB_LeaderLib_Treasure_TreasureItemTemplates(_TreasureID, _ItemEntry, _Amount, _RequirementID);
LeaderLib_Treasure_JustRegistered(_TreasureID, _ItemEntry, "ItemTemplate");

PROC
LeaderLib_Treasure_Register_ItemStat((STRING)_TreasureID, (STRING)_ItemEntry, (INTEGER)_Amount)
THEN
LeaderLib_Treasure_Register_ItemStat(_TreasureID, _ItemEntry, _Amount, "");

PROC
LeaderLib_Treasure_Register_ItemStat((STRING)_TreasureID, (STRING)_ItemEntry, (INTEGER)_Amount, (STRING)_RequirementID)
AND
NOT DB_LeaderLib_Treasure_TreasureItemStats(_TreasureID, _ItemEntry, _Amount, _RequirementID)
THEN
DB_LeaderLib_Treasure_TreasureItemStats(_TreasureID, _ItemEntry, _Amount, _RequirementID);
LeaderLib_Treasure_JustRegistered(_TreasureID, _ItemEntry, "ItemStat");

//Shortcut for registering a template and configuring it to generate only once.
PROC
LeaderLib_Treasure_Register_UniqueItemTemplate((STRING)_TreasureID, (STRING)_ItemEntry)
THEN
LeaderLib_Treasure_Register_UniqueItemTemplate(_TreasureID, _ItemEntry, 1, "", "");

PROC
LeaderLib_Treasure_Register_UniqueItemTemplate((STRING)_TreasureID, (STRING)_ItemEntry, (STRING)_RequirementID)
THEN
LeaderLib_Treasure_Register_UniqueItemTemplate(_TreasureID, _ItemEntry, 1, _RequirementID, "");

PROC
LeaderLib_Treasure_Register_UniqueItemTemplate((STRING)_TreasureID, (STRING)_ItemEntry, (INTEGER)_Amount, (STRING)_RequirementID, (STRING)_CompletionEvent)
THEN
DB_LeaderLib_Treasure_TreasureItemTemplates(_TreasureID, _ItemEntry, _Amount, _RequirementID);
LeaderLib_Treasure_Configure_GenerateOnce(_TreasureID, _ItemEntry, _CompletionEvent);
LeaderLib_Treasure_JustRegistered(_TreasureID, _ItemEntry, "ItemTemplate");

//END_REGION

//REGION CONFIGURATION
/* Generation types:
MANUAL
TRADE_GENERATION_START
TRADE_GENERATION_END
TRADE_OPENED
DIALOG_STARTED
DIALOG_ENDED
FLAG
OPENED
LEVEL_LOADED
PARTY_LEVELED_UP
REQUIREMENT_UNLOCKED
*/
PROC
LeaderLib_Treasure_Configure_GenerationType((STRING)_TreasureID, (STRING)_ItemEntry, (STRING)_GenerationType)
AND
NOT DB_LeaderLib_Treasure_ItemGenerationType(_TreasureID, _ItemEntry, _GenerationType)
THEN
DB_LeaderLib_Treasure_ItemGenerationType(_TreasureID, _ItemEntry, _GenerationType);

PROC
LeaderLib_Treasure_Configure_DefaultGenerationType((STRING)_TreasureID, (STRING)_GenerationType)
AND
NOT DB_LeaderLib_Treasure_TreasureGenerationType(_TreasureID, _GenerationType)
THEN
DB_LeaderLib_Treasure_TreasureGenerationType(_TreasureID, _GenerationType);

PROC
LeaderLib_Treasure_Configure_GenerationFlag((STRING)_TreasureID, (STRING)_ItemEntry, (STRING)_Flag, (STRING)_FlagType)
AND
NOT DB_LeaderLib_Treasure_ItemGenerationFlag(_TreasureID, _ItemEntry, _Flag, _FlagType)
THEN
LeaderLib_Treasure_Configure_GenerationType(_TreasureID, _ItemEntry, "FLAG");
DB_LeaderLib_Treasure_ItemGenerationFlag(_TreasureID, _ItemEntry, _Flag, _FlagType);

PROC
LeaderLib_Treasure_Configure_GenerationSpeed((STRING)_TreasureID, (INTEGER)_TickRate)
AND
DB_LeaderLib_Treasure_GenerationSpeed(_TreasureID, _TickRate)
THEN
NOT DB_LeaderLib_Treasure_GenerationSpeed(_TreasureID, _TickRate);

PROC
LeaderLib_Treasure_Configure_GenerationSpeed((STRING)_TreasureID, (INTEGER)_TickRate)
THEN
DB_LeaderLib_Treasure_GenerationSpeed(_TreasureID, _TickRate);

PROC
LeaderLib_Treasure_Configure_ItemLevel((STRING)_TreasureID, (STRING)_ItemEntry, (INTEGER)_UsePartyLevel)
THEN
LeaderLib_Treasure_Configure_ItemLevel(_TreasureID, _ItemEntry, _UsePartyLevel, 1, 1);

PROC
LeaderLib_Treasure_Configure_ItemLevel((STRING)_TreasureID, (STRING)_ItemEntry, (INTEGER)_UsePartyLevel, (INTEGER)_Level)
THEN
LeaderLib_Treasure_Configure_ItemLevel(_TreasureID, _ItemEntry, _UsePartyLevel, _Level, _Level);

PROC
LeaderLib_Treasure_Configure_ItemLevel((STRING)_TreasureID, (STRING)_ItemEntry, (INTEGER)_UsePartyLevel, (INTEGER)_MinLevel, (INTEGER)_MaxLevel)
AND
DB_LeaderLib_Treasure_ItemLevel(_TreasureID, _ItemEntry, _PrevVal, _PrevMin, _PrevMax)
THEN
NOT DB_LeaderLib_Treasure_ItemLevel(_TreasureID, _ItemEntry, _PrevVal, _PrevMin, _PrevMax);
LeaderLog_Log("DEBUG", "[LeaderLib:TreasureSystem] Previous item level settings for ",_TreasureID,":",_ItemEntry," were removed.");

PROC
LeaderLib_Treasure_Configure_ItemLevel((STRING)_TreasureID, (STRING)_ItemEntry, (INTEGER)_UsePartyLevel, (INTEGER)_MinLevel, (INTEGER)_MaxLevel)
THEN
DB_LeaderLib_Treasure_ItemLevel(_TreasureID, _ItemEntry, _UsePartyLevel, _MinLevel, _MaxLevel);

PROC
LeaderLib_Treasure_Configure_AddDeltaMod((STRING)_TreasureID, (STRING)_ItemEntry, (STRING)_Deltamod, (INTEGER)_Chance)
AND
Random(999999, _Ran)
AND
IntegertoString(_Ran, _RanStr)
AND
StringConcatenate(_TreasureID, _ItemEntry, _Msg1)
AND
StringConcatenate(_Msg1, _DeltaMod, _Msg2)
AND
StringConcatenate(_Msg2, _RanStr, _Str)
THEN
LeaderLib_Treasure_Configure_AddDeltaMod(_Str, _TreasureID, _ItemEntry, _Deltamod, _Chance);

PROC
LeaderLib_Treasure_Configure_AddDeltaMod((STRING)_ID, (STRING)_TreasureID, (STRING)_ItemEntry, (STRING)_Deltamod, (INTEGER)_Chance)
THEN
DB_LeaderLib_Treasure_ItemDeltaMods(_ID, _TreasureID, _ItemEntry, _Deltamod, _Chance);

PROC
LeaderLib_Treasure_Configure_DeltaModLimit((STRING)_TreasureID, (STRING)_ItemEntry, (STRING)_Deltamod, (INTEGER)_Max)
AND
DB_LeaderLib_Treasure_DeltaModLimit(_TreasureID, _ItemEntry, _Deltamod, _LastMax)
THEN
NOT DB_LeaderLib_Treasure_DeltaModLimit(_TreasureID, _ItemEntry, _Deltamod, _LastMax);

PROC
LeaderLib_Treasure_Configure_DeltaModLimit((STRING)_TreasureID, (STRING)_ItemEntry, (STRING)_Deltamod, (INTEGER)_Max)
THEN
DB_LeaderLib_Treasure_DeltaModLimit(_TreasureID, _ItemEntry, _Deltamod, _Max);

PROC
LeaderLib_Treasure_Configure_AddRune((STRING)_TreasureID, (STRING)_ItemEntry, (STRING)_Rune, (INTEGER)_Chance)
AND
Random(999999, _Ran)
AND
IntegertoString(_Ran, _RanStr)
AND
StringConcatenate(_TreasureID, _ItemEntry, _Msg1)
AND
StringConcatenate(_Msg1, _Rune, _Msg2)
AND
StringConcatenate(_Msg2, _RanStr, _Str)
THEN
LeaderLib_Treasure_Configure_AddRune(_Str, _TreasureID, _ItemEntry, _Rune, _Chance);

PROC
LeaderLib_Treasure_Configure_AddRune((STRING)_ID, (STRING)_TreasureID, (STRING)_ItemEntry, (STRING)_Rune, (INTEGER)_Chance)
THEN
DB_LeaderLib_Treasure_ItemRunes(_ID, _TreasureID, _ItemEntry, _Rune, _Chance);

PROC
LeaderLib_Treasure_Configure_AddMaxAmount((STRING)_TreasureID, (STRING)_ItemEntry, (INTEGER)_MaxAmount)
THEN
DB_LeaderLib_Treasure_ItemMaxAmount(_TreasureID, _ItemEntry, _MaxAmount);

PROC
LeaderLib_Treasure_Configure_GenerationEvent((STRING)_TreasureID, (STRING)_ItemEntry, (STRING)_OnGeneratedEvent)
THEN
DB_LeaderLib_Treasure_GeneratedEvent(_TreasureID, _ItemEntry, _OnGeneratedEvent);

PROC
LeaderLib_Treasure_Configure_GenerateOnce((STRING)_TreasureID, (STRING)_ItemEntry, (STRING)_OnCompletionEvent)
THEN
DB_LeaderLib_Treasure_OnlyOnce(_TreasureID, _ItemEntry, _OnCompletionEvent);

//Default the treasure as a whole to keep generating, provided the max item limit isn't reached
PROC
LeaderLib_Treasure_Configure_GenerateTreasureEndlessly((STRING)_TreasureID)
AND
NOT DB_LeaderLib_Treasure_KeepGeneratingTreasure(_TreasureID)
THEN
DB_LeaderLib_Treasure_KeepGeneratingTreasure(_TreasureID);

PROC
LeaderLib_Treasure_Configure_GenerateItemEndlessly((STRING)_TreasureID, (STRING)_ItemEntry, (INTEGER)_Active)
AND
DB_LeaderLib_Treasure_KeepGeneratingItem(_TreasureID, _ItemEntry, _OtherVal)
THEN
NOT DB_LeaderLib_Treasure_KeepGeneratingItem(_TreasureID, _ItemEntry, _OtherVal);

//Keep generating the item on each generation event, provided the max limit isn't reached on the object
PROC
LeaderLib_Treasure_Configure_GenerateItemEndlessly((STRING)_TreasureID, (STRING)_ItemEntry, (INTEGER)_Active)
THEN
DB_LeaderLib_Treasure_KeepGeneratingItem(_TreasureID, _ItemEntry, _Active);

PROC
LeaderLib_Treasure_Configure_TreasureTable_Limit((STRING)_TreasureID, (STRING)_TreasureTable, (INTEGER)_Limit)
AND
DB_LeaderLib_Treasure_TreasureTableLimit(_TreasureID, _TreasureTable, _OtherLimit)
THEN
NOT DB_LeaderLib_Treasure_TreasureTableLimit(_TreasureID, _TreasureTable, _OtherLimit);

PROC
LeaderLib_Treasure_Configure_TreasureTable_Limit((STRING)_TreasureID, (STRING)_TreasureTable, (INTEGER)_Limit)
THEN
DB_LeaderLib_Treasure_TreasureTableLimit(_TreasureID, _TreasureTable, _Limit);

PROC
LeaderLib_Treasure_Configure_TreasureTable_UseTemplateAsItemEntry((STRING)_TreasureID, (STRING)_TreasureTable, (INTEGER)_IsEnabled)
AND
DB_LeaderLib_Treasure_TreasureTableItemEntryMode(_TreasureID, _TreasureTable, _PreviousIsEnabled)
THEN
NOT DB_LeaderLib_Treasure_TreasureTableItemEntryMode(_TreasureID, _TreasureTable, _PreviousIsEnabled);

PROC
LeaderLib_Treasure_Configure_TreasureTable_UseTemplateAsItemEntry((STRING)_TreasureID, (STRING)_TreasureTable, (INTEGER)_IsEnabled)
THEN
DB_LeaderLib_Treasure_TreasureTableItemEntryMode(_TreasureID, _TreasureTable, _IsEnabled);
//END_REGION

//REGION INTERNAL_GENERATION_TYPES
IF
DB_LeaderLib_Treasure_TreasureGenerationType(_TreasureID, _GenerationType)
AND
NOT DB_LeaderLib_Treasure_RegisteredGenerationTypes(_GenerationType)
THEN
DB_LeaderLib_Treasure_RegisteredGenerationTypes(_GenerationType);

IF
DB_LeaderLib_Treasure_ItemGenerationType(_TreasureID, _ItemEntry, _GenerationType)
AND
NOT DB_LeaderLib_Treasure_RegisteredGenerationTypes(_GenerationType)
THEN
DB_LeaderLib_Treasure_RegisteredGenerationTypes(_GenerationType);

PROC
LeaderLib_Treasure_RebuildRegisteredGenerationTypes()
THEN
SysClear("DB_LeaderLib_Treasure_RegisteredGenerationTypes", 1);

PROC
LeaderLib_Treasure_RebuildRegisteredGenerationTypes()
AND
DB_LeaderLib_Treasure_TreasureGenerationType(_TreasureID, _GenerationType)
AND
NOT DB_LeaderLib_Treasure_RegisteredGenerationTypes(_GenerationType)
THEN
DB_LeaderLib_Treasure_RegisteredGenerationTypes(_GenerationType);

PROC
LeaderLib_Treasure_RebuildRegisteredGenerationTypes()
AND
DB_LeaderLib_Treasure_ItemGenerationType(_TreasureID, _ItemEntry, _GenerationType)
AND
NOT DB_LeaderLib_Treasure_RegisteredGenerationTypes(_GenerationType)
THEN
DB_LeaderLib_Treasure_RegisteredGenerationTypes(_GenerationType);
//END_REGION

//REGION CLEAR_ENTRY
PROC
LeaderLib_Treasure_Clear_AllDataForItemEntry((STRING)_TreasureID, (STRING)_ItemEntry)
AND
DB_LeaderLib_Treasure_TreasureItemTemplates(_TreasureID, _ItemEntry, _Amount, _RequirementID)
THEN
NOT DB_LeaderLib_Treasure_TreasureItemTemplates(_TreasureID, _ItemEntry, _Amount, _RequirementID);

PROC
LeaderLib_Treasure_Clear_AllDataForItemEntry((STRING)_TreasureID, (STRING)_ItemEntry)
AND
DB_LeaderLib_Treasure_TreasureItemStats(_TreasureID, _ItemEntry, _Amount, _RequirementID)
THEN
NOT DB_LeaderLib_Treasure_TreasureItemStats(_TreasureID, _ItemEntry, _Amount, _RequirementID);

PROC
LeaderLib_Treasure_Clear_AllDataForItemEntry((STRING)_TreasureID, (STRING)_ItemEntry)
AND
DB_LeaderLib_Treasure_RegisteredTreasureTable(_TreasureID, _ItemEntry, _RequirementID, _UsePartyLevel, _MinLevel, _MaxLevel)
THEN
NOT DB_LeaderLib_Treasure_RegisteredTreasureTable(_TreasureID, _ItemEntry, _RequirementID, _UsePartyLevel, _MinLevel, _MaxLevel);

PROC
LeaderLib_Treasure_Clear_AllDataForItemEntry((STRING)_TreasureID, (STRING)_ItemEntry)
AND
DB_LeaderLib_Treasure_ItemLevel(_TreasureID, _ItemEntry, _MinLevel, _MaxLevel, _UsePartyLevel)
THEN
NOT DB_LeaderLib_Treasure_ItemLevel(_TreasureID, _ItemEntry, _MinLevel, _MaxLevel, _UsePartyLevel);

PROC
LeaderLib_Treasure_Clear_AllDataForItemEntry((STRING)_TreasureID, (STRING)_ItemEntry)
AND
DB_LeaderLib_Treasure_ItemGenerationType(_TreasureID, _ItemEntry, _GenerationType)
THEN
NOT DB_LeaderLib_Treasure_ItemGenerationType(_TreasureID, _ItemEntry, _GenerationType);

PROC
LeaderLib_Treasure_Clear_AllDataForItemEntry((STRING)_TreasureID, (STRING)_ItemEntry)
AND
DB_LeaderLib_Treasure_ItemGenerationFlag(_TreasureID, _ItemEntry, _Flag, _FlagType)
THEN
NOT DB_LeaderLib_Treasure_ItemGenerationFlag(_TreasureID, _ItemEntry, _Flag, _FlagType);

PROC
LeaderLib_Treasure_Clear_AllDataForItemEntry((STRING)_TreasureID, (STRING)_ItemEntry)
AND
DB_LeaderLib_Treasure_ItemDeltaMods(_ID, _TreasureID, _ItemEntry, _Deltamod, _Chance)
THEN
NOT DB_LeaderLib_Treasure_ItemDeltaMods(_ID, _TreasureID, _ItemEntry, _Deltamod, _Chance);

PROC
LeaderLib_Treasure_Clear_AllDataForItemEntry((STRING)_TreasureID, (STRING)_ItemEntry)
AND
DB_LeaderLib_Treasure_ItemRunes(_ID, _TreasureID, _ItemEntry, _Rune, _Chance)
THEN
NOT DB_LeaderLib_Treasure_ItemRunes(_ID, _TreasureID, _ItemEntry, _Rune, _Chance);

PROC
LeaderLib_Treasure_Clear_AllDataForItemEntry((STRING)_TreasureID, (STRING)_ItemEntry)
AND
DB_LeaderLib_Treasure_OnlyOnce(_TreasureID, _ItemEntry, _OnCompletionEvent)
THEN
NOT DB_LeaderLib_Treasure_OnlyOnce(_TreasureID, _ItemEntry, _OnCompletionEvent);

PROC
LeaderLib_Treasure_Clear_AllDataForItemEntry((STRING)_TreasureID, (STRING)_ItemEntry)
AND
DB_LeaderLib_Treasure_GeneratedEvent(_TreasureID, _ItemEntry, _OnGeneratedEvent)
THEN
NOT DB_LeaderLib_Treasure_GeneratedEvent(_TreasureID, _ItemEntry, _OnGeneratedEvent);
//END_REGION

//REGION CLEARING_TREASURE_ALL
PROC
LeaderLib_Treasure_Clear_AllDataForTreasure((STRING)_TreasureID)
AND
DB_LeaderLib_Treasure_RegisteredObject(_TreasureID, _Object)
THEN
NOT DB_LeaderLib_Treasure_RegisteredObject(_TreasureID, _Object);

PROC
LeaderLib_Treasure_Clear_AllDataForTreasure((STRING)_TreasureID)
AND
DB_LeaderLib_Treasure_RegisteredObjectTemplate(_TreasureID, _Template)
THEN
NOT DB_LeaderLib_Treasure_RegisteredObjectTemplate(_TreasureID, _Template);

PROC
LeaderLib_Treasure_Clear_AllDataForTreasure((STRING)_TreasureID)
AND
DB_LeaderLib_Treasure_RegisteredTraderTreasure(_TreasureID, _TraderID)
THEN
NOT DB_LeaderLib_Treasure_RegisteredTraderTreasure(_TreasureID, _TraderID);

PROC
LeaderLib_Treasure_Clear_AllDataForTreasure((STRING)_TreasureID)
THEN
LeaderLib_Treasure_Clear_AllEntriesForTreasure(_TreasureID);
LeaderLib_Treasure_RebuildRegisteredGenerationTypes();

PROC
LeaderLib_Treasure_Clear_AllEntriesForTreasure((STRING)_TreasureID)
AND
DB_LeaderLib_Treasure_TreasureItemTemplates(_TreasureID, _ItemEntry, _Amount, _RequirementID)
THEN
NOT DB_LeaderLib_Treasure_TreasureItemTemplates(_TreasureID, _ItemEntry, _Amount, _RequirementID);
LeaderLib_Treasure_Clear_AllDataForItemEntry(_TreasureID, _ItemEntry);

PROC
LeaderLib_Treasure_Clear_AllEntriesForTreasure((STRING)_TreasureID)
AND
DB_LeaderLib_Treasure_TreasureItemStats(_TreasureID, _ItemEntry, _Amount, _RequirementID)
THEN
NOT DB_LeaderLib_Treasure_TreasureItemStats(_TreasureID, _ItemEntry, _Amount, _RequirementID);
LeaderLib_Treasure_Clear_AllDataForItemEntry(_TreasureID, _ItemEntry);

PROC
LeaderLib_Treasure_Clear_AllEntriesForTreasure((STRING)_TreasureID)
AND
DB_LeaderLib_Treasure_RegisteredTreasureTable(_TreasureID, _ItemEntry, _RequirementID, _UsePartyLevel, _MinLevel, _MaxLevel)
THEN
NOT DB_LeaderLib_Treasure_RegisteredTreasureTable(_TreasureID, _ItemEntry, _RequirementID, _UsePartyLevel, _MinLevel, _MaxLevel);
LeaderLib_Treasure_Clear_AllDataForItemEntry(_TreasureID, _ItemEntry);
//END_REGION

//REGION TRADER_REGISTERING
PROC
LeaderLib_Trader_Register_TraderTemplate((STRING)_TraderID, (STRING)_Template)
AND
NOT DB_LeaderLib_Traders_RegisteredTraderTemplate(_TraderID,_,_)
THEN
DB_LeaderLib_Traders_RegisteredTraderTemplate(_TraderID, _Template, 0);

PROC
LeaderLib_Trader_Register_TraderTemplate((STRING)_TraderID, (STRING)_Template, (INTEGER)_PlaySpawn)
AND
DB_LeaderLib_Traders_RegisteredTraderTemplate(_TraderID,_,_)
THEN
LeaderLog_Log("DEBUG", "[LeaderLib:Trader][ERROR] Error adding trader with ID '", _TraderID, "': Trader already exists!");

PROC
LeaderLib_Trader_Register_TraderTemplate((STRING)_TraderID, (STRING)_Template, (INTEGER)_PlaySpawn)
AND
NOT DB_LeaderLib_Traders_RegisteredTraderTemplate(_TraderID,_,_)
THEN
DB_LeaderLib_Traders_RegisteredTraderTemplate(_TraderID, _Template, _PlaySpawn);

PROC
LeaderLib_Trader_Register_GlobalTrader((STRING)_TraderID, (CHARACTERGUID)_Trader)
AND
NOT DB_LeaderLib_Traders_RegisteredGlobalTrader(_, _Trader)
THEN
DB_LeaderLib_Traders_RegisteredGlobalTrader(_TraderID, _Trader);

PROC
LeaderLib_Trader_Register_TraderInstance((STRING)_TraderID, (CHARACTERGUID)_Character, (STRING)_Level)
AND
NOT DB_LeaderLib_Traders_RegisteredTraderInstance(_, _Character, _Level)
THEN
LeaderLib_Trader_Register_Level(_TraderID, _Level);
DB_LeaderLib_Traders_RegisteredTraderInstance(_TraderID, _Character, _Level);

PROC
LeaderLib_Trader_Register_Level((STRING)_TraderID, (STRING)_Level)
THEN
LeaderLib_Trader_Register_Level(_TraderID, _Level, "");

PROC
LeaderLib_Trader_Register_Level((STRING)_TraderID, (STRING)_Level, (STRING)_RequirementID)
AND
DB_LeaderLib_Traders_RegisteredLevel(_TraderID, _Level, _LastRequirement)
AND
_LastRequirement != _RequirementID
AND
_RequirementID != ""
THEN
NOT DB_LeaderLib_Traders_RegisteredLevel(_TraderID, _Level, _LastRequirement);

PROC
LeaderLib_Trader_Register_Level((STRING)_TraderID, (STRING)_Level, (STRING)_RequirementID)
AND
NOT DB_LeaderLib_Traders_RegisteredLevel(_TraderID,_Level, _)
THEN
DB_LeaderLib_Traders_RegisteredLevel(_TraderID, _Level, _RequirementID);

PROC
LeaderLib_Trader_Register_StartingGold((STRING)_TraderID, (STRING)_Level, (INTEGER)_Amount)
THEN
LeaderLib_Trader_Register_StartingGold(_TraderID, _Level, _Amount, "");

PROC
LeaderLib_Trader_Register_StartingGold((STRING)_TraderID, (STRING)_Level, (INTEGER)_Amount, (STRING)_RequirementID)
THEN
DB_LeaderLib_Traders_StartingGold(_TraderID, _Level, _Amount, _RequirementID);

PROC
LeaderLib_Trader_Register_Dialog((STRING)_TraderID, (STRING)_Dialog)
THEN
LeaderLib_Trader_Register_Dialog(_TraderID, _Dialog, "", "");

PROC
LeaderLib_Trader_Register_Dialog((STRING)_TraderID, (STRING)_Dialog, (STRING)_Level)
THEN
LeaderLib_Trader_Register_Dialog(_TraderID, _Dialog, _Level, "");

PROC
LeaderLib_Trader_Register_Dialog((STRING)_TraderID, (STRING)_Dialog, (STRING)_Level, (STRING)_RequirementID)
AND
DB_LeaderLib_Traders_Dialog(_TraderID, _Dialog, _Level, _PastRequirementID)
AND
_PastRequirementID != _RequirementID
THEN
NOT DB_LeaderLib_Traders_Dialog(_TraderID, _Dialog, _Level, _PastRequirementID);
DB_LeaderLib_Traders_Dialog(_TraderID, _Dialog, _Level, _RequirementID);
LeaderLog_Log("DEBUG", "[LeaderLib:TraderSystem:Register_Dialog] Requirement for [",_TraderID,"][",_Level,"][",_Dialog,"] changed from [",_PastRequirementID,"] to [",_RequirementID,"].");

PROC
LeaderLib_Trader_Register_Dialog((STRING)_TraderID, (STRING)_Dialog, (STRING)_Level, (STRING)_RequirementID)
AND
NOT DB_LeaderLib_Traders_Dialog(_TraderID, _Dialog, _Level, _)
THEN
DB_LeaderLib_Traders_Dialog(_TraderID, _Dialog, _Level, _RequirementID);

PROC
LeaderLib_Trader_Register_Position((STRING)_TraderID, (STRING)_Level, (REAL)_x, (REAL)_y, (REAL)_z)
AND
NOT DB_LeaderLib_Traders_LevelPosition(_TraderID, _Level, _,_,_)
THEN
LeaderLib_Trader_Register_Level(_TraderID, _Level);
DB_LeaderLib_Traders_LevelPosition(_TraderID, _Level, _x, _y, _z);

PROC
LeaderLib_Trader_Register_PositionTrigger((STRING)_TraderID, (STRING)_Level, (TRIGGERGUID)_Trigger)
AND
NOT DB_LeaderLib_Traders_LevelPositionTrigger(_TraderID, _Level, _)
THEN
LeaderLib_Trader_Register_Level(_TraderID, _Level);
DB_LeaderLib_Traders_LevelPositionTrigger(_TraderID, _Level, _Trigger);

PROC
LeaderLib_Trader_Register_PositionObject((STRING)_TraderID, (STRING)_Level, (GUIDSTRING)_Object)
AND
NOT DB_LeaderLib_Traders_LevelPositionObject(_TraderID, _Level, _)
THEN
LeaderLib_Trader_Register_Level(_TraderID, _Level);
DB_LeaderLib_Traders_LevelPositionObject(_TraderID, _Level, _Object);

PROC
LeaderLib_Trader_Register_Rotation_Position((STRING)_TraderID, (STRING)_Level, (REAL)_xr, (REAL)_yr, (REAL)_zr)
AND
DB_LeaderLib_Traders_Rotation_Position(_TraderID, _Level, _OldRotationX, _OldRotationY, _OldRotationZ)
THEN
NOT DB_LeaderLib_Traders_Rotation_Position(_TraderID, _Level, _OldRotationX, _OldRotationY, _OldRotationZ);

PROC
LeaderLib_Trader_Register_Rotation_Position((STRING)_TraderID, (STRING)_Level, (REAL)_xr, (REAL)_yr, (REAL)_zr)
THEN
DB_LeaderLib_Traders_Rotation_Position(_TraderID, _Level, _xr, _yr, _zr);

PROC
LeaderLib_Trader_Register_Rotation_Object((STRING)_TraderID, (STRING)_Level, (GUIDSTRING)_Object)
THEN
DB_LeaderLib_Traders_Rotation_Object(_TraderID, _Level, _Object);

PROC
LeaderLib_Trader_Register_CreationEvent((STRING)_TraderID, (STRING)_EventName)
THEN
DB_LeaderLib_Traders_CreationEvents(_TraderID, _EventName);

PROC
LeaderLib_Trader_Register_Seat((STRING)_TraderID, (STRING)_Level, (ITEMGUID)_Seat)
THEN
LeaderLib_Trader_Register_Seat(_TraderID, _Level, _Seat, "");

PROC
LeaderLib_Trader_Register_Seat((STRING)_TraderID, (STRING)_Level, (ITEMGUID)_Seat, (STRING)_RequirementID)
THEN
LeaderLib_Trader_Register_PositionObject(_TraderID, _Level, _Seat); // Calls LeaderLib_Trader_Register_Level
DB_LeaderLib_Traders_Seat(_TraderID, _Level, _Seat, _RequirementID);
//END_REGION

//REGION TRADER_CLEARING
PROC
LeaderLib_Teasure_Clear_Trader((STRING)_TraderID)
AND
LeaderLib_Traders_QRY_IsRegistered(_TraderID)
THEN
LeaderLog_Log("DEBUG", "[LeaderLib:Traders] Trader [",_TraderID,"] removed from all associated databases.");

PROC
LeaderLib_Teasure_Clear_Trader((STRING)_TraderID)
AND
DB_LeaderLib_Traders_RegisteredTraderTemplate(_TraderID, _Template, _PlaySpawn)
THEN
NOT DB_LeaderLib_Traders_RegisteredTraderTemplate(_TraderID, _Template, _PlaySpawn);

PROC
LeaderLib_Teasure_Clear_Trader((STRING)_TraderID)
AND
DB_LeaderLib_Traders_StartingGold(_TraderID, _Level, _Amount, _RequirementID)
THEN
NOT DB_LeaderLib_Traders_StartingGold(_TraderID, _Level, _Amount, _RequirementID);

PROC
LeaderLib_Teasure_Clear_Trader((STRING)_TraderID)
AND
DB_LeaderLib_Traders_RegisteredGlobalTrader(_TraderID, _Trader)
THEN
NOT DB_LeaderLib_Traders_RegisteredGlobalTrader(_TraderID, _Trader);

PROC
LeaderLib_Teasure_Clear_Trader((STRING)_TraderID)
AND
DB_LeaderLib_Traders_RegisteredLevel(_TraderID, _Level, _RequirementID)
THEN
NOT DB_LeaderLib_Traders_RegisteredLevel(_TraderID, _Level, _RequirementID);

PROC
LeaderLib_Teasure_Clear_Trader((STRING)_TraderID)
AND
DB_LeaderLib_Traders_Dialog(_TraderID, _Level, _Dialog, _RequirementID)
THEN
NOT DB_LeaderLib_Traders_Dialog(_TraderID, _Level, _Dialog, _RequirementID);

PROC
LeaderLib_Teasure_Clear_Trader((STRING)_TraderID)
AND
DB_LeaderLib_Traders_LevelPosition(_TraderID, _Level, _x, _y, _z)
THEN
NOT DB_LeaderLib_Traders_LevelPosition(_TraderID, _Level, _x, _y, _z);

PROC
LeaderLib_Teasure_Clear_Trader((STRING)_TraderID)
AND
DB_LeaderLib_Traders_LevelPositionObject(_TraderID, _Level, _Object)
THEN
NOT DB_LeaderLib_Traders_LevelPositionObject(_TraderID, _Level, _Object);

PROC
LeaderLib_Teasure_Clear_Trader((STRING)_TraderID)
AND
DB_LeaderLib_Traders_LevelPositionTrigger(_TraderID, _Level, _Trigger)
THEN
NOT DB_LeaderLib_Traders_LevelPositionTrigger(_TraderID, _Level, _Trigger);

PROC
LeaderLib_Teasure_Clear_Trader((STRING)_TraderID)
AND
DB_LeaderLib_Traders_Rotation_Position(_TraderID, _Level, _xr, _yr, _zr)
THEN
NOT DB_LeaderLib_Traders_Rotation_Position(_TraderID, _Level, _xr, _yr, _zr);

PROC
LeaderLib_Teasure_Clear_Trader((STRING)_TraderID)
AND
DB_LeaderLib_Traders_Rotation_Object(_TraderID, _Level, _Object)
THEN
NOT DB_LeaderLib_Traders_Rotation_Object(_TraderID, _Level, _Object);

PROC
LeaderLib_Teasure_Clear_Trader((STRING)_TraderID)
AND
DB_LeaderLib_Traders_CreationEvents(_TraderID, _EventName)
THEN
NOT DB_LeaderLib_Traders_CreationEvents(_TraderID, _EventName);

PROC
LeaderLib_Teasure_Clear_Trader((STRING)_TraderID)
AND
DB_LeaderLib_Traders_Seat(_TraderID, _Level, _Seat, _RequirementID)
THEN
NOT DB_LeaderLib_Traders_Seat(_TraderID, _Level, _Seat, _RequirementID);
//END_REGION

//REGION UPDATE_OLD_DATA
/*
PROC
LeaderUpdater_ModUpdated("LeaderLib", "LaughingLeader", (STRING)_PastVersion, (STRING)_NewVersion)
AND
LeaderLib_StringExt_QRY_VersionIsLessThan(_PastVersion, 0, 9, 3, 0)
THEN
LeaderLog_Log("SYSTEM", "[LeaderLib:Treasure:Registering] Updated treasure databases from version [",_PastVersion,"] to [0.9.3.0].");
*/
//END_REGION

//REGION QUERIES
QRY
LeaderLib_Treasure_QRY_HasRegisteredItems((STRING)_TreasureID)
AND
DB_LeaderLib_Treasure_TreasureItemTemplates(_TreasureID, _ItemEntry, _Amount, _RequirementID)
THEN
DB_NOOP(1);

QRY
LeaderLib_Treasure_QRY_HasRegisteredItems((STRING)_TreasureID)
AND
DB_LeaderLib_Treasure_TreasureItemStats(_TreasureID, _ItemEntry, _Amount, _RequirementID)
THEN
DB_NOOP(1);

QRY
LeaderLib_Treasure_QRY_HasRegisteredItems((STRING)_TreasureID)
AND
DB_LeaderLib_Treasure_RegisteredTreasureTable(_TreasureID, _TreasureTable, _RequirementID, _UsePartyLevel, _MinLevel, _MaxLevel)
THEN
DB_NOOP(1);
//END_REGION
EXITSECTION

ENDEXITSECTION
ParentTargetEdge "LaughingLeader__LeaderLib"
