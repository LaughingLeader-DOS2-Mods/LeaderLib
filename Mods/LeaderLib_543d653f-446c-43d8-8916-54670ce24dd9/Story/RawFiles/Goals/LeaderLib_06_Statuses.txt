Version 1
SubGoalCombiner SGC_AND
INITSECTION

KBSECTION

//Applying the passive status and setting the associated flag should be handled by mods directly.
//What LeaderLib does is reapply that status if the flag is set, when RemoveHarmfulStatuses is called, or when the character is resurrected.

//REGION REGISTER_PERMANENT_STATUS
PROC
LeaderLib_Statuses_Register_PermanentStatus((STRING)_ModID, (STRING)_Group, (STRING)_Status, (STRING)_Flag)
THEN
DB_LeaderLib_Statuses_PermanentStatus(_ModID, _Group, _Status, _Flag);
LeaderLib_Statuses_OnPermanentStatusRegistered(_ModID, _Group, _Status, _Flag);

PROC
LeaderLib_Statuses_OnPermanentStatusRegistered((STRING)_ModID, (STRING)_Group, (STRING)_Status, (STRING)_Flag)
AND
DB_GlobalFlag("LeaderLib_Initialized")
THEN
LeaderLib_Statuses_Internal_ToggleWorkaroundScripts(_ModID);

PROC
LeaderLib_Statuses_OnPermanentStatusRegistered((STRING)_ModID, (STRING)_Group, (STRING)_Status, (STRING)_Flag)
AND
NOT DB_GlobalFlag("LeaderLib_Initialized")
THEN
DB_LeaderLib_Statuses_Temp_CheckModsOnInit(1);
//END_REGION

//REGION PERMANENT_STATUS_CLEAR_ENTRIES
PROC
LeaderLib_Statuses_Clear_PermanentStatus((STRING)_Group, (STRING)_Status)
AND
DB_LeaderLib_Statuses_PermanentStatus(_ModID, _Group, _Status, _Flag)
THEN
NOT DB_LeaderLib_Statuses_PermanentStatus(_ModID, _Group, _Status, _Flag);

PROC
LeaderLib_Statuses_Clear_Group((STRING)_Group)
AND
DB_LeaderLib_Statuses_PermanentStatus(_ModID, _Group, _Status, _Flag)
THEN
NOT DB_LeaderLib_Statuses_PermanentStatus(_ModID, _Group, _Status, _Flag);

PROC
LeaderLib_Statuses_Clear_Mod((STRING)_ModID)
AND
DB_LeaderLib_Statuses_PermanentStatus(_ModID, _Group, _Status, _Flag)
THEN
NOT DB_LeaderLib_Statuses_PermanentStatus(_ModID, _Group, _Status, _Flag);
//END_REGION

//REGION TOGGLED_SCRIPT_ACTIVATION
PROC
LeaderLib_Statuses_Internal_ToggleWorkaroundScripts((STRING)_ModID)
AND
NOT DB_GlobalFlag("LeaderLib_TS_RemoveHarmfulStatusesEnabled")
AND
LeaderUpdater_QRY_ModIsActive(_ModID)
THEN
GlobalSetFlag("LeaderLib_TS_RemoveHarmfulStatusesEnabled");

PROC
LeaderLib_Statuses_Internal_ToggleWorkaroundScripts()
AND
NOT DB_GlobalFlag("LeaderLib_TS_RemoveHarmfulStatusesEnabled")
AND
DB_LeaderLib_Statuses_PermanentStatus(_ModID, _Group, _Status, _Flag)
AND
LeaderUpdater_QRY_ModIsActive(_ModID)
AND
NOT DB_GlobalFlag("LeaderLib_TS_RemoveHarmfulStatusesEnabled")
THEN
GlobalSetFlag("LeaderLib_TS_RemoveHarmfulStatusesEnabled");

IF
StoryEvent(_, "LeaderLib_Initialized")
AND
DB_LeaderLib_Statuses_Temp_CheckModsOnInit(1)
THEN
NOT DB_LeaderLib_Statuses_Temp_CheckModsOnInit(1);
LeaderLib_Statuses_Internal_ToggleWorkaroundScripts();

QRY
LeaderLib_Statuses_QRY_Internal_RegisteredModsAreActive()
AND
DB_LeaderLib_Statuses_PermanentStatus(_ModID, _Group, _Status, _Flag)
AND
LeaderUpdater_QRY_ModIsActive(_ModID)
THEN
DB_NOOP(1);

//Registered mods becoming deactivated
PROC
LeaderUpdater_OnModNotActive((STRING)_ModID, (STRING)_Author, (STRING)_GoalTitle)
AND
DB_GlobalFlag("LeaderLib_TS_RemoveHarmfulStatusesEnabled")
AND
NOT LeaderLib_Statuses_QRY_Internal_RegisteredModsAreActive()
THEN
GlobalClearFlag("LeaderLib_TS_RemoveHarmfulStatusesEnabled");
//END_REGION

//REGION UTIL
PROC
LeaderLib_Statuses_Internal_UpdateFlag((CHARACTERGUID)_Character, (STRING)_Status, (STRING)_Flag, 1)
AND
NOT DB_LeaderLib_Statuses_PermanentStatusBlocked(_Character, _Status, _Flag)
THEN
ObjectSetFlag(_Character, _Flag, 0);

PROC
LeaderLib_Statuses_Internal_UpdateFlag((CHARACTERGUID)_Character, (STRING)_Status, (STRING)_Flag, 0)
AND
NOT DB_LeaderLib_Statuses_PermanentStatusBlocked(_Character, _Status, _Flag)
THEN
ObjectClearFlag(_Character, _Flag, 0);
//END_REGION

//REGION REMOVE_HARMFUL_STATUSES_WORKAROUND
PROC
LeaderLib_TS_Internal_RemoveHarmfulStatusesCalled((CHARACTERGUID)_Character)
THEN
ProcObjectTimerCancel(_Character, "LeaderLib_Timers_ReapplyPermanentStatuses");
ProcObjectTimer(_Character, "LeaderLib_Timers_ReapplyPermanentStatuses", 250);

PROC
ProcObjectTimerFinished((CHARACTERGUID)_Character, "LeaderLib_Timers_ReapplyPermanentStatuses")
THEN
LeaderLib_Statuses_ApplyPermanentStatuses(_Character);

PROC
LeaderLib_Statuses_BlockPermanentStatus((CHARACTERGUID)_Character, (STRING)_Status, (STRING)_Flag)
THEN
//DB_LeaderLib_Statuses_PermanentStatusBlocked(_Character, _Status, _Flag)
DB_NOOP(1);

PROC
LeaderLib_Statuses_ApplyPermanentStatuses((CHARACTERGUID)_Character)
AND
DB_LeaderLib_Statuses_PermanentStatus(_ModID, _ID, _Status, _Flag)
AND
LeaderUpdater_QRY_ModIsActive(_ModID)
AND
ObjectGetFlag(_Character, _Flag, 1)
AND
//HasActiveStatus(_Character, _Status, 0)
NOT LeaderLib_Helper_QRY_HasStatus(_Character, _Status)
THEN
LeaderLib_Statuses_BlockPermanentStatus(_Character, _Status, _Flag);
LeaderLib_Statuses_Internal_ApplyPermanentStatus(_Character, _Status, _Flag);

PROC
LeaderLib_Statuses_Internal_ApplyPermanentStatus((CHARACTERGUID)_Character, (STRING)_Status, (STRING)_Flag)
AND
NOT DB_LeaderLib_Statuses_PermanentStatusBlocked(_Character, _Status, _Flag)
THEN
ApplyStatus(_Character, _Status, -1.0, 1, _Character);

PROC
LeaderLib_Statuses_Internal_ApplyPermanentStatus((CHARACTERGUID)_Character, (STRING)_Status, (STRING)_Flag)
AND
DB_LeaderLib_Statuses_PermanentStatusBlocked(_Character, _Status, _Flag)
THEN
NOT DB_LeaderLib_Statuses_PermanentStatusBlocked(_Character, _Status, _Flag);
//END_REGION

//REGION MODIFY_SINGLE
//Non-forced, requires flag to be set by other means
PROC
LeaderLib_Statuses_ApplyPermanentStatus((CHARACTERGUID)_Character, (STRING)_Status)
THEN
LeaderLib_Statuses_ApplyPermanentStatus(_Character, _Status, 0);

PROC
LeaderLib_Statuses_ApplyPermanentStatus((CHARACTERGUID)_Character, (STRING)_Status, (INTEGER)_Force)
AND
DB_LeaderLib_Statuses_PermanentStatus(_ModID, _ID, _Status, _Flag)
AND
LeaderUpdater_QRY_ModIsActive(_ModID)
AND
ObjectGetFlag(_Character, _Flag, _IsActive)
AND
IntegerMax(_Force, _IsActive, _DoApply) // Force >= 1, then apply it no matter what
AND
_DoApply >= 1
THEN
LeaderLib_Statuses_BlockPermanentStatus(_Character, _Status, _Flag);
LeaderLib_Statuses_Internal_UpdateFlag(_Character, _Status, _Flag, 1);
LeaderLib_Statuses_Internal_ApplyPermanentStatus(_Character, _Status, _Flag);

PROC
LeaderLib_Statuses_RemovePermanentStatus((CHARACTERGUID)_Character, (STRING)_Status)
AND
DB_LeaderLib_Statuses_PermanentStatus(_ModID, _ID, _Status, _Flag)
THEN
RemoveStatus(_Character, _Status);
ObjectClearFlag(_Character, _Flag, 0);
//END_REGION

//REGION MODIFY_BY_FLAG
PROC
LeaderLib_Statuses_ApplyPermanentStatusByFlag((CHARACTERGUID)_Character, (STRING)_Flag)
THEN
LeaderLib_Statuses_ApplyPermanentStatusByFlag(_Character, _Flag, 0);

PROC
LeaderLib_Statuses_ApplyPermanentStatusByFlag((CHARACTERGUID)_Character, (STRING)_Flag, (INTEGER)_Force)
AND
DB_LeaderLib_Statuses_PermanentStatus(_ModID, _ID, _Status, _Flag)
AND
LeaderUpdater_QRY_ModIsActive(_ModID)
AND
ObjectGetFlag(_Character, _Flag, _IsActive)
AND
IntegerMax(_Force, _IsActive, _DoApply) // Force >= 1, then apply it no matter what
AND
_DoApply >= 1
THEN
LeaderLib_Statuses_BlockPermanentStatus(_Character, _Status, _Flag);
LeaderLib_Statuses_Internal_UpdateFlag(_Character, _Status, _Flag, 1);
LeaderLib_Statuses_Internal_ApplyPermanentStatus(_Character, _Status, _Flag);

PROC
LeaderLib_Statuses_RemovePermanentStatusByFlag((CHARACTERGUID)_Character, (STRING)_Flag)
AND
DB_LeaderLib_Statuses_PermanentStatus(_ModID, _ID, _Status, _Flag)
THEN
RemoveStatus(_Character, _Status);
ObjectClearFlag(_Character, _Flag, 0);
//END_REGION

EXITSECTION

ENDEXITSECTION
ParentTargetEdge "LaughingLeader__LeaderLib"