#INCLUDE LeaderLib_TypeHelpers
#INCLUDE LeaderLib_ForceHelpers
#INCLUDE LeaderLib_Auras

INIT
	FIXEDSTRING:%LeaderLib_EmptyString=""
	INT:%LeaderLib_EmptyInt=0
	INT:%LeaderLib_DefaultShowInTrade=1
	INT:%LeaderLib_DefaultAmount=1
	
	STRING:%LeaderLib_CharacterIterator_CharacterEvent = ""
	FIXEDSTRING:%CharacterIterator_Tag = ""
	
	STRING:%ItemIterator_ItemEvent = ""
	FIXEDSTRING:%ItemIterator_Tag = ""
	
	STRING:%LeaderLib_InventoryIterator_ItemEvent = ""
	FIXEDSTRING:%LeaderLib_InventoryIterator_Tag = ""
	
	CHARACTER:%LeaderLib_CreateByStat_Dummy = null
	
	USING LeaderLib_TypeHelpers
	USING LeaderLib_ForceHelpers
	USING LeaderLib_Auras
EVENTS

/* This event doesn't seem to fire
EVENT LeaderLib_CC_SelectedPresetChanged
VARS
	CHARACTER:_Player
	FIXEDSTRING:_Class
	STRING:_Str
ON
	OnCharacterClassChanged(_Player, _Class)
ACTIONS
IF "!c1"
	IsEqual(_Player, null)
THEN
	SetVar(_Player, "LeaderLib_CharacterCreationPreset", _Class)
	
	Print(_Str, "[LeaderLib:LeaderLib_Main:OnCharacterClassChanged] Selected preset is ([1]).", _Class)
	SetVar(_Player, "LeaderLog_Message", _Str)
	CharacterEvent(_Player, "LeaderLog_Commands_Log")
ENDIF
*/

EVENT LeaderLib_CC_SetPreset
VARS
	CHARACTER:_Player
	FIXEDSTRING:_Class
ON
	OnCharacterEvent(_Player, "LeaderLib_CC_SetPreset")
ACTIONS
IF "c1&!c2"
	CharacterGetCreationClass(_Player, _Class)
	IsEqual(_Class, null)
THEN
	SetVar(_Player, "LeaderLib_CharacterCreationPreset", _Class)
ENDIF
	CharacterEvent(_Player, "LeaderLib_Events_OnPresetSet")

EVENT LeaderLib_Events_AddTreasureTable
VARS
	CHARACTER:_Target
	FIXEDSTRING:_TableName
ON
	OnCharacterEvent(_Target, "LeaderLib_Commands_AddTreasureTable")
ACTIONS
IF "c1"
	GetVar(_TableName, _Target, "LeaderLib_TreasureTableToAdd")
THEN
	CharacterAddTreasureTable(_Target, _TableName)
	CharacterEvent(_Target, "LeaderLib_Events_OnTreasureTableAdded")
	//SetVar(_Target, "LeaderLib_TreasureTableToAdd", %LeaderLib_EmptyString)
ENDIF

EVENT LeaderLib_Events_RemoveTreasureTable
VARS
	CHARACTER:_Target
	FIXEDSTRING:_TableName
ON
	OnCharacterEvent(_Target, "LeaderLib_Commands_RemoveTreasureTable")
ACTIONS
IF "c1"
	GetVar(_TableName, _Target, "LeaderLib_TreasureTableToRemove")
THEN
	CharacterRemoveTreasureTable(_Target, _TableName)
	CharacterEvent(_Target, "LeaderLib_Events_OnTreasureTableRemoved")
	//SetVar(_Target, "LeaderLib_TreasureTableToRemove", %LeaderLib_EmptyString)
ENDIF

EVENT LeaderLib_Events_ClearTreasureTables
VARS
	CHARACTER:_Target
	FIXEDSTRING:_TableName
ON
	OnCharacterEvent(_Target, "LeaderLib_Commands_ClearTreasureTables")
ACTIONS
	CharacterClearTreasureTables(_Target)
	CharacterEvent(_Target, "LeaderLib_Events_OnTreasureTablesCleared")
	
EVENT LeaderLib_Events_GenerateItemByStat
VARS
	FIXEDSTRING:_StatName
	CHARACTER:_Character
	INT:_ShowInTrade
	INT:_Amount
	FIXEDSTRING:_FlagToSet
ON
	OnCharacterEvent(_Character, "LeaderLib_Commands_CreateItemByStat")
ACTIONS
IF "c1"
	GetVar(_StatName, _Character, "LeaderLib_CreateByStat_NextStatToCreate")
THEN
	IF "c1"
		GetVar(_ShowInTrade, _Character, "LeaderLib_CreateByStat_ShowInTrade")
	THEN
	ELSE
		Set(_ShowInTrade, %LeaderLib_DefaultShowInTrade)
	ENDIF
	IF "c1"
		GetVar(_Amount, _Character, "LeaderLib_CreateByStat_AmountToCreate")
	THEN
	ELSE
		Set(_Amount, %LeaderLib_DefaultAmount)
	ENDIF
	IF "c1"
		GetVar(_FlagToSet, _Character, "LeaderLib_CreateByStat_FlagToSet")
	THEN
		SetFlag(_Character, _FlagToSet)
	ENDIF
	CharacterAddToInventory(_Character, _StatName, _Amount, _ShowInTrade)
	CharacterEvent(_Character, "LeaderLib_Events_OnItemCreatedWithStat")
	
	IF "c1"
		HasFlag(_Character, "LeaderLib_CreateByStat_ResetVars")
	THEN
		ClearFlag(_Character, "LeaderLib_CreateByStat_ResetVars")
		SetVar(_Character, "LeaderLib_CreateByStat_NextStatToCreate", %LeaderLib_EmptyString)
		SetVar(_Character, "LeaderLib_CreateByStat_ShowInTrade", %LeaderLib_DefaultShowInTrade)
		SetVar(_Character, "LeaderLib_CreateByStat_AmountToCreate", %LeaderLib_DefaultAmount)
		SetVar(_Character, "LeaderLib_CreateByStat_FlagToSet", %LeaderLib_EmptyString)
	ENDIF
ENDIF

EVENT LeaderLog_CombatLog_Character
VARS
	CHARACTER:_Character
	FIXEDSTRING:_Text
ON
	OnCharacterEvent(_Character, "LeaderLib_Commands_LogToCombatLog")
ACTIONS
IF "c1"
	GetVar(_Text, _Character, "LeaderLog_CombatLogText")
THEN
	DisplayCombatInfoText(_Character, _Text, 0.0)
	DisplayText(_Character, "", 0.0)
	CharacterEvent(_Character, "LeaderLib_Events_OnCombatLog")
ENDIF

EVENT LeaderLog_CombatLog_Item
VARS
	ITEM:_Item
	FIXEDSTRING:_Text
ON
	OnItemEvent(_Item, "LeaderLib_Commands_LogToCombatLog")
ACTIONS
IF "c1"
	GetVar(_Text, _Item, "LeaderLog_CombatLogText")
THEN
	DisplayCombatInfoText(_Item, _Text, 0.0)
	DisplayText(_Item, "", 0.0)
	ItemEvent(_Item, "LeaderLib_Events_OnCombatLog")
ENDIF

EVENT LeaderLog_DisplayStatusText_Character
VARS
	CHARACTER:_Target
	FIXEDSTRING:_Text
ON
	OnCharacterEvent(_Target, "LeaderLog_Commands_DisplayStatusText")
ACTIONS
IF "c1"
	GetVar(_Text, _Target, "LeaderLog_Internal_StatusText")
THEN
	StatusText(_Target, _Text)
	SetVar(_Target, "LeaderLog_Internal_StatusText", FIXEDSTRING:"")
ENDIF

EVENT LeaderLog_DisplayStatusText_Item
VARS
	ITEM:_Target
	FIXEDSTRING:_Text
ON
	OnItemEvent(_Target, "LeaderLog_Commands_DisplayStatusText")
ACTIONS
IF "c1"
	GetVar(_Text, _Target, "LeaderLog_Internal_StatusText")
THEN
	StatusText(_Target, _Text)
	SetVar(_Target, "LeaderLog_Internal_StatusText", FIXEDSTRING:"")
ENDIF

EVENT LeaderLog_RealToStringWithEvent_Character
VARS
	CHARACTER:_Target
	FLOAT:_RealVal
	STRING:_Str
	STRING:_CompletionEvent
ON
	OnCharacterEvent(_Target, "LeaderLog_Commands_RealToStringWithEvent")
ACTIONS
IF "c1&c2"
	GetVar(_RealVal, _Target, "LeaderLog_RealValue")
	GetVar(_CompletionEvent, _Target, "LeaderLog_RealToString_CompletionEvent")
THEN
	Print(_Str, "[1]", _RealVal)
	SetVar(_Target, "LeaderLog_RealString", _Str)
	CharacterEvent(_Target, _CompletionEvent)
ENDIF

EVENT LeaderLog_RealToStringWithEvent_Item
VARS
	ITEM:_Target
	FLOAT:_RealVal
	STRING:_Str
	STRING:_CompletionEvent
ON
	OnItemEvent(_Target, "LeaderLog_Commands_RealToStringWithEvent")
ACTIONS
IF "c1&c2"
	GetVar(_RealVal, _Target, "LeaderLog_RealValue")
	GetVar(_CompletionEvent, _Target, "LeaderLog_RealToString_CompletionEvent")
THEN
	Print(_Str, "[1]", _RealVal)
	SetVar(_Target, "LeaderLog_RealString", _Str)
	ItemEvent(_Target, _CompletionEvent)
ENDIF

EVENT LeaderLog_RealToString_Character
VARS
	CHARACTER:_Target
	FLOAT:_RealVal
	STRING:_Prefix
	STRING:_Suffix
	STRING:_Str
ON
	OnCharacterEvent(_Target, "LeaderLog_Commands_RealToString")
ACTIONS
IF "c1&c2&c3"
	GetVar(_Prefix, _Target, "LeaderLog_RealToString_Prefix")
	GetVar(_Suffix, _Target, "LeaderLog_RealToString_Suffix")
	GetVar(_RealVal, _Target, "LeaderLog_RealToString_Value")
THEN
	Print(_Str, "[1][2][3]", _Prefix, _RealVal, _Suffix)
	SetVar(_Target, "LeaderLog_Type", STRING:"Debug")
	SetVar(_Target, "LeaderLog_Message", _Str)
	CharacterEvent(_Target, "LeaderLog_Commands_Log")
ENDIF

EVENT LeaderLog_RealToString_Item
VARS
	ITEM:_Target
	FLOAT:_RealVal
	STRING:_Prefix
	STRING:_Suffix
	STRING:_Str
ON
	OnItemEvent(_Target, "LeaderLog_Commands_RealToString")
ACTIONS
IF "c1&c2&c3"
	GetVar(_Prefix, _Target, "LeaderLog_RealToString_Prefix")
	GetVar(_Suffix, _Target, "LeaderLog_RealToString_Suffix")
	GetVar(_RealVal, _Target, "LeaderLog_RealToString_Value")
THEN
	Print(_Str, "[1][2][3]", _Prefix, _RealVal, _Suffix)
	SetVar(_Target, "LeaderLog_Type", STRING:"Debug")
	SetVar(_Target, "LeaderLog_Message", _Str)
	ItemEvent(_Target, "LeaderLog_Commands_Log")
ENDIF

EVENT LeaderLog_PositionToString_Character
VARS
	CHARACTER:_Target
	FLOAT3:_Pos
	STRING:_Prefix
	STRING:_Suffix
	STRING:_Str
	FIXEDSTRING:_StrF
ON
	OnCharacterEvent(_Target, "LeaderLog_Commands_PositionToString")
ACTIONS
IF "c1&c2&((c3&!c4)|(c4&c5))"
	GetVar(_Prefix, _Target, "LeaderLog_PositionToString_Prefix")
	GetVar(_Suffix, _Target, "LeaderLog_PositionToString_Suffix")
	
	GetVar(_Pos, _Target, "LeaderLog_PositionToString_Position")
	IsEqual(_Pos, null)
	GetPosition(_Target, _Pos)
THEN
	SetVar(_Target, "LeaderLog_PositionToString_Position", FLOAT3:null)
	//Assert("[1][2][3]", _Prefix, _Pos, _Suffix)
	Print(_Str, "[1][2][3]", _Prefix, _Pos, _Suffix)
	SetVar(_Target, "LeaderLog_Type", STRING:"Debug")
	SetVar(_Target, "LeaderLog_Message", _Str)
	CharacterEvent(_Target, "LeaderLog_Commands_Log")
ENDIF

EVENT LeaderLog_PositionToString_Item
VARS
	ITEM:_Target
	FLOAT3:_Pos
	STRING:_Prefix
	STRING:_Suffix
	STRING:_Str
	FIXEDSTRING:_StrF
ON
	OnItemEvent(_Target, "LeaderLog_Commands_PositionToString")
ACTIONS
IF "c1&c2&((c3&!c4)|(c4&c5))"
	GetVar(_Prefix, _Target, "LeaderLog_PositionToString_Prefix")
	GetVar(_Suffix, _Target, "LeaderLog_PositionToString_Suffix")
	
	GetVar(_Pos, _Target, "LeaderLog_PositionToString_Position")
	IsEqual(_Pos, null)
	GetPosition(_Target, _Pos)
THEN
	SetVar(_Target, "LeaderLog_PositionToString_Position", FLOAT3:null)
	//Assert("[1][2][3]", _Prefix, _Pos, _Suffix)
	Print(_Str, "[1][2][3]", _Prefix, _Pos, _Suffix)
	SetVar(_Target, "LeaderLog_Type", STRING:"Debug")
	SetVar(_Target, "LeaderLog_Message", _Str)
	ItemEvent(_Target, "LeaderLog_Commands_Log")
ENDIF

EVENT LeaderLib_Events_AutoLevelItems_Start
VARS
	CHARACTER:_Character
ON
	OnCharacterEvent(_Character, "LeaderLib_Events_AutoLevelItems_Start")
ACTIONS
	IterateItemsInInventory(_Character, "LeaderLib_Iterator_AutoLevelItems", "LeaderLib_AutoLevel")

EVENT LeaderLib_Events_AutoLevelItems_Iterate
VARS
	ITEM:_Item
	INT:_Level
	FLOAT:_LevelF
	STRING:_Str
ON
	OnIterateItem(_Item, "LeaderLib_Iterator_AutoLevelItems")
ACTIONS
IF "c1"
	ItemGetStat(_LevelF, _Item, Level)
THEN
	Cast(_Level, _LevelF)
	SetVar(_Item, "LeaderLib_Level", _Level)
	/*
	Print(_Str, "[LeaderLib:LeaderLib_Main:AutoLevelItemsIterate] Item's level is [1]", _LevelF)
	SetVar(_Item, "LeaderLog_Message", _Str)
	ItemEvent(_Item, "LeaderLog_Commands_Log")
	*/
ENDIF
	//If we couldn't get the level stat for some reason, it'll default to the character's level (in story).
	ItemEvent(_Item, "LeaderLib_Commands_AutoLevelItem")
	
EVENT LeaderLib_Events_AutoLevelItems_Single
VARS
	CHARACTER:_Character
	ITEM:_Item
	FLOAT:_CharLevel
	FLOAT:_ItemLevel
	INT:_ItemLevelVar
	STRING:_Str
	FIXEDSTRING:_Message
ON
	OnCharacterItemEvent(_Character, _Item, "LeaderLib_Commands_CheckItemLevel")
ACTIONS
IF "c1&c2"
	CharacterGetStat(_CharLevel, _Character, Level)
	ItemGetStat(_ItemLevel, _Item, Level)
THEN
	Cast(_ItemLevelVar, _ItemLevel)
	SetVar(_Item, "LeaderLib_Level", _ItemLevelVar)
	IF "c1"
		IsLessThen(_ItemLevel, _CharLevel)
	THEN
		CharacterItemEvent(_Character, _Item, "LeaderLib_Commands_AutoLevelItem")
	ENDIF
	CharacterItemEvent(_Character, _Item, "LeaderLib_Events_ItemLevelCheckFinished")
	/*
	Print(_Str, "Item level: [1] | Char Level: [2]", _ItemLevel, _CharLevel)
	Cast(_Message, _Str)
	StatusText(_Character, _Message)
	*/
ENDIF

EVENT LeaderLib_Events_SetItemVariables
VARS
	ITEM:_Item
	FLOAT:_ItemLevel
	INT:_ItemLevelVar
	FIXEDSTRING:_Rarity
	STRING:_CompletionEventName
ON
	OnItemEvent(_Item, "LeaderLib_Commands_SetItemVariables")
ACTIONS
IF "c1"
	ItemGetStat(_ItemLevel, _Item, Level)
THEN
	Cast(_ItemLevelVar, _ItemLevel)
	SetVar(_Item, "LeaderLib_Level", _ItemLevelVar)
ENDIF
IF "c1"
	ItemGetItemType(_Item, _Rarity)
THEN
	SetVar(_Item, "LeaderLib_Rarity", _Rarity)
ENDIF
	ItemEvent(_Item, "LeaderLib_Events_ItemVariablesSet")
IF "c1"
	GetVar(_CompletionEventName, _Item, "LeaderLib_ItemVariablesSetEvent")
THEN
	ItemEvent(_Item, _CompletionEventName)
ENDIF

EVENT LeaderLib_Events_CharacterIterator
VARS
	ITEM:_EventParser
ON
	OnItemEvent(_EventParser, "LeaderLib_Commands_StartCharacterIterator")
ACTIONS
IF "c1&c2&!c3"
	GetVar(%LeaderLib_CharacterIterator_CharacterEvent, _EventParser, "LeaderLib_IteratorEvent")
	GetVar(%CharacterIterator_Tag, _EventParser, "LeaderLib_IteratorTag")
	IsEqual(%LeaderLib_CharacterIterator_CharacterEvent, null)
THEN
	IterateCharacters("LeaderLib_Events_Iterate_OnIterateCharacter", null, null, %CharacterIterator_Tag)
ENDIF

EVENT LeaderLib_Events_OnIterateCharacter
VARS
	CHARACTER:_Char
ON
	OnIterateCharacter(_Char, "LeaderLib_Events_Iterate_OnIterateCharacter")
ACTIONS
IF "!c1&!c2"
	IsEqual(%LeaderLib_CharacterIterator_CharacterEvent, "")
	IsEqual(%LeaderLib_CharacterIterator_CharacterEvent, null)
THEN
	CharacterEvent(_Char, %LeaderLib_CharacterIterator_CharacterEvent)
ENDIF

EVENT LeaderLib_Events_ItemIterator
VARS
	ITEM:_EventParser
ON
	OnItemEvent(_EventParser, "LeaderLib_Commands_StartItemIterator")
ACTIONS
IF "c1&c2&!c3"
	GetVar(%ItemIterator_ItemEvent, _EventParser, "LeaderLib_IteratorEvent")
	GetVar(%ItemIterator_Tag, _EventParser, "LeaderLib_IteratorTag")
	IsEqual(%ItemIterator_ItemEvent, null)
THEN
	IterateItems("LeaderLib_Events_Iterate_OnIterateItem", %ItemIterator_Tag)
ENDIF

EVENT LeaderLib_Events_OnIterateItem
VARS
	ITEM:_Item
ON
	OnIterateItem(_Item, "LeaderLib_Events_Iterate_OnIterateItem")
ACTIONS
IF "!c1&!c2"
	IsEqual(%ItemIterator_ItemEvent, "")
	IsEqual(%ItemIterator_ItemEvent, null)
THEN
	ItemEvent(_Item, %ItemIterator_ItemEvent)
ENDIF

EVENT LeaderLib_Events_InventoryIterator_Character
VARS
	CHARACTER:_Target
ON
	OnCharacterEvent(_Target, "LeaderLib_Commands_StartInventoryIterator")
ACTIONS
IF "c1&c2&!c3"
	GetVar(%LeaderLib_InventoryIterator_ItemEvent, _Target, "LeaderLib_IteratorEvent")
	GetVar(%LeaderLib_InventoryIterator_Tag, _Target, "LeaderLib_IteratorTag")
	IsEqual(%LeaderLib_InventoryIterator_ItemEvent, null)
THEN
	IterateItemsInInventory(_Target, "LeaderLib_Events_Iterate_OnIterateItemInInventory", %ItemIterator_Tag)
ENDIF

EVENT LeaderLib_Events_InventoryIterator_Item
VARS
	ITEM:_Target
ON
	OnItemEvent(_Target, "LeaderLib_Commands_StartInventoryIterator")
ACTIONS
IF "c1&!c2&(c3|!c3)"
	GetVar(%LeaderLib_InventoryIterator_ItemEvent, _Target, "LeaderLib_IteratorEvent")
	IsEqual(%LeaderLib_InventoryIterator_ItemEvent, null)
	GetVar(%LeaderLib_InventoryIterator_Tag, _Target, "LeaderLib_IteratorTag")
THEN
	IterateItemsInInventory(_Target, "LeaderLib_Events_Iterate_OnIterateItemInInventory", %ItemIterator_Tag)
ENDIF

EVENT LeaderLib_Events_InventoryIterator_OnIterateItem
VARS
	ITEM:_Item
ON
	OnIterateItem(_Item, "LeaderLib_Events_Iterate_OnIterateItemInInventory")
ACTIONS
IF "!c1&!c2"
	IsEqual(%LeaderLib_InventoryIterator_ItemEvent, "")
	IsEqual(%LeaderLib_InventoryIterator_ItemEvent, null)
THEN
	ItemEvent(_Item, %LeaderLib_InventoryIterator_ItemEvent)
ENDIF

EVENT LeaderLib_Events_RandomSeed
VARS
	ITEM:_Item
	INT:_Seed
ON
	OnItemEvent(_Item, "LeaderLib_Commands_GenerateRandomSeed")
ACTIONS
	GetRandomBetween(_Seed, 0, 161803398)
	Multiply(_Seed, 214013)
	Add(_Seed, 2531011)
	Clamp(_Seed, _Seed, 2147483647)
	SetVar(_Item, "LeaderLib_RandomSeed", _Seed)
	ItemEvent(_Item, "LeaderLib_Events_RandomSeedGenerated")
	
EVENT LeaderLib_Events_GetHighestExperience_Start_General
VARS
	ITEM:_Item
ON
	OnItemEvent(_Item, "LeaderLib_Commands_SetPartyExperienceVariable")
ACTIONS
	IterateParty("LeaderLib_Iterator_GetHighestExperience")

EVENT LeaderLib_Events_GetHighestExperience_Start_Player
VARS
	CHARACTER:_Player
ON
	OnCharacterEvent(_Player, "LeaderLib_Commands_SetPartyExperienceVariable")
ACTIONS
	IterateParty("LeaderLib_Iterator_SetPartyExperienceVariable", null, null, _Player)

EVENT LeaderLib_Events_GetHighestExperience_Iterate
VARS
	CHARACTER:_Player
	FLOAT:_ExpF
	INT:_Exp
ON
	OnIterateCharacter(_Player, "LeaderLib_Iterator_SetPartyExperienceVariable")
ACTIONS
IF "c1"
	CharacterGetStat(_ExpF, _Player, Experience)
THEN
	Cast(_Exp, _ExpF)
	SetVar(_Player, "LeaderLib_CurrentExperience", _Exp)
ENDIF

EVENT LeaderLib_TeleportToPosition_Character
VARS
	CHARACTER:_Char
	FLOAT3:_Pos
ON
	OnCharacterEvent(_Char, "LeaderLib_TeleportToPosition")
ACTIONS
IF "c1&!c2"
	GetVar(_Pos, _Char, "LeaderLib_Teleport_TargetPosition")
	IsEqual(_Pos, null)
THEN
	TeleportTo(_Char, _Pos, 1)
ELSE
	TeleportTo(_Char, _Char, 1)
ENDIF
	CharacterEvent(_Char, "LeaderLib_OnTeleportToPosition")

EVENT LeaderLib_TeleportToPosition_Item
VARS
	ITEM:_Item
	FLOAT3:_Pos
ON
	OnItemEvent(_Item, "LeaderLib_TeleportToPosition")
ACTIONS
IF "c1&!c2"
	GetVar(_Pos, _Item, "LeaderLib_Teleport_TargetPosition")
	IsEqual(_Pos, null)
THEN
	TeleportTo(_Item, _Pos, 1)
ELSE
	TeleportTo(_Item, _Item, 1)
ENDIF
	ItemEvent(_Item, "LeaderLib_OnTeleportToPosition")
	
EVENT LeaderLib_TeleportToCharacter
VARS
	CHARACTER:_Char
	CHARACTER:_Target
ON
	OnCharacterCharacterEvent(_Char, _Target, "LeaderLib_TeleportToObject")
ACTIONS
	TeleportTo(_Char, _Target, 1)
	CharacterCharacterEvent(_Char, _Target, "LeaderLib_OnTeleportToObject")

EVENT LeaderLib_TeleportToItem
VARS
	CHARACTER:_Char
	ITEM:_Target
ON
	OnCharacterItemEvent(_Char, _Target, "LeaderLib_TeleportToObject")
ACTIONS
	TeleportTo(_Char, _Target, 1)
	CharacterItemEvent(_Char, _Target, "LeaderLib_OnTeleportToObject")

EVENT LeaderLib_ClearAnimationOverride
VARS
	CHARACTER:_Char
ON
	OnCharacterEvent(_Char, "LeaderLib_ClearAnimationOverride")
ACTIONS
	CharacterSetAnimationOverride(_Char, "")

EVENT LeaderLib_ClearAnimationOverride_ByMovement
VARS
	CHARACTER:_Char
	FLOAT3:_Forward
	FLOAT3:_Pos
ON
	OnCharacterEvent(_Char, "LeaderLib_ClearAnimationOverride_ByMovement")
ACTIONS
	CharacterSetAnimationOverride(_Char, "")
	GetForwardDirection(_Char, _Forward)
	Multiply(_Forward, 0.1)
	GetPosition(_Char, _Pos)
	Add(_Pos, _Forward)
	SetVar(_Char, "LeaderLib_ClearAnimationOverride_TargetPosition", _Pos)
	CharacterEvent(_Char, "LeaderLib_ClearAnimationOverride_ByMovement_Run")
	
EVENT LeaderLib_LeaveAction_ExplodeProjectile
VARS
	ITEM:_Target
	CHARACTER:_Source
	ITEM:_SourceItem
	SKILL:_Skill
	INT:_Level
	FLOAT:_LevelF
	FLOAT3:_Pos
ON
	OnItemEvent(_Target, "LeaderLib_LeaveAction_ExplodeProjectile")
	OnCharacterItemEvent(_Source, _Target, "LeaderLib_LeaveAction_ExplodeProjectile")
ACTIONS
IF "c1"
	GetVar(_Skill, _Target, "LeaderLib_LeaveAction_ProjectileSkill")
THEN
	Set(_LevelF, 1.0)
	Set(_Level, 1.0)
	GetPosition(_Target, _Pos)
	IF "!c1&c2"
		IsEqual(_Source, null)
		CharacterGetStat(_LevelF, _Source, Level)
	THEN
		//Character source
		Cast(_Level, _LevelF)
		ExplodeAt(_Pos, _Skill, _Level, _Source)
		StatusText(_Target, "Character source")
	ELIF "c1&!c2&c3"
		GetVar(_SourceItem, _Target, "LeaderLib_LeaveAction_Source")
		IsEqual(_SourceItem, null)
		ItemGetStat(_LevelF, _SourceItem, Level)
	THEN
		//Item source
		Cast(_Level, _LevelF)
		ExplodeAt(_Pos, _Skill, _Level, _SourceItem)
		StatusText(_Target, "Item source")
	ELSE 
		IF "c1"
			ItemGetStat(_LevelF, _Target, Level)
		THEN
			//Null source
			Cast(_Level, _LevelF)
			ExplodeAt(_Pos, _Skill, _Level)
			StatusText(_Target, "Null source")
		ENDIF
	ENDIF
ENDIF

EVENT LeaderLib_LeaveAction_ShootProjectile
VARS
	ITEM:_Target
	CHARACTER:_Source
	ITEM:_SourceItem
	SKILL:_Skill
	INT:_Level
	FLOAT:_LevelF
	FLOAT3:_Pos
ON
	OnItemEvent(_Target, "LeaderLib_LeaveAction_ShootProjectile")
	OnCharacterItemEvent(_Source, _Target, "LeaderLib_LeaveAction_ShootProjectile")
ACTIONS
IF "c1"
	GetVar(_Skill, _Target, "LeaderLib_LeaveAction_ProjectileSkill")
THEN
	Set(_LevelF, 1.0)
	Set(_Level, 1.0)
	GetPosition(_Target, _Pos)
	IF "!c1&c2"
		IsEqual(_Source, null)
		CharacterGetStat(_LevelF, _Source, Level)
	THEN
		Cast(_Level, _LevelF)
		ShootWorldProjectileAt(_Skill, _Source, _Pos, _Target, _Level)
		StatusText(_Target, "Character source")
	ELIF "c1&c2"
		GetVar(_SourceItem, _Target, "LeaderLib_LeaveAction_Source")
		ItemGetStat(_LevelF, _SourceItem, Level)
	THEN
		Cast(_Level, _LevelF)
		ShootWorldProjectileAt(_Skill, _SourceItem, _Pos, _Target, _Level)
		StatusText(_Target, "Item source")
	ELSE
		IF "c1"
			ItemGetStat(_LevelF, _Target, Level)
		THEN
			Cast(_Level, _LevelF)
			ShootWorldProjectileAt(_Skill, ITEM:null, _Pos, _Target, _Level)
			StatusText(_Target, "Null source")
		ENDIF
	ENDIF
ENDIF

EVENT LeaderLib_Commands_Internal_ItemSetAmount
VARS
	ITEM:_Item
	INT:_Amount
ON
	OnItemEvent(_Item, "LeaderLib_Commands_Internal_ItemSetAmount")
ACTIONS
IF "c1&!c2"
	GetVar(_Amount, _Item, "LeaderLib_ItemAmount")
	IsEqual(_Amount, null)
THEN
	IF "c1|c2"
		IsGreaterThen(_Amount, 1)
		IsEqual(_Amount, 1)
	THEN
		ItemSetAmount(_Item, _Amount)
	ELSE
		ItemDestroy(_Item)
	ENDIF
ENDIF

EVENT LeaderLog_Commands_SetWeaponRequirement
VARS
	CHARACTER:_Char
ON
	OnCharacterEvent(_Char, "LeaderLog_Commands_SetSkillRequirement")
ACTIONS
IF "c1|c2|c3|c4"
	CharacterHasWeaponType(_Char, Axe, 1)
	CharacterHasWeaponType(_Char, Club, 1)
	CharacterHasWeaponType(_Char, Sword, 1)
	CharacterHasWeaponType(_Char, Spear, 1)
THEN
	SetFlag(_Char, "LeaderLib_SkillRequirement_MeleeWeapon")
ELIF "c1"
	HasFlag(_Char, "LeaderLib_SkillRequirement_MeleeWeapon")
THEN
	ClearFlag(_Char, "LeaderLib_SkillRequirement_MeleeWeapon")
ENDIF

IF "c1"
	CharacterHasWeaponType(_Char, Knife, 1)
THEN
	SetFlag(_Char, "LeaderLib_SkillRequirement_MeleeWeapon")
	SetFlag(_Char, "LeaderLib_SkillRequirement_DaggerWeapon")
ELIF "c1"
	HasFlag(_Char, "LeaderLib_SkillRequirement_DaggerWeapon")
THEN
	ClearFlag(_Char, "LeaderLib_SkillRequirement_DaggerWeapon")
ENDIF

IF "c1"
	CharacterHasWeaponType(_Char, Staff, 1)
THEN
	SetFlag(_Char, "LeaderLib_SkillRequirement_MeleeWeapon")
	SetFlag(_Char, "LeaderLib_SkillRequirement_StaffWeapon")
ELIF "c1"
	HasFlag(_Char, "LeaderLib_SkillRequirement_StaffWeapon")
THEN
	ClearFlag(_Char, "LeaderLib_SkillRequirement_StaffWeapon")
ENDIF
	
IF "c1|c2"
	CharacterHasWeaponType(_Char, Bow, 1)
	CharacterHasWeaponType(_Char, Crossbow, 1)
THEN
	SetFlag(_Char, "LeaderLib_SkillRequirement_RangedWeapon")
ELIF "c1"
	HasFlag(_Char, "LeaderLib_SkillRequirement_RangedWeapon")
THEN
	ClearFlag(_Char, "LeaderLib_SkillRequirement_RangedWeapon")
ENDIF

IF "c1"
	CharacterHasWeaponType(_Char, Wand, 1)
THEN
	SetFlag(_Char, "LeaderLib_SkillRequirement_WandWeapon")
ELIF "c1"
	HasFlag(_Char, "LeaderLib_SkillRequirement_WandWeapon")
THEN
	ClearFlag(_Char, "LeaderLib_SkillRequirement_WandWeapon")
ENDIF